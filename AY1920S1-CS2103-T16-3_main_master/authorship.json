[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003d ɯeme"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T16-3/main[image:https://travis-ci.org/AY1920S1-CS2103-T16-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "https://ci.appveyor.com/project/jonchan51/main/branch/master[image:https://ci.appveyor.com/api/projects/status/vxis0wm8gyvjm308/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T16-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T16-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "https://app.netlify.com/sites/weme/deploys[image:https://api.netlify.com/api/v1/badges/ac999ab6-18ad-47ca-8832-69ce4a03f721/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* ɯeme is a desktop application developed to help meme-lovers who prefer typing over mouse-clicking to manage their memes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* Ever wanted an app to collect your favorite memes? ɯeme is here for you! You can manage a collection of memes, create you own memes using meme templates and even share memes to your friends. More importantly, you can do all of this faster than a typical mouse-driven application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* The original source of code of this project comes from https://github.com/nus-cs2103-AY1920S1/addressbook-level3[AddressBook-Level3 project], created by https://se-education.org[SE_EDU initiative]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 6,
      "-": 24,
      "cutieprobe": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "mainClassName \u003d \u0027seedu.weme.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    // https://mvnrepository.com/artifact/org.controlsfx/controlsfx"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-text\u0027, version: \u00271.8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveName \u003d \u0027weme.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u0027site-name\u0027: \u0027Weme\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-T16-3/main\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "-": 150,
      "gary-lgy": 6,
      "cutieprobe": 2
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "- address_book_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Copyright by Icons8 - https://icons8.com/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "- doge_tab.png"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "- template_tab.png"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "- create_tab.png"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "- statistics_tab.png"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "- export_tab.png"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "- import_tab.png"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "gary-lgy": 8
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "ɯeme - An awesome meme manager where you can realize your dream of creating, managing, and sharing your own memes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "This application was adapted from the https://se-edu.github.io/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d Jonathan Chan"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "image::jonchan51.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "{empty}[http://github.com/jonchan51[github]] [\u003c\u003cjonchan51#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Responsibilities: State Management"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d Liu Guangyuan (Gary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "image::gary-lgy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "{empty}[http://github.com/gary-lgy[github]] [\u003c\u003cgary-lgy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Responsibilities: Meme Creation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d Bill Chee"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "image::livingonedge.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "{empty}[http://github.com/LivingOnEdge[github]] [\u003c\u003cLivingOnEdge#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Responsibilities: Import/Export"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d Mo Zongran"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "image::moziliar.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "{empty}[http://github.com/moziliar[github]] [\u003c\u003cmoziliar#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Responsibilities: Statistics"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d Liu Zimu"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "image::cutieprobe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "{empty}[http://github.com/cutieprobe[github]] [\u003c\u003ccutieprobe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Responsibilities: Command Auto-suggestion"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "-": 33,
      "cutieprobe": 24
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T16-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* *Email us* : You can also reach us at `cs2103t163@gmail.com`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "cutieprobe": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d Weme - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T16-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1` in the Meme tab."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* Listens for changes to `Model` data and also Statistical Data in `StatsEngine` so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ".  `Logic` uses a subclass of `WemeParser` to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a meme)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "NOTE: The lifeline for `MemeDeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* stores the Weme data in `Weme`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cMeme\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTemplate\u003e`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* stores and exposes the current Weme context (will be discussed later)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* can save the Meme Book data in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Classes used by multiple components are in the `seedu.weme.commons` package."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "The Undo and Redo commands are necessary to give users the flexibility of undoing or redoing a wrongly executed command. Especially in Weme where we deal with image files, it is possible to key in the wrong file when adding a meme. Hence, simply entering the command `undo` allows the user to revert this mistake and add the correct file accordingly."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedWeme`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "`VersionedWeme` extends `Weme` with an undo/redo history, stored internally as a `versionedWemeStates`, `stateIndex` and a `feedbackList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* `VersionedWeme#commit()` -- Saves the current Weme state in its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* `VersionedWeme#undo()` -- Restores the previous Weme state from its history and returns the feedback message of the undone command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* `VersionedWeme#redo()` -- Restores a previously undone Weme state from its history and returns the feedback message of the redone command."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitWeme()`, `Model#undoWeme()` and `Model#redoWeme()` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Only state changes on the internal structure of Weme are undoable. Commands such as `list`, `find` that only change the user interface as well as commands such as `stage`, `load` that modify the staging / import list are not undoable."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "These are the list of commands that support undo / redo operations:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* Meme Tab: `add`, `edit`, `delete`, `clear`, `archive`, `unarchive`, `like`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* Template Tab: `add`, `edit`, `delete`, `archive`, `unarchive`, `use`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* Create Tab: `add`, `abort`, `create`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* Import Tab: `import`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedWeme` will be initialized with the initial Weme state, and the `stateIndex` pointing to that single Weme state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th meme in the meme list. The `delete` command calls `Model#commitWeme()` with the success feedback message as a parameter, causing the modified state of the Weme after the `delete 5` command executes to be saved in the `versionedWemeStates`, the `stateIndex` is shifted to the newly inserted Weme state, and finally the delete command\u0027s feedback message is inserted into the `feedbackList`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Step 3. The user executes `edit 2 d/surprised pikachu` to edit a meme\u0027s description. The `edit` command also calls `Model#commitWeme()`, causing another modified Weme state to be saved into the `versionedWemeStates`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "If a command fails its execution, it will not call `Model#commitWeme()`, so the Weme state will not be saved into the `versionedWemeStates`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Step 4. The user now decides that editing the meme was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoWeme()`, which will shift the `stateIndex` once to the left, pointing it to the previous Weme state, and restores the Weme to that state. The feedback message is then returned to pass into and construct the CommandResult."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "If the `stateIndex` is at index 0, pointing to the initial Weme state, then there are no previous Weme states to restore. The `undo` command uses `Model#canUndoWeme()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoWeme()`, which shifts the `stateIndex` once to the right, pointing to the previously undone state, and restores the Weme to that state."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "If the `stateIndex` is at index `versionedWemeStates.size() - 1`, pointing to the latest Weme state, then there are no undone Weme states to restore. The `redo` command uses `Model#canRedoWeme()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the Weme, such as `list`, will usually not call `Model#commitWeme()`, `Model#undoWeme()` or `Model#redoWeme()`. Thus, the `versionedWemeStates` remains unchanged."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitWeme()`. Since the `stateIndex` is not pointing at the end of the `versionedWemeStates`, all Weme states after the `stateIndex` will be purged. We designed it this way because it no longer makes sense to redo the `edit 2 d/surprised pikachu` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "The addition of undo redo complicates certain commands. An example of this complication is when undoing add or delete commands. Originally, deleting a Meme will delete the corresponding image file on the disk. However, this means it is not possible to retrieve the file afterwards. Hence, the current implementation is to delete the Meme Entry in the json, but keep the original image file until Weme is closed. When Weme is closed, a thread will clean up all unreferenced image files in the image folder. This is part of the reason why certain commands such as `load` are not supported."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "The following sequence diagram shows how the clean up works:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "image::CleanUpSequenceDiagram.png[]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "When the handleExit command is called, MainWindow will create a Thread to call `logic.cleanUp()` to prevent the GUI from slowing down. The thread then further spawns other threads to clean up the files in the data folder, deleting those images that are not found in the memes and templates list stored on Weme."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire state."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the meme being deleted)."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Types of commands to undo"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 1 (current choice):** Includes only commands that modify the underlying data. (Add, Edit, Clear, Delete)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: Only changes that permanently affect the application are reverted."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: Might be less intuitive as a user calling `tab templates` then `undo` might expect to revert the Tab command instead."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 2:** Includes all commands"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: Intuitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: Might be very troublesome for a user if they want to revert the state instead of the view. More unexpected behaviours as certain commands such as `load` depends on files outside Weme\u0027s data folder. If there is an error on redoing a command, there is no easy way to find out."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Context for commands to be undoable"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 1 (current choice):** Allow undoing throughout the application regardless of context."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: User in a different context is able to easily undo the state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: User might expect to undo only when they are in the same context. i.e. Undo Meme commands in Meme context."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 2:** Restrict undoing to its own context"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: More user intuitive. Commands will only affect their own context."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: Heavily complicates the model. Model will then need to keep track of a versioning of every single context."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of past states."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: Easy to understand and adjust according to needs. Undo and redo simply moves along the list to change the state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: Each individual type (in this case, StatsEngine and Weme) will need to keep track of it\u0027s own versions."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 2:** Use a wrapper class"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: Everything will be handled within a single UndoRedoManager class."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: Might introduce complications as managing states now needs to go through another class instead of just the model."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Handling file changes"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 1 (current choice):** Remove files only on exit."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: No need to deal with files when managing commands. Easy to execute add and delete commands without an issue."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: Might take a while to delete if we had a lot of images."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* **Alternative 2:** Implement a recycle bin to move files to/from on command."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Pros: Commands do what they are fully expected to do (Delete deletes the image as well)."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "** Cons: Heavily complicates the logic with a need to copy and paste when undoing and redoing. Very difficult to understand and error-prone."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "// tag::templates[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Templates feature"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Many memes are based off templates. Meme lovers often store a list of templates and process them to generate new memes when needed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "A template typically reserves whitespace for the user to fill in text to give the template meanings."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme provides this feature and allows the users to store their favourite templates and generate memes with the templates."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Like a `Meme`, a `Template` also has an associated image that is stored on the hard disk."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Each `Template` object has 2 fields, `Name` and `ImagePath`, where `Name` serves as the identifier and `ImagePath` holds the path to the image of this template."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "A user can add, edit, delete, or find a template."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".Partial class diagram showing only classes in `Model` related to `Template`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image::TemplateClassDiagram.png[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Templates are stored together with `Memes` in `Weme`. Refer to the model class diagram above for details."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "When the user requests to generate a meme using a template, Weme enters the \"*Create*\" tab."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The user can then use commands to add text to the template image."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Meme creation is supported internally by the `MemeCreation` class."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "A `MemeCreation` object represents a meme creation session (which can be empty when the user is not creating a meme)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Once a session is activated, the `MemeCreation` object stores a `BufferedImage` of the template and a list of `MemeText` objects, which represent text that the user wants to add to the template."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Every time the user adds text, the list of `MemeText` gets updated."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "When the UI requests for the updated image, `MemeCreation` generates it on the fly with all the `MemeText` applied."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "When the user is done, `MemeCreation` creates a new `Meme` with all the added text included and saves it in the meme collection."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".Partial class diagram showing only classes in `Model` related to `MemeCreation`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image::MemeCreationClassDiagram.png[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Given below is an example usage scenario of meme creation using a template."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Step 1. The user launches the application and enters the *Templates* tab."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Step 2. The user executes `find doge` command to find the _doge_ template."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The `FilteredList\u003cTemplate\u003e` in `ModelManager` is updated with a predicate that matches only templates whose names match _doge_."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Step 3. Assuming the template that the user wants to use is displayed as the first template, the user executes `use 1` to start creating a meme using that template."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme starts a new `MemeCreation` session and enters the \"*Create*\" tab."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Step 4. The user executes `add cs students be like x/0.3 y/0.5` command to add the text \"cs students be like\"."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "A new `MemeText` is created and added to the list in the current `MemeCreation` session."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The UI requests `MemeCreation` to render the resultant image, and `MemeCreation` returns an image with the text \"cs students be like\""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "placed 30% horizontally from the left border and 50% vertically from the top border."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Step 5. The user decides that there is a typo in the text because \"cs\" is not capitalized."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The user executes the command `delete 1` to delete the text labelled *1*, which is the text that was just added."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "`MemeCreation` deletes this `MemeText` from the list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Upon request by the UI, `MemeCreation` generates the updated image for the UI for display."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Step 6. The user then executes `add CS student be like x/0.3 y/0.5` to add the correct text."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "`MemeCreation` adds this newly created `MemeText` to its internal list."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Step 7. The user executes `create d/A meme about CS students t/funny t/CS` to complete the creation session."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme will create a new image with the text added and save it to the data directory."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme will also create a new `Meme` entry with that image, with description \"A meme about CS students\" and tags \"funny\" and \"CS\"."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The description and tag arguments are similar to those for `Meme` add command."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The user can abort any meme creation session by typing `abort`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "This will put Weme back to displaying the content of the *Templates* tab."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The following activity diagram summarizes the meme creation process:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image::MemeCreationActivityDiagram.png[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The following sequence diagram shows how the user adds a piece of text."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image::TextAddCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store and update the image"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 1 (current choice):** Only store the initial image and a list of text. Re-generate an image when it is requested by the UI."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: Can edit/delete text after they are added."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: Waste resources by repeatedly rendering largely similar images."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 2:** Always store the updated image. Update the image whenever a piece of text is added."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: Less performance overhead, only render what is needed."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: Cannot edit/delete text."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the user adds/deletes text"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 1 (current choice):** The user enters commands to add/delete text."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: User might not be able to position the text accurately."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Mitigation measure: Provide rules as visual aid for the user."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 2:** The user controls the UI through individual key strokes."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "For example, `a` to add a piece of text, arrow keys to adjust the position of the currently selected text,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "`1` to select text labelled *1* and `d` to delete the currently selected text."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: The user can accurately adjust the position of the text."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: Very hard to implement. Requires major work on the UI."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "// end::templates[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "moziliar"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d Statistics feature 1: Like Meme"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "moziliar"
        },
        "content": "It is important to include a like meme feature such that the user gets to indicate their preference of certain memes."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "This is part of the statistics feature and isolated from the main Weme."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "moziliar"
        },
        "content": "The like data can be used for other statistical analysis."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Like data of the memes are stored inside `LikeData` class. It is built upon the infrastructure of statistics."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Statistics infrastructure is parallel to `Weme` structure from the runtime storage to logic to hard disk storage."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "moziliar"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "moziliar"
        },
        "content": "An interface for statistics `Stats` is set up for access to statistics components."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "moziliar"
        },
        "content": "`StatsManager` implements it and manages and carries LikeManager, which manages LikeData access."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "moziliar"
        },
        "content": "`Stats` exposes the `LikeData` as an unmodifiable `ObservableMap\u003cString, Integer\u003e` that the UI can subscribe to."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Updates to the like count of any memes inside the currently displayed memes will be reflected on the UI."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "moziliar"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "moziliar"
        },
        "content": "In the storage component, LikeData is stored under JsonSerializableStats as a map."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "moziliar"
        },
        "content": "The following activity diagram summarizes the meme liking process:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "moziliar"
        },
        "content": "image::MemeLikeActivityDiagram.png[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "moziliar"
        },
        "content": "The following sequence diagram shows how `MemeLikeCommand` communicates with `Stats` and update the like count."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "moziliar"
        },
        "content": "image::LikeMemeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of LikeData."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* **Alternative 1:** Put like data as a field inside Meme object."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Pros: Simple to implement."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Cons: It breaks the current closed structure of Meme."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "moziliar"
        },
        "content": "It would not make sense to add new field everytime we have some new statistics data for a meme (Like views in 2.0)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* **Alternative 2 (Current choice):** Separate `LikeData` as a `HashMap` and keep it in Stats."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Pros: It isolates an additional feature (which is not essential) from Meme"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "and allows `Stats` features in the future to use the data easily without looking through the entire Weme."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "moziliar"
        },
        "content": "(After a long while, when the number of memes pile up, like statistics has a O(n) growth in running time)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Cons: Harder to implement as it involves constructing a new infrastructure."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Also, it looks somewhat out of place in `Model` as alternative 1 seems to be able to solve the problem (for now)."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "moziliar"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "moziliar"
        },
        "content": "// tag::stats2"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d Statistics feature 2: Graphic display"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "moziliar"
        },
        "content": "This feature displays the statistics of the App. In the current version, it displays two types of data:"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "moziliar"
        },
        "content": "tags organized by the number of memes under them and by the like counts of the memes under them."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "moziliar"
        },
        "content": "The graphics are embedded in the statistics panel in Weme."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "moziliar"
        },
        "content": "The statistics data is collated by a TagManager in the Statistics package."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "moziliar"
        },
        "content": "It parses the current MemeList to collate all the tags and generate either a list of `TagWithCount` or `TagWithLike`."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "moziliar"
        },
        "content": "The `UI` passes the current `MemeList` and `Stats` interface into the panel, where the tag collation information can be"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "moziliar"
        },
        "content": "extracted in runtime."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* **Alternative 1:** Use a TagManager class (Current implementation)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Pros: Able to store `Tag` information for future use. Hard to morph it as the class grows bigger."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Cons: The Manager class behaves like a Util class."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* **Alternative 2:** Use a TagUtil class"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Pros: At the moment the class behaves like a Util class, not storing any information that is being used later."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "moziliar"
        },
        "content": "** Cons: Lack extensibility for future statistics use."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "moziliar"
        },
        "content": "// end::stats2[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "// tag::export/import"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d Export/Import feature"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "This feature allows the user to do exporting and importing of memes using their respective staging areas as"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "intermediate platforms. This allows the user to both load memes into the application from their local directory,"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "and also export memes from the application to their local directory."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d\u003d Export"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "The user may not want to export everything in the Meme storage to a directory. The Stage command"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "functionality introduces flexibility for the user to stage and shortlist which memes he wants to export,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "which will be in the staging area under the export tab. When the user accidentally stages a meme, he can"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "either use the undo command or the Unstage command. When the user finally confirms the memes to be export"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "in the staging area, the user can execute the ExportCommand with a provided directory path. The"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "following sequence diagram illustrates the execution of the `Stage Command` and `Export Command`:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "image::StageSequenceDiagram.png[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "image::ExportSequenceDiagram.png[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d\u003d Import"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "The user can use the `Load Command` to batch load all memes in the correct picture format into the import"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "context. However, the memes are not immediately imported to storage because there may be memes in the directory"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "that the user does not wish to import. Furthermore, the user may want to set descriptions and tag them before"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "it gets populated into the meme storage. Hence, the user is allowed to use Edit Command and Delete Command"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "in the import context to finalise the memes in the import context before executing the import command."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "The import command will then populate all of the memes in the staging area to the memes storage, followed"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "by clearing the memes in the import context."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Internally, `Weme` uses two `UniqueMemeList` to store memes that are to be imported or exported."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "While the user is selecting which meme to stage, the user should have a visual reference all the existing memes."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Hence, the `Stage Command` works in the Meme Context, and the user is able to stage by the Meme Index."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "On the contrary, the unstage command is only available in the export tab, where the user can reference which"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "memes to delete using the index in the export tab."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u2028Step 1. The user enters the import tab"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Step 2. The user executes LoadCommand and provide a directory path."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Weme will find files which are in valid format (e.g. png) and create a new memes"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "based on the given file path. The memes will be added into the import tab which is visible to the user."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Step 3. The user executes edit 1 d/Description t/newly added meme to edit the"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "description and tag of the newly added meme based on its index in the import area."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "This change will also be reflected visually."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Step 4. User executes import, and weme will transfer the memes from the import list into"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "the memeList, which is now viewable in the meme tab. The memes in the import tab are cleared"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "so that the user can continue importing the memes in a new directory."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "The following activity diagram summaries the load and import process:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "image::ImportActivityDiagram.png[]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Tab for Export and Import feature"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* **Alternative 1 (current choice):** Separate import and export into two different tabs."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** Pros: Shows clear segregation of the two different feature since they are implemented"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "differently. This will not confuse the user."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** Cons: Extra tab is required."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* **Alternative 2:** Use a storage tab to represent both import and export. User can toggle between"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import and export using subcontext."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** Pros: Only one tab is used and also `storage` label captures the concept of import and export."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** Cons: Easily confuses the user due to extra complexity involved (subcontext). This will also cause"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "navigating between import and export mode to be less subtle."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "// end::export/import[]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "// tag::command suggestions[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d Command Suggestion Feature"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Users can be forgetful about the command format and sometimes unsure of what arguments to supply."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Auto-suggestion of command arguments while the user keys in inputs can be very helpful to provide user hints."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Possible command words will be suggested to user based on incomplete input."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Depending on what the user has typed in for the argument, the most similar argument values retrieved from the historical"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "records will be displayed to the user for reference."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "The user can also use the \"TAB\" key to auto complete the command word/argument, where the first prompt will"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "replace the current command word/argument in user input."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "The command suggestions is achieved using a package of prompter files."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "For each parser, there will a corresponding prompter to process the current user input and return the `CommandPrompt` for display in `ResultBox`."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Step 1. The user types commands into the `CommandBox`."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Step 2. The `MainWindow` listens to changes in the content in `CommandBox` and direct the input to `WemePrompter`."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Step 3. Depending on the context, the prompter that implements `WemePrompter` (e.g. `MemePrompter`) will then pass the arguments"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "to different `Prompter` (e.g. `MemeAddCommandPrompter`) based on the command word."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Step 4: The `Prompter` will process the input and return a `CommandPrompt` containing the command suggestion, and the"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "complete text for auto-completion for the given input."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Step 5: The prompt will be passed to and displayed by `ResultBox`."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Step 6: The `CommandBox` listens to the \"TAB\" key press, and replace the current argument with the first command prompt."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to process the input and produce the command prompt"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* **Alternative 1 (current choice):** Use a prompter package to abstract out the prompter for each command."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Pros: Single Responsibility Principle and Separation of Concerns are achieved and coupling is reduced."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Cons: Additional layer of abstraction and longer code."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* **Alternative 2:** Add one more method in each parser."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Cons: The class that processses input will depend on `Parser`."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to store and access historical records."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* **Alternative 1 (current choice):** Use a separate `Records` storage file to store all the historical arguments."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Pros: Better abstraction and the records has the option to persist even if the file is deleted."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Cons: More files to store and longer code."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* **Alternative 2:** Store arguments of a resource (e.g. `Meme`) as a field of the resource."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Pros: Easier to implement and cleaner."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "** Cons: Irrelevant information needs to be stored as a field (e.g. original file path of a resource)."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "// end::command suggestions[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "// tag::tabs[]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Tabs feature"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Most features in Weme can be logically grouped together."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "For example, listing memes and viewing a single meme forms a group,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "listing templates and generating memes with templates forms another group,"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "whereas statistics and import/export form their own groups."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "As such, it seems logical for us to separate distinct groups of features at the UI level to make it more intuitive to the user."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "We achieve this by putting each group of features into a tab."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "As discussed earlier, `ModelManager` stores `ModelContext` which keeps track of the current context Weme is in."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Within each context, Weme exposes different commands and has different behaviors."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Tabs can be roughly seen as the reflection of `ModelContext` at the UI level."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "For example, when the `ModelContext` changes from `Memes` to `Templates`, the UI should switch from the *Memes* tab to the *Templates* tab."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "However, a tab can house multiple contexts."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "For example, both *Templates* context for viewing templates and *MemeCreation* context for creating memes will be under the *Templates* tab."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Shown below are the tabs and their associated `ModelContext`s."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Memes* tab"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Memes (showing all memes)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Meme (viewing a particular meme) (_to be added_)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".Screenshot of Weme in the *Memes* tab"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image:MemesTabScreenshot.png[]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Templates* tab"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Templates (showing all templates)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".Screenshot of Weme in the *Templates* tab"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image:TemplatesTabScreenshot.png[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Create* tab"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Current meme creation session. Displays placeholder text if no session is going on."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Statistics* tab"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Statistics (showing Weme statistics)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Import* tab"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Import (for importing `Meme`s and `Templates`)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Export* tab"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Export (for exporting `Meme`s and `Templates`)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *Preferences* tab"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** Preferences (showing current user preferences)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "`ModelContext`,"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* is stored in `ModelManager` as a `SimpleObjectProperty`."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* can be changed by `Comamnd` execution."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* is exposed in `Logic`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* is observed by `MainWindow` to update the UI."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The user can switch tabs with `tab xyz` command, where `xyz` is the tab the user would like to switch to."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The class diagram below shows the relationship between `Ui`, `Logic` and `Model` with regard to `ModelContext`."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image:ModelContextClassDiagram.png[]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The sequence diagram below summarizes what happens when the user switches tabs."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "image::TabSwitchSequenceDiagram.png[]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to switch tabs"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 1 (current choice):** Use commands to switch tabs."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: Keyboard friendly."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: New users who have not read the user guide might not know the command syntax."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 2:** Use mouse to click on tab buttons."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: More intuitive for new users."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: Users who prefer a keyboard-driven workflow might not want to use the mouse."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Number of contexts a tab should have"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 1 (current choice):** Each tab can have multiple contexts."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: More intuitive to the user, less screen space wasted for extra tabs."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: More difficult to implement. Need to be careful about which commands can change the context."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* **Alternative 2:** Each tab has exactly one context."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Cons: Similar features not closely grouped together, more tabs for the same amount of features."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "// end::tabs[]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* wants to manage a library of memes"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* wants to create memes for entertainment"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* wants to participate in the meme culture by sharing memes"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*Value proposition*: manage memes faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "|Priority |As a ... |I want to ... |So that ..."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "|`* * *` |meme lover |manage my collection of memes |I can view them anytime I want"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* * *` |organized meme lover |tag memes |I can better organize my memes"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "|`* * *` |user with many memes |filter memes |I can quickly locate a certain meme"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* * *` |creative person |create my own memes from meme templates |"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "|`* * *` |user |archive memes |I can stop seeing old memes"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* * *` |careless user |undo/redo any accidental deletion of memes |I can retrieve back my favourite memes"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* * *` |user |get hints on command syntax when i type |I don\u0027t have to memorize the command syntax"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* * *` |meme lover |easily share my memes to other platforms |I can send them in my chats"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* * *` |user |import memes |I can import memes my friends shared with me into my personal collection"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* * *` |user |export memes |I can backup the memes or share them with another user"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "|`* * *` |user |view statistics of my meme usage |I know which memes are more liked/used"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "|`* *` |bored person |view random memes |I can kill time"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`* *` |user |bookmark my favourite memes |I can find them quickly"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "|`*` |person new to meme |get the reference to the meme I see for the first time |I can learn how to use the meme"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "(For all use cases below, the *System* is the `Weme` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Use case 1: Add template"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "1. User requests to open the template tab"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "2. Weme opens the template tab"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "3. User requests to create a template, using a base picture from the disk"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "4. Weme creates the template"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "5. User requests to edit the template"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "6. Weme loads the template into the editing area"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "7. User requests to add/move text boxes in the template"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "8. Weme adds/moves text boxes in the template"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "9. User requests to complete the edit session"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "10. Weme successfully completes the edit session"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 3a. The given path is invalid"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 3a1. Weme shows an error message"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 5a. The given index is invalid"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 5a1. Weme shows an error message"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 9a. User enters another command before completing the edit session"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 9a1. Weme aborts the current edit session"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 9a2. Weme executes the command just entered by the user"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Use case 2: Create meme from template"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "1. User requests to list meme templates"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "2. Weme shows a list of meme templates"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "3. User selects a template to create a meme"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "4. Weme creates the meme from the selected template based on user input"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 2a. The template list is empty"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 3a. The given index is invalid"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 3a1. Weme shows an error message"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 4a. The given input is invalid"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 4a1. Weme shows an error message"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Use case 3: Import meme"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "1. User requests to open the import tab"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "2. Weme opens the import tab"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "3. User requests to import a meme collection from a directory"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "4. Weme adds the memes from the collection into the staging area"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "5. User requests to delete unwanted memes in the staging area"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "6. Weme deletes those memes from the staging area"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "7. User confirms the import"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "8. Weme successfully imports the selected memes from the collection"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 3a. The given directory path is invalid."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 3a1. Weme shows an error message"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 3b. The given collection is corrupted"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 3b1. Weme shows an error message"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 7a. There are no memes left in the staging area"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 7a1. Weme shows an error message"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Use case 4: Undo/Redo"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "1. User opens Weme"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "2. User requests to delete a meme"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "3. Weme deletes the meme"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "4. User requests to undo"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "5. Weme undoes the deletion and restores the meme"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "6. User requests to redo"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "7. Weme redoes and re-executes step 3"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 5a. User keys in undo again"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 5a1. Weme shows an error message"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 5b. User adds a meme and keys in redo"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 5b1. Weme shows an error message"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* 6a. User keys in redo again"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** 6a1. Weme shows an error message"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ". Should be able to hold up to 1000 memes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ". Should have a ui design that is intuitive enough for the user to use."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "[[meme-template]] Meme template::"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "A picture with placeholders for text. A meme can be created by replacing the placeholders with text."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*Weme*"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "_{TODO}_"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 145,
      "moziliar": 74,
      "jonchan51": 83,
      "-": 353,
      "gary-lgy": 260,
      "cutieprobe": 42
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ". Run the `seedu.weme.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "e.g. `seedu.weme.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "e.g. `seedu.weme.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "e.g. `seedu.weme.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 49
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d Weme - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T16-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "By: `CS2103-T16-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme is a meme manager app for those who *prefer to use a desktop app for managing memes*. More importantly, Weme is *optimized for those who prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Weme can let you manage memes faster than traditional GUI apps. Interested? Jump to the Section 2, \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": ".  Download the latest `weme.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Weme."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "//image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *`tab memes`* : switches to the memes tab"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* In the memes tab:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *`list`* : lists all memes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** **`add`**`p//Users/Me/Downloads/meme.jpg d/Top meme` : adds a meme located at `/Users/Me/Downloads/meme.jpg` with the description `Top meme`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** **`delete`**`3` : deletes the 3rd meme shown in the memes tab"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *`exit`* : exits the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add p/PATH`, `PATH` is a parameter which can be used as `add p//Users/Me/Downloads/meme.jpg`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Items in square brackets are optional e.g `p/PATH [t/TAG]` can be used as `p//Users/Me/Downloads/meme.jpg t/cs2103` or as `p//Users/Me/Downloads/meme.jpg`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/cs2103`, `t/soc t/funny` etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `p/PATH d/DESCRIPTION`, `d/DESCRIPTION p/PATH` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Whenever `INDEX` is encountered, it refers to the index in the currently displayed list and *must be a positive integer*."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous commands : `undo`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Undoes commands and tells you the command you just undid. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Format: `undo` +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Example: `undo`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing previously undone commands: `redo`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Redoes previously undone commands and tells you the command you just redid. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Format: `redo` +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Example: `redo`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "****"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "`undo` and `redo` only supports commands that modify data in Weme. This means that commands that alter the UI (such as `find` and `list`), as well as commands that modify the staging / import list (such as `load`, `stage`) are not undoable. The following are the commands that are undoable in each tab:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Memes Tab: `add`, `edit`, `delete`, `clear`, `archive`, `unarchive`, `like`, `dislike`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Templates Tab: `add`, `edit`, `delete`, `archive`, `unarchive`, `use`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* Create Tab: `add`, `abort`, `create`, `edit`, `delete`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "* Import Tab: `import`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "`undo` and `redo` are also global actions. This means that if you made a change in the memes tab, and changed to the templates tab, when `undo` is entered, it will undo the change done in the memes tab."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Switching tabs : `tab`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Switches between tabs in the application. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `tab TAB_NAME` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "`TAB_NAME` options:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *memes*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *templates*"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *create*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *statistics*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *export*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *import*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* *preferences*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Exits Weme. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Memes Tab"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a meme: `add`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Adds a new meme to Weme. Weme will copy the given image into its data storage folder. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Format: `add p/PATH [d/DESCRIPTION] [t/TAG]...` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "A meme can have any number of tags (including 0)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `add p//Users/Me/Downloads/dgirl_oof.jpg t/Funny` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Adds a meme with the image from `/Users/Me/Downloads/dgirl_oof.jpg` and tag `Funny`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Note the double `/` near the prefix `p/`. The first `/` is part of the argument prefix, whereas the second `/` is part of the file path. Both `/` s must be present for the command to succeed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all memes: `list`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Lists all memes in the memes tab. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a meme: `edit`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Edits the details of a meme at the specified index. Only description and tags are editable. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `edit INDEX [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* When editing tags, the existing tags of the meme will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* You can remove all the meme\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `edit 1 d/Funny SoC Meme t/funny t/SoC` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Edits the description of the 1st meme to be `Funny SoC Meme` and tags to be `funny` and `SoC`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `edit 2 d/Random Meme t/` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Edits the description of the 2nd meme to be `Random Meme` and clears all existing tags."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a meme: `find`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Finds all memes whose tags contain any of the specified keywords."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* The search is case-insensitive. e.g `Pikachu` will match `pikachu`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* The order of the keywords does not matter. e.g. `run naruto` will match `naruto run`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Only the tag names are searched."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Only full words will be matched e.g. `naru` will not match `naruto`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `find pikachu` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Returns memes whose tags contain `pikachu`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a meme: `delete`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Deletes the meme at the specified index. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Deletes the 2nd meme in the results of the `list` command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* `meme find pikachu` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Deletes the 1st meme in the results of the `find` command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all memes: `clear`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Clears all memes. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Staging a meme for export: `stage`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Stages the meme at the specified index into the export staging area. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `stage INDEX`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Liking a meme: `like`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Likes a meme at the specified index. +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `like INDEX`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "You could use arrow key kbd:[Up] to quickly like a meme at the given index. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "To do this, key in the full command `like INDEX` then press arrow key kbd:[Up]. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "You can also use arrow key kbd:[Left] and kbd:[Right] to increase / decrease the meme index."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Disliking a meme: `dislike`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Dislike a meme at the specified index. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `dislike INDEX`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Same as like, dislike also allows arrow key operations."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Listing archived memes: `archives`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Lists all archived memes. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `archives`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Archiving a meme:  `archive`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Archives a meme at the specified index. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `archive INDEX`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Unarchiving a meme: `unarchive`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Unarchives a meme at the specified index. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `unarchive INDEX`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d Templates Tab"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Templates are meme prototypes."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "You can add templates to Weme and use them to create new memes."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The templates tab handles template management and meme creation is handled in the create tab."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a template: `add`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Adds a new template to Weme. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `add n/NAME p/PATH`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `add n/Drake p//Users/Me/Downloads/Drake.jpg` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Adds a template with image `/Users/Me/Downloads/Drake.jpg` and name it `Drake`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all templates: `list` (_coming in v1.4_)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Lists all templates. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a template: `edit`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Edits a template at the specified index. Only the name is editable. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `edit INDEX n/NAME`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `edit 1 n/Surprised Pikachu` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Edits the name of the 1st template to be `Surprised Pikachu`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Locating templates by name: `find` (_coming in v1.4_)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Finds templates whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "moziliar"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* The search is case-insensitive. e.g `drake` will match `dRaKE`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* The order of the keywords does not matter. e.g. `Pikachu Surprised` will match `Surprised Pikachu`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Only the name is searched"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Only full words will be matched e.g. `sponge` will not match `spongebob`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Templates matching at least one keyword will be returned (i.e. OR search). e.g. `SpongeBob Patrick` will return both `Tired SpongeBob` and `Savage Patrick`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* `find Thanos` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Returns all templates containing `Thanos` in their names"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "moziliar"
        },
        "content": "* `find Stonks Doge Pikachu` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Returns any templates having names `stonks`, `doge`, or `pikachu`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a template: `delete`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Deletes the template at the specified index. +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Archiving a template: `archive`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Archives the template at the specified index. +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `archive INDEX`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Unarchiving a template: `unarchive`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Unarchives the template at the specified index. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `unarchive INDEX`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all archived templates: `archives`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Lists all templates that are archived in the templates tab. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `archives`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Creating memes from templates: `use`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Uses the template at the specified index to start a meme creation session. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme will enter the create tab and allow you to add text to the template. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "For details, please refer to the next section \u003c\u003cCreate Tab\u003e\u003e. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `use INDEX`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d Create Tab"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The create tab allows you to create a new meme from a template."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "To start a meme creation session, select a template from the templates tab and execute the `use` command."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Adding text: `add`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Adds a piece of text to the template. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `add TEXT x/X_COORDINATE y/Y_COORDINATE [c/COLOR] [s/SIZE] [S/STYLE]...`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `X_COORDINATE` and `Y_COORDINATE` denote the position at which the supplied text will be placed and are represented as ratios of the image dimensions."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "`x/0.3 y/0.5` means the center of the supplied text will be 30% right of the left border and 50% down from the top border."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `COLOR` can be a name, e.g. `cyan`, or a hex RGB value, e.g. `#FF34E2`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Weme supports 6 levels of font size. `SIZE` must be an integer from 1 to 6, where 1 denotes the smallest font size and 6 denotes the largest font size. Some text of each font size can be found at the right hand side of the image as a reference."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `STYLE` must be `plain`, `bold`, or `italic`. In the case you specify multiple font styles, Weme will combine them. For example, `S/bold S/italic` will give you bold and italic text."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* If you do not specify `COLOR`, `SIZE`, or `STYLE`, the default values will be used. The default values are black, 5, and plain, respectively."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Weme will not add text that would exceed the image boundary. If it detects such a scenario, it will print an error message."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `add CS students be like x/0.3 y/0.5` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Adds text `CS students be like` to the template, placing its center 30% right of the left border and 50% down from the top border."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `add sToNKs x/0.5 y/0.75 c/red s/5 S/bold` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Adds red and bold text `sToNKs` with size 5 to the template, placing its center 50% right of the left border and 75% down from the top border."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Editing text: `edit`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Whenever you add text, the list at the right hand side will be updated. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "The `edit` command allows you to choose and edit a piece of text from that list. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `edit INDEX [t/TEXT] [x/X_COORDINATE] [y/Y_COORDINATE] [c/COLOR] [s/SIZE] [S/STYLE]...`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* When editing text styles, the existing styles of the text will be removed i.e adding of styles is not cumulative."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `edit 1 t/CODE` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Changes the text at index 1 to `CODE`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `edit 2 x/0.5` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Changes the x-coordinate of the text at index 2 to 0.5."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `edit 3 c/#FC1423 s/5 S/bold` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Edits the text at index 3, changing its color to #FC1423, size to 5 and style to bold."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting text: `delete`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Deletes the text at the specified index. +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Aborting meme creation: `abort`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Aborts this meme creation session and go back to the templates tab. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `abort`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Completing the creation session: `create`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Creates a new meme with all the added text applied. The new meme will be saved into Weme\u0027s meme collection, with the specified description and tags. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `create [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* This command does not modify the template you used to start the creation session."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "****"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* `create d/sleep or code t/soc t/cs2103` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Creates a new meme from the current meme creation session, giving it a description `sleep or code` and tags `soc` and `cs2103`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d Export Tab"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Unstaging a meme: `unstage`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Unstages the meme at the specified index from the export staging area. +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `unstage INDEX`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting memes: `export`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Exports the memes in the export tab into a directory. The directory path can"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "be either specified or not."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* If the path is not specified, then the memes will"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "be exported to an export folder located at where the jar file is."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** Format: `export`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* If path is specified, the memes will be exported to that directory."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** Format: `export p//Users/bill/favourites/`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* The user can use a special [d] keyword to export to a default path"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "configured by preferences.json."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** Format: `export p/[d]`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing the staging area: `clear`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Clears all memes in the export tab. +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d Import Tab"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Loading memes: `load`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Loads memes from a specified directory into the import tab. +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `load p/PATH`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a meme: `edit`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Edits a meme from the import tab. This allows the user"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "to make changes before actually importing the meme. +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Format: `edit INDEX [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a meme: `delete`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Deletes an unwanted meme from the import tab. +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Importing memes: `import`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Imports memes from the import tab into Weme. +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `import`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "****"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* Weme only imports image files with valid extensions (e.g. `.png`, `.jpg`, `.gif`)."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "* Any invalid or corrupted files are ignored (e.g. `.txt`, invalid files"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "with `.jpg` extension)."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "****"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing loaded memes: `clear`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Clears all the memes in the import tab. +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003d\u003d\u003d Statistics Tab"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "View various statistics about the memes such as tags and likes count by tags, and most used templates."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d\u003d Command Suggestions"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* Suggestions for command word/argument based on current user input will be displayed in the result box."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* The auto-suggestion is dynamic and automatically updates while the user type in command."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* The suggestions are retrieved from historical records and sorted according to the similarity to user input, with the first suggestion"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "being the most recommended one."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* For the command word suggestion, only commands available for current context will be displayed."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Description for each command will be displayed after each command word."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* User can press kbd:[Tab] key to auto-complete the command suggestion, i.e. replacing current command word/arguments with"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "the first suggestion displayed (if there is any)."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "* If the user input is of invalid format, the text will turn red and error messages will be displayed in the result box"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "immediately without pressing kbd:[Enter] key. This does not account for invalid values, e.g. input meme index is 5 but there is"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "no meme of index 5."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example 1: +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "When user types in \"a\" in the meme context, the following suggestions will appear: +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`add: adds a meme to Weme. +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "archive: archive a meme by index. +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "archives: list all archived memes.` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "If kbd:[Tab] is pressed, \"a\" in the command box will be replaced by \"add\"."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "Example 2: +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "When user types in \"add p/pathToMeme t/c\", the following suggestions will appear: +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "`CS +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "cute +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "CS2103` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "If kbd:[Tab] is pressed, \"c\" in the command box will be replaced by \"CS\"."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "*A*: Download the jar in the other computer and copy the entire data folder over."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Universal Commands* :"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Help* : `help`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Undo* : `undo`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Redo* : `redo`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Switch tabs* :"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*** *Memes Tab* : `tab memes`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*** *Templates Tab* : `tab templates`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*** *Create Tab* : `tab create`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*** *Statistics Tab* : `tab statistics`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*** *Export Tab* : `tab export`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*** *Import Tab* : `tab import`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "*** *Preferences Tab* : `tab preferences`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Exit* : `exit`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Commands for the Memes tab* :"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Add Meme* : `add p/PATH [d/DESCRIPTION] [t/TAG]...` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "e.g. `add p//Users/Me/Downloads/dgirl_oof.jpg d/Disaster Girl t/Funny`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Clear Memes* : `clear`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Delete Meme* : `delete INDEX`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Edit Meme* : `edit INDEX [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Stage Meme* : `stage INDEX`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Like Meme* : `like INDEX`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Dislike Meme* : `dislike INDEX`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Find Meme* : `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *List Memes* : `list`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *List Archived Memes* : `archives`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Archive Meme* : `archive INDEX`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Unarchive Meme* : `unarchive INDEX`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Commands for the Templates Tab* :"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Add Template* : `add n/NAME p/PATH`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Edit Template* : `edit INDEX n/NAME`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Delete Template* : `delete INDEX`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Find Template* : `find KEYWORD [MORE_KEYWORDS]` (_coming in v1.4_)"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Archive Template* : `archive INDEX`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Unarchive Template* : `unarchive INDEX`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *List Templates* : `list` (_coming in v1.4_)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *List Archived Templates* : `archives`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Use Template* : `use INDEX`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Commands for the Create Tab* :"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Add text* : `add TEXT x/X_COORDINATE y/Y_COORDINATE [c/COLOR] [s/SIZE] [S/STYLE]...`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Edit text* : `edit INDEX [t/TEXT] [x/X_COORDINATE] [y/Y_COORDINATE] [c/COLOR] [s/SIZE] [S/STYLE]...`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Delete text* : `delete INDEX`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Abort creation* : `abort`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Finish creation* : `create [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Commands for the Export Tab* :"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Unstage Meme* : `unstage INDEX`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Export Meme* : `export [p/PATH]`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Clear staged Memes* : `clear`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "* *Commands for the Import Tab* :"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Load Memes* : `load p/PATH`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "** *Edit Meme* : `edit INDEX [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Delete Meme* : `delete INDEX`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Import Memes* : `import`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "** *Clear loaded Memes* : `clear`"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 94,
      "moziliar": 65,
      "jonchan51": 17,
      "-": 112,
      "gary-lgy": 229,
      "cutieprobe": 21
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteMeme(m)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveWeme(weme)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/CleanUpSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":VersionedWeme\" as VersionedWeme MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MainWindow -\u003e MainWindow : handleExit()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "par"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MainWindow -\u003e LogicManager : cleanUp()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "par"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "LogicManager -\u003e Model : cleanMemeStorage()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model -\u003e VersionedWeme : getMemeList()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate VersionedWeme"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "VersionedWeme --\u003e Model : memes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate VersionedWeme"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "loop each meme"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model -\u003e] : getImagePath().getFilePath().toFile()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model \u003c-- : file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model -\u003e Model : getMemeImagePath()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "return path"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "loop each file in Files.list(path)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "alt !filesToKeep.contains(file)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model -\u003e] : File.delete()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model \u003c--"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model --\u003e LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "else"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "LogicManager -\u003e Model : cleanTemplateStorage()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model --\u003e LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "else"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "LogicManager --\u003e MainWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MainWindow --\u003e MainWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "[\u003c-- MainWindow"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "end"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 70
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if () then ([command commits Weme])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    :Save Weme to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    versionedWemeStates;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":MemeParser\" as MemeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":MemeDeleteCommandParser\" as MemeDeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \"d:MemeDeleteCommand\" as MemeDeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "LogicManager -\u003e MemeParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate MemeParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "create MemeDeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeParser -\u003e MemeDeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate MemeDeleteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommandParser --\u003e MemeParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate MemeDeleteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeParser -\u003e MemeDeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate MemeDeleteCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "create MemeDeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommandParser -\u003e MemeDeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate MemeDeleteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommand --\u003e MemeDeleteCommandParser : d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate MemeDeleteCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommandParser --\u003e MemeParser : d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate MemeDeleteCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommandParser -[hidden]-\u003e MemeParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "destroy MemeDeleteCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate MemeParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "LogicManager -\u003e MemeDeleteCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate MemeDeleteCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommand -\u003e Model : deleteMeme(1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model --\u003e MemeDeleteCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "CommandResult --\u003e MemeDeleteCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "MemeDeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate MemeDeleteCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 32,
      "-": 38
    }
  },
  {
    "path": "docs/diagrams/ExportSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":ExportParser\" as ExportParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":MemeExportCommandParser\" as MemeExportCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":MemeExportCommand\" as MemeExportCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":ModelManager\" as ModelManager  MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":VersionedWeme\" as Weme MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "box File STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \"FileUtil\" as FileUtil STORAGE_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[-\u003e LogicManager : execute(\"export\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "LogicManager -\u003e ExportParser : parseCommand(\"export\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate ExportParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "ExportParser -\u003e MemeExportCommandParser : parse(exportPath)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate MemeExportCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "create MemeExportCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeExportCommandParser -\u003e MemeExportCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate MemeExportCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeExportCommand --\u003e MemeExportCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate MemeExportCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeExportCommandParser --\u003e ExportParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate MemeExportCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "ExportParser --\u003e LogicManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate ExportParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "LogicManager -\u003e MemeExportCommand : execute(model)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate MemeExportCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeExportCommand -\u003e ModelManager : exportMeme(path)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "ModelManager -\u003e Weme : export(path)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate Weme"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme -\u003e FileUtil : export(list, path)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate FileUtil"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "FileUtil --\u003e Weme"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate FileUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme --\u003e ModelManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate Weme"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "ModelManager --\u003e MemeExportCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeExportCommand --\u003e LogicManager : CommandResult(success)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate MemeExportCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 52,
      "jonchan51": 7
    }
  },
  {
    "path": "docs/diagrams/ImportActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ":User enters import tab;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ":User loads a given directory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "if () then ([User wants to edit loaded meme])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    :User edits loaded meme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "else ([User wants to delete loaded meme])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    :User deletes loaded meme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "repeat while () is ([User wants to continue editing/deleting])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ":User imports meme into meme storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "repeat while () is ([User wants to continue loading])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 23
    }
  },
  {
    "path": "docs/diagrams/LikeMemeSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "participant \":MemeLikeCommandParser\" as MemeLikeCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "participant \"c:MemeLikeCommand\" as MemeLikeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "participant \"r:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "participant \":Stats\" as Stats MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MainWindow -\u003e LogicManager : execute(like index)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "LogicManager -\u003e MemeLikeCommandParser : parseCommand(like index)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "activate MemeLikeCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "create MemeLikeCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MemeLikeCommandParser -\u003e MemeLikeCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "activate MemeLikeCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MemeLikeCommand --\u003e MemeLikeCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate MemeLikeCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MemeLikeCommandParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate MemeLikeCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "LogicManager -\u003e MemeLikeCommand : execute()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "activate MemeLikeCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MemeLikeCommand -\u003e Model : incrementMemeLikeCount(meme)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Model -\u003e Stats : incrementMemeLikeCount(meme)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "activate Stats"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Stats ---\u003e Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate Stats"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Model ---\u003e MemeLikeCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MemeLikeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "CommandResult ---\u003e MemeLikeCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MemeLikeCommand -\u003e LogicManager : r"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate MemeLikeCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "LogicManager -\u003e MainWindow : r"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "moziliar": 63
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Class \"{abstract}\\nWemeParser\" as WemeParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Class XYZParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "LogicManager ..\u003e WemeParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "XYZParser -up-|\u003e WemeParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "XYZParser .down.\u003e XYZCommandParser : creates \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "note right of XYZParser: XYZParser \u003d MemeParser, TemplateParser, \\nImportParser, etc."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d MemeAddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 8,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/MemeCreationActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ":User enters meme creation mode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ":User adds text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "while () is (else)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    if () then ([User wants to add text])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        :User adds text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    else if () then ([User wants to edit text])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        :User edits text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    else ([User wants to delete text])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        :User deletes text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "endwhile (finished?)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ":Weme generates new Meme, applying all text entered by the user;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 22
    }
  },
  {
    "path": "docs/diagrams/MemeCreationClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "HiddenOutside .down.\u003e Model"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Weme"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package Template {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Template"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class MemeCreation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class UniqueTemplateList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package MemeCreation {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class MemeCreation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class MemeText"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Coordinates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class MemeTextColor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class MemeTextSize"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class MemeTextStyle"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager o-down-\u003e \"1\" Weme"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme -down-\u003e \"1\" MemeCreation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme -down-\u003e \"1\" UniqueTemplateList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "UniqueTemplateList o-\u003e \"*\" Template"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreation .\u003e Template"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreation -down-\u003e \"1\" MemeText : ObservableList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeText *-down-\u003e \"1\" Coordinates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeText *-down-\u003e \"1\" MemeTextColor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeText *-down-\u003e \"1\" MemeTextSize"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeText *-down-\u003e \"1\" MemeTextStyle"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 45
    }
  },
  {
    "path": "docs/diagrams/MemeLikeActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": ":User likes a meme by index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ":Weme updates the like count of the meme at the index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "stop"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "moziliar": 7
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Interface ReadOnlyWeme \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Interface Stats \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Class Weme"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Class ReadOnlyWeme"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class FilteredList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package Meme {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Meme"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class UniqueMemeList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package Template {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Template"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class UniqueTemplateList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Package Statistics {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Class StatsManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Class LikeData"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Class LikeManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "Class TagManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package ImagePath {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class ImagePath"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme .up.|\u003e ReadOnlyWeme"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "ModelManager o--\u003e \"1\" Weme"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme *--\u003e \"1\" UniqueMemeList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "UniqueMemeList o--\u003e \"*\" Meme"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Meme *--\u003e \"1\" ImagePath"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Meme *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Meme *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Weme *-right-\u003e \"1\" StatsManager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme *--\u003e \"1\" UniqueTemplateList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "UniqueTemplateList o--\u003e \"*\" Template"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Template *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Template *--\u003e \"1\" ImagePath"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "StatsManager .up.|\u003e Stats"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "StatsManager *--\u003e \"1\" LikeManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "StatsManager *--\u003e \"1\" TagManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "LikeManager *--\u003e \"1\" LikeData"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager --\u003e\"1\" Meme : filtered list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager --\u003e\"1\" Template : filtered list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "moziliar": 11,
      "jonchan51": 7,
      "-": 37,
      "gary-lgy": 24
    }
  },
  {
    "path": "docs/diagrams/ModelContextClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class MainWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class ModelContext MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MainWindow -right-\u003e LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MainWindow .\u003e ModelContext"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager o-\u003e \"1\" ModelContext"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "LogicManager o-down-\u003e ModelManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "LogicManager .\u003e ModelContext"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 26
    }
  },
  {
    "path": "docs/diagrams/StageSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":WemeParser\" as WemeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":MemeStageCommandParser\" as MemeStageCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":MemeStageCommand\" as MemeStageCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \":ModelManager\" as ModelManager  MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":VersionedWeme\" as Weme MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "participant \"exportList:UniqueMemeList\" as UniqueMemeList MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[-\u003e LogicManager : execute(\"stage 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "LogicManager -\u003e WemeParser : parseCommand(\"stage 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate WemeParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "WemeParser -\u003e MemeStageCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate MemeStageCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "create MemeStageCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeStageCommandParser -\u003e MemeStageCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate MemeStageCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeStageCommand --\u003e MemeStageCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate MemeStageCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeStageCommandParser --\u003e WemeParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate MemeStageCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "WemeParser --\u003e LogicManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate WemeParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "LogicManager -\u003e MemeStageCommand : execute(model)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate MemeStageCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeStageCommand -\u003e ModelManager : stageMeme(meme)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "ModelManager -\u003e Weme : stageMeme(meme)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate Weme"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme -\u003e UniqueMemeList : add(meme)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "activate UniqueMemeList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "UniqueMemeList --\u003e Weme"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate UniqueMemeList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme --\u003e ModelManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate Weme"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "ModelManager --\u003e MemeStageCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "MemeStageCommand --\u003e LogicManager : CommandResult(success)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate MemeStageCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 47,
      "jonchan51": 7
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Interface WemeStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Class JsonWemeStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "StorageManager o-down-\u003e WemeStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "JsonWemeStorage .left.|\u003e WemeStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "JsonWemeStorage .down.\u003e JsonSerializableWeme"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "JsonSerializableWeme .down.\u003e JsonAdaptedMeme"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "JsonAdaptedMeme .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "JsonSerializableWeme .right.\u003e JsonSerializableStats"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "JsonSerializableWeme .left.\u003e JsonSerializableRecord"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "JsonSerializableWeme .down.\u003e JsonAdaptedTemplate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "moziliar": 8,
      "jonchan51": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/TabSwitchSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"tab memes\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "LogicManager -\u003e ModelManager : setContext(memes)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager -\u003e LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "LogicManager -\u003e MainWindow"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MainWindow -\u003e MainWindow : setAppContent"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "note left"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  (After being notified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  of change in context)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "end note"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 34
    }
  },
  {
    "path": "docs/diagrams/TemplateClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Class Weme"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class FilteredList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package Template {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Template"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class UniqueTemplateList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Package ImagePath {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class ImagePath"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "ModelManager o--\u003e \"1\" Weme"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Weme *--\u003e \"1\" UniqueTemplateList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "UniqueTemplateList o--\u003e \"*\" Template"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Template *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Template *--\u003e \"1\" ImagePath"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "ModelManager --\u003e\"1\" Template : filtered list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "gary-lgy": 35
    }
  },
  {
    "path": "docs/diagrams/TextAddCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":MemeCreationPanel\" as MemeCreationPanel UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":CreateParser\" as CreateParser LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \"c:TextAddCommand\" as TextAddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "participant \":MemeCreation\" as MemeCreation MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MainWindow -\u003e LogicManager : execute(add text \"test\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "LogicManager -\u003e CreateParser : parseCommand(add text \"test\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate CreateParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "create TextAddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "CreateParser -\u003e TextAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate TextAddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "TextAddCommand --\u003e CreateParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate TextAddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "CreateParser --\u003e LogicManager : c"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate CreateParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "LogicManager -\u003e TextAddCommand : execute()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate TextAddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "TextAddCommand -\u003e MemeCreation : addText(\"test\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate MemeCreation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreation -\u003e MemeCreation : addText(\"test\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreation -\u003e TextAddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate MemeCreation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "TextAddCommand -\u003e LogicManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate TextAddCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "LogicManager -\u003e MainWindow : r"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MainWindow -\u003e MemeCreationPanel : updateImage()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "activate MemeCreationPanel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreationPanel -\u003e MemeCreation : render()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreation -\u003e MemeCreationPanel : image"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreationPanel -\u003e MemeCreationPanel : display()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeCreationPanel -\u003e MainWindow"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate MemeCreationPanel"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 59
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Class XYZPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "MainWindow *-down-\u003e HelpWindow"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MainWindow *-down-\u003e XYZPanel"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "XYZPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "XYZPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "note right of XYZPanel: XYZPanel \u003d \\"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "MemeGridPanel,\\n\\"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "TemplateGridPanel,\\n\\"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "StatsPanel, etc.\\n\\"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "Each panel represents the app\\n\\"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "content when in the corresponding tab."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "jonchan51": 1,
      "-": 46,
      "gary-lgy": 11
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State1 as \"__weme0:Weme\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State2 as \"__weme1:Weme\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State3 as \"__weme2:Weme\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State1 as \"__weme0:Weme\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State2 as \"__weme1:Weme\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State3 as \"__weme2:Weme\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "title After command \"edit 2 d/surprised pikachu\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State1 as \"__weme0:Weme\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State2 as \"__weme1:Weme\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State3 as \"__weme2:Weme\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 5,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State1 as \"__weme0:Weme\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State2 as \"__weme1:Weme\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State3 as \"__weme2:Weme\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State1 as \"__weme0:Weme\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State2 as \"__weme1:Weme\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State3 as \"__weme2:Weme\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State1 as \"__weme0:Weme\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State2 as \"__weme1:Weme\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class State3 as \"__weme2:Weme\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "note right on link: State weme2 deleted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "jonchan51": 5,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "scale 1.5"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":WemeParser\" as WemeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "participant \":VersionedWeme\" as VersionedWeme MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "LogicManager -\u003e WemeParser : parseCommand(undo)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate WemeParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "WemeParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "UndoCommand --\u003e WemeParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "WemeParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate WemeParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "UndoCommand -\u003e Model : undoWeme()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model -\u003e VersionedWeme : undo()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "activate VersionedWeme"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "VersionedWeme -\u003e VersionedWeme :resetData(ReadOnlyWeme)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "VersionedWeme --\u003e Model : feedback"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deactivate VersionedWeme"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Model --\u003e UndoCommand : feedback"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 16,
      "-": 38
    }
  },
  {
    "path": "docs/team/LivingOnEdge.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d Bill Chee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d PROJECT: ɯeme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "ɯeme is a meme manager app for those who *prefer to use a desktop app for managing memes*. More importantly, ɯeme is optimized for those who *prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). Users can view, tag, search, import and export a collection of meme. They can also create their own memes from meme templates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "cutieprobe": 3
    }
  },
  {
    "path": "docs/team/cutieprobe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d Liu Zimu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d PROJECT: ɯeme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "ɯeme is a meme manager app for those who *prefer to use a desktop app for managing memes*. More importantly, ɯeme is optimized for those who *prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). Users can view, tag, search, import and export a collection of meme. They can also create their own memes from meme templates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "cutieprobe": 3
    }
  },
  {
    "path": "docs/team/gary-lgy.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d Liu Guangyuan- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d PROJECT: ɯeme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "ɯeme is a meme manager app for those who *prefer to use a desktop app for managing memes*. More importantly, ɯeme is optimized for those who *prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). Users can view, tag, search, import and export a collection of meme. They can also create their own memes from meme templates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "cutieprobe": 3
    }
  },
  {
    "path": "docs/team/jonchan51.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d Jonathan Chan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d PROJECT: ɯeme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "ɯeme is a meme manager app for those who *prefer to use a desktop app for managing memes*. More importantly, ɯeme is optimized for those who *prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). Users can view, tag, search, import and export a collection of meme. They can also create their own memes from meme templates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "cutieprobe": 3
    }
  },
  {
    "path": "docs/team/moziliar.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d Mo Zongran - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "\u003d\u003d PROJECT: ɯeme"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "ɯeme is a meme manager app for those who *prefer to use a desktop app for managing memes*. More importantly, ɯeme is optimized for those who *prefer to work with a Command Line Interface (CLI)* while still having the benefits of a Graphical User Interface (GUI). Users can view, tag, search, import and export a collection of meme. They can also create their own memes from meme templates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "cutieprobe": 3
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.weme.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "Create a new `Remark` in `seedu.weme.model.meme`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.weme.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 6,
      "-": 419
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.weme.model.meme.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 116
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "`seedu.weme.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/weme/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/weme/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/weme/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.storage.JsonWemeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.storage.WemeStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Weme ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        WemeStorage wemeStorage \u003d new JsonWemeStorage(userPrefs.getDataFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        storage \u003d new StorageManager(wemeStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Weme and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The data from the sample Weme will be used instead if {@code storage}\u0027s Weme is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * or an empty Weme will be used instead if errors occur when reading {@code storage}\u0027s Weme."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Optional\u003cReadOnlyWeme\u003e wemeOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ReadOnlyWeme initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            wemeOptional \u003d storage.readWeme();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (!wemeOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Weme\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            initialData \u003d wemeOptional.orElseGet(() -\u003e SampleDataUtil.getSampleWeme(userPrefs));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            logger.warning(\"Data file not in the correct format. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    + \"Will be starting with an empty Weme\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            initialData \u003d new Weme();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            logger.warning(\"Problem while reading from the file. \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    + \"Will be starting with an empty Weme\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            initialData \u003d new Weme();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Weme\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        logger.fine(\"Loaded preferences: \" + initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        logger.info(\"Starting Weme \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Weme ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 6,
      "jonchan51": 36,
      "-": 140,
      "gary-lgy": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String LOG_FILE \u003d \"weme.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_INVALID_MEME_DISPLAYED_INDEX \u003d \"The meme index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX \u003d \"The template index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_INVALID_MEME_TEXT_DISPLAYED_INDEX \u003d \"The meme text index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_MEMES_LISTED_OVERVIEW \u003d \"%1$d memes listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 10,
      "gary-lgy": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.DirectoryPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_READ_FILE_FAILURE \u003d \"Error encountered while reading the file %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_COPY_FAILURE_SOURCE_DOES_NOT_EXIST \u003d \"Copy failed: source file does not exist\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_COPY_FAILURE_INVALID_DIRECTORY \u003d \"Copy failed: Invalid Directory Given\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_COPY_FAILURE_INTERNAL_ERROR \u003d \"Copy failed: Internal Error Encountered\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final int INITIAL_FILE_LABEL \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Copies a list of files given by their path to a given directory."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Files are named in the following format: number.extension, where"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * number starts from 1 and increments. e.g. 1.jpg, 2.jpg ..."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param pathList list of paths containing files."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param folderPath directory path to copy to."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws IOException error encountered while copying."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static void copyFiles(List\u003cPath\u003e pathList, Path folderPath) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            int fileLabel \u003d INITIAL_FILE_LABEL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            for (Path path : pathList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                String newFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    newFilePath \u003d buildFilePath(folderPath, String.valueOf(fileLabel), path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    fileLabel \u003d incrementFileLabel(fileLabel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                } while (isFileExists(Paths.get(newFilePath)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                if (isValidPath(newFilePath)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    copy(path, Paths.get(newFilePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    throw new IOException(MESSAGE_COPY_FAILURE_INVALID_DIRECTORY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new IOException(MESSAGE_COPY_FAILURE_INTERNAL_ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns a list of valid Image files found in the given directory path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param directoryPath Path containing memes to load."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @return List of loadable paths."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static List\u003cPath\u003e loadImagePath(DirectoryPath directoryPath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cPath\u003e imageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        recursiveLoad(imageList, directoryPath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return imageList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Recursively loads all valid image files in a given directory."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param imageList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param directoryPath"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static void recursiveLoad(List\u003cPath\u003e imageList, DirectoryPath directoryPath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final File folder \u003d toFile(directoryPath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        for (final File fileEntry : folder.listFiles()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            if (fileEntry.isDirectory()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                recursiveLoad(imageList, new DirectoryPath(fileEntry.getPath())); // recursive call"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            } else if (isFileExists(fileEntry.toPath())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    \u0026\u0026 isValidImageExtension(fileEntry.toPath())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                imageList.add(Paths.get(fileEntry.getPath()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Builds a new file path in string representation based on the given parameters"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param newDirectoryPath New directory path of the file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param fileLabel The label of the file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param initialPath The initial path of the file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static String buildFilePath(Path newDirectoryPath, String fileLabel, Path initialPath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        StringBuilder newFilePath \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        newFilePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .append(newDirectoryPath)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .append(fileLabel)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .append(\".\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .append(getExtension(initialPath).orElse(\"\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return newFilePath.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static int incrementFileLabel(int fileLabel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return fileLabel + 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * and {@link Files#exists(Path)}, otherwise returns false."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static boolean isValidDirectoryPath(String path) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return Files.isDirectory(Paths.get(path));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws IOException if the file cannot be created."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static void createFileIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Creates a directory if it is missing."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws IOException if the directory cannot be created."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static void createDirectoryIfMissing(Path directoryPath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!isFileExists(directoryPath)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            Files.createDirectories(directoryPath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Gets the canonical path of the folder where the application is."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static Path getApplicationFolderPath(String folderName) throws IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String canonicalPath \u003d new File(\".\").getCanonicalPath();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Path folderDirectoryPath \u003d Paths.get(canonicalPath, folderName);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        createDirectoryIfMissing(folderDirectoryPath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return folderDirectoryPath;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a randomly generated UUID String"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static String generateUuidString() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Copies the file from a directory to another directory."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param from the source"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param to   the destination"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws IOException if the source file does not exist."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static void copy(Path from, Path to) throws IOException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (isFileExists(from)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            createParentDirsOfFile(to);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Files.copy(from, to);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IOException(MESSAGE_COPY_FAILURE_SOURCE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Copies the file from a given InputStream to a file path."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param from the source"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param to   the destination"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws IOException if the copy failed"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static void copy(InputStream from, Path to) throws IOException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        createParentDirsOfFile(to);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Files.copy(from, to);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static File toFile(DirectoryPath directoryPath) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new File(directoryPath.toString());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Checks if the given filePath represents a valid image file."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param filePath Given file path."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @return True if the file is a valid image file path."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws IOException Unexpected error encountered from probeContentType()."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static boolean isValidImageExtension(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return !(new Image(filePath.toUri().toURL().toString()).isError());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Gets the extension of {@code Path}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param path the {@code Path} to extract the extension from"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the extension if present, or {@code Optional#empty()} if there is none"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static Optional\u003cString\u003e getExtension(Path path) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String pathString \u003d path.toString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (pathString.contains(\".\")) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.of(pathString.substring(pathString.lastIndexOf(\".\") + 1));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Gets the filename of a path represented by a string."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param pathString the String to extract the file name from"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return the filename"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static String getFileName(String pathString) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return Paths.get(pathString).getFileName().toString();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 145,
      "jonchan51": 27,
      "-": 78,
      "gary-lgy": 38
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/weme/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Converts a byte array into a hex string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param byteArray the byte array to convert"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the converted hex string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static String byteArrayToHex(byte[] byteArray) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(byteArray.length * 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (byte b : byteArray) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            sb.append(String.format(\"%02x\", b));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return sb.toString().toUpperCase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 66,
      "gary-lgy": 13
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Prompt the command and return the command prompt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param commandText The command as entered by the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return the command prompt"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws PromptException If and error occurs during prompting."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    CommandPrompt prompt(String commandText) throws PromptException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns weme."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @see seedu.weme.model.Model#getWeme()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    ReadOnlyWeme getWeme();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of memes */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    ObservableList\u003cMeme\u003e getFilteredMemeList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of imported memes */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableList\u003cMeme\u003e getFilteredImportList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /** Returns an unmodifiable view of the filtered staged list of memes */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableList\u003cMeme\u003e getFilteredStagedMemeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of templates */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    ObservableList\u003cTemplate\u003e getFilteredTemplateList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /** Returns an unmodifiable view of the user preferences of Weme */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableMap\u003cString, String\u003e getObservableUserPreferences();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the current context."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    ObservableValue\u003cModelContext\u003e getContext();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the context."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param context the context to switch to"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void setContext(ModelContext context);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the current meme creation session."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the current meme creation session."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    MemeCreation getMemeCreation();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the user prefs\u0027 Weme file path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Path getWemeFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns an unmodifiable view of like data."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Handles any logic that needs to be done before exiting Weme."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void cleanUp();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 9,
      "moziliar": 7,
      "jonchan51": 18,
      "-": 36,
      "gary-lgy": 26,
      "cutieprobe": 11
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.WemeParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.WemePrompter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.PrompterUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ModelContext currentContext \u003d model.getContext().getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        WemeParser wemeParser \u003d ParserUtil.forContext(currentContext);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Command command \u003d wemeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            storage.saveWeme(model.getWeme());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setContext(ModelContext context) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.setContext(context);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public ObservableValue\u003cModelContext\u003e getContext() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return model.getContext();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeCreation getMemeCreation() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return model.getMemeCreation();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(String commandText) throws PromptException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ModelContext currentContext \u003d model.getContext().getValue();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        WemePrompter wemePrompter \u003d PrompterUtil.forContext(currentContext);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        CommandPrompt commandPrompt \u003d wemePrompter.promptCommand(model, commandText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return commandPrompt;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public ReadOnlyWeme getWeme() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return model.getWeme();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public ObservableList\u003cMeme\u003e getFilteredMemeList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return model.getFilteredMemeList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableList\u003cMeme\u003e getFilteredStagedMemeList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return model.getFilteredStagedMemeList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableList\u003cMeme\u003e getFilteredImportList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return model.getFilteredImportList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public ObservableList\u003cTemplate\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Path getWemeFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return model.getDataFilePath();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableMap\u003cString, String\u003e getObservableUserPreferences() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return model.getObservableUserPreferences();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return model.getObservableLikeData();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        new Thread(() -\u003e model.cleanMemeStorage()).start();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        new Thread(() -\u003e model.cleanTemplateStorage()).start();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 14,
      "moziliar": 7,
      "jonchan51": 27,
      "-": 56,
      "gary-lgy": 25,
      "cutieprobe": 15
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/createcommand/AbortCreationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.commands.createcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Aborts the current meme creation session."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class AbortCreationCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"abort\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Meme creation aborted.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": abort current meme creation session and return to templates tab.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public AbortCreationCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.abortMemeCreation();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.setContext(ModelContext.CONTEXT_TEMPLATES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        CommandResult result \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 31,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/createcommand/CreateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.commands.createcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.util.ImageUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Finishes meme creation and generates a meme."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class CreateCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"A new meme has been created and added to the collection: %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": generate a meme and add it to the collection.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String MESSAGE_IO_ERROR \u003d \"An error occurred while writing the generated meme image to disk\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CreateCommand(Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(description, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeCreation memeCreation \u003d model.getMemeCreation();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ReadOnlyUserPrefs userPrefs \u003d model.getUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Path newPath \u003d ImageUtil.getNewImagePath(userPrefs.getMemeImagePath(), \"jpg\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            memeCreation.generate(newPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(MESSAGE_IO_ERROR, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Meme newMeme \u003d new Meme(new ImagePath(newPath.toString()), description, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.addMeme(newMeme);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.setContext(ModelContext.CONTEXT_TEMPLATES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_SUCCESS, newMeme.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 61,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/createcommand/TextAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.commands.createcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_SIZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_STYLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_X_COORDINATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_Y_COORDINATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Adds a piece of text to the current template."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TextAddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": adds text to the current template at the specified coordinates.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"TEXT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_X_COORDINATE + \"X_COORDINATE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_Y_COORDINATE + \"Y_COORDINATE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_COLOR + \"COLOR] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_SIZE + \"SIZE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_STYLE + \"STYLE]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"CS students be like \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_X_COORDINATE + \"0.2 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_Y_COORDINATE + \"0.3 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_COLOR + \"cyan \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_STYLE + \"bold \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_SIZE + \"3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New text added: %s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_TEXT_EXCEEDS_IMAGE_BOUNDARY \u003d \"Error: Text would exceed image boundary\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final MemeText text;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Creates an TextAddCommand to add {@code MemeText} to the meme being created.."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TextAddCommand(MemeText text) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeCreation session \u003d model.getMemeCreation();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            session.addText(text);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            model.addMemeTextToRecords(text);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(MESSAGE_TEXT_EXCEEDS_IMAGE_BOUNDARY, e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        CommandResult result \u003d new CommandResult("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                String.format(MESSAGE_SUCCESS, text.toString()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                || (other instanceof TextAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 text.equals(((TextAddCommand) other).text));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 76,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/createcommand/TextDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.commands.createcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Deletes a meme text identified using it\u0027s index from the text list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TextDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \": Deletes the meme text identified by the index number in the displayed list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_DELETE_MEME_TEXT_SUCCESS \u003d \"Deleted text: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TextDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeCreation session \u003d model.getMemeCreation();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cMemeText\u003e memeTextList \u003d session.getMemeTextList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d memeTextList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_TEXT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeText textToDelete \u003d memeTextList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        session.remove(textToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_DELETE_MEME_TEXT_SUCCESS, textToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                || (other instanceof TextDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((TextDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 61
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/createcommand/TextEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.commands.createcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_SIZE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_STYLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_X_COORDINATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_Y_COORDINATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Coordinates;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextColor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextSize;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextStyle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Edits the details of an existing meme in Weme."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TextEditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the meme text identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"by the index number. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_TEXT + \"TEXT] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_X_COORDINATE + \"X_COORDINATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_Y_COORDINATE + \"Y_COORDINATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_COLOR + \"COLOR] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_SIZE + \"SIZE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"[\" + PREFIX_STYLE + \"STYLE]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"t/When you wake up at 3am \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"x/0.3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_EDIT_MEME_TEXT_SUCCESS \u003d \"Edited text %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final EditMemeTextDescriptor editMemeTextDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param index                  of the text in the list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param editMemeTextDescriptor details to edit the text with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TextEditCommand(Index index, EditMemeTextDescriptor editMemeTextDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(index, editMemeTextDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.editMemeTextDescriptor \u003d new EditMemeTextDescriptor(editMemeTextDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Creates and returns a {@code Memetext} with the details of {@code textToEdit}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * edited with {@code editTextDescriptor}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static MemeText createEditedMemeText(MemeText textToEdit, EditMemeTextDescriptor editTextDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(textToEdit, editTextDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String text \u003d editTextDescriptor.getText().orElse(textToEdit.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        float x \u003d editTextDescriptor.getX().orElse(textToEdit.getX());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        float y \u003d editTextDescriptor.getY().orElse(textToEdit.getY());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(x, y);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeTextColor color \u003d editTextDescriptor.getColor().orElse(textToEdit.getMemeTextColor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeTextStyle style \u003d editTextDescriptor.getStyle().orElse(textToEdit.getMemeTextStyle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeTextSize size \u003d editTextDescriptor.getSize().orElse(textToEdit.getMemeTextSize());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new MemeText(text, coordinates, color, style, size);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeCreation session \u003d model.getMemeCreation();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cMemeText\u003e textList \u003d session.getMemeTextList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d textList.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_TEXT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeText textToEdit \u003d textList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeText editedText \u003d createEditedMemeText(textToEdit, editMemeTextDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            session.setText(textToEdit, editedText);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        CommandResult result \u003d new CommandResult("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                String.format(MESSAGE_EDIT_MEME_TEXT_SUCCESS, editedText.toString()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof TextEditCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TextEditCommand e \u003d (TextEditCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 editMemeTextDescriptor.equals(e.editMemeTextDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Stores the details to edit the meme text with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * corresponding field value of the meme text."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static class EditMemeTextDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private String text;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private Float x;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private Float y;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private MemeTextColor color;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private MemeTextStyle style;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private MemeTextSize size;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public EditMemeTextDescriptor() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public EditMemeTextDescriptor(EditMemeTextDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            setText(toCopy.text);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            setX(toCopy.x);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            setY(toCopy.y);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            setColor(toCopy.color);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            setStyle(toCopy.style);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            setSize(toCopy.size);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return CollectionUtil.isAnyNonNull(text, x, y, color, style, size);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Optional\u003cString\u003e getText() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.ofNullable(text);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setText(String text) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.text \u003d text;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Optional\u003cFloat\u003e getX() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.ofNullable(x);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setX(Float x) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.x \u003d x;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Optional\u003cFloat\u003e getY() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.ofNullable(y);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setY(Float y) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.y \u003d y;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Optional\u003cMemeTextColor\u003e getColor() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.ofNullable(color);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setColor(MemeTextColor color) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.color \u003d color;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Optional\u003cMemeTextStyle\u003e getStyle() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.ofNullable(style);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setStyle(MemeTextStyle style) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.style \u003d style;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Optional\u003cMemeTextSize\u003e getSize() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.ofNullable(size);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setSize(MemeTextSize size) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.size \u003d size;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            if (!(other instanceof EditMemeTextDescriptor)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            EditMemeTextDescriptor e \u003d (EditMemeTextDescriptor) other;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return text.equals(e.text)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    \u0026\u0026 x.equals(e.x)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    \u0026\u0026 y.equals(e.y)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    \u0026\u0026 color.equals(e.color)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    \u0026\u0026 style.equals(e.style)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    \u0026\u0026 size.equals(e.size);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 236
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/exportcommand/ExportClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.commands.exportcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Clears all the memes in Weme\u0027s export staging area."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ExportClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Export staging area has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": clear all memes in the export staging area.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        model.clearExportList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        CommandResult result \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 27,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/exportcommand/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.exportcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.isNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.nonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.DirectoryPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Exports memes from staging area to a specified path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String EXPORT_FOLDER_NAME \u003d \"export\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": exports memes in the export context to a given directory.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + PREFIX_FILEPATH + \"PATH \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + PREFIX_FILEPATH + \"C:/Users/username/Downloads/meme_folder/ \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Memes exported successfully!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_INVALID_DEFAULT_EXPORT_PATH \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \"Invalid Default Export Path set. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    + \"Configure it in preferences.json and restart the application\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final DirectoryPath exportPath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private boolean isApplicationPath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Creates an ExportCommand to export the memes from the specified {@code Path}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ExportCommand(DirectoryPath path) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportPath \u003d path;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Creates an ExportCommand to export memes into the default directory path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ExportCommand(boolean isApplicationPath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportPath \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.isApplicationPath \u003d isApplicationPath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            List\u003cPath\u003e pathList \u003d model.getExportPathList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            FileUtil.copyFiles(pathList, getExportPath(model));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            model.clearExportList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(ioe.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Path getExportPath(Model model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (isNull(exportPath)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            assert nonNull(isApplicationPath) : \"isApplicationExportPath is null\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            if (isApplicationPath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                return FileUtil.getApplicationFolderPath(EXPORT_FOLDER_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                Path defaultExportPath \u003d model.getDefaultExportPath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                if (FileUtil.isValidDirectoryPath(defaultExportPath.toString())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    return defaultExportPath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_DEFAULT_EXPORT_PATH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return exportPath.toPath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 exportPath.equals(((ExportCommand) other).exportPath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 90,
      "cutieprobe": 8
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/exportcommand/UnstageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.exportcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Unstage Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class UnstageCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unstage\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": unstages a meme.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Meme unstaged: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Creates an UnstageCommand to add the specified {@code Meme}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public UnstageCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cMeme\u003e stagedMemeList \u003d model.getFilteredStagedMemeList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d stagedMemeList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Meme memeToUnstage \u003d stagedMemeList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        model.unstageMeme(memeToUnstage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, memeToUnstage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof UnstageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnstageCommand) other).targetIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 55,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/generalcommand/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": exit Weme\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Weme as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 16,
      "cutieprobe": 5,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/generalcommand/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": shows program usage instructions.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION + \"\\nExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 17,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/generalcommand/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Reverts the {@code model}\u0027s Weme to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redid the following command:\\n%s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No commands to redo.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": redo the previous undone command.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!model.canRedoWeme()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String feedback \u003d model.redoWeme();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, feedback));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 28,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/generalcommand/TabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Switches tab to change parser and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TabCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to %s context.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": switch to another context.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private ModelContext context;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates TabCommand to switch to specified context."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param context Context to switch to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public TabCommand(ModelContext context) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.setContext(context);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, context.getContextName()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof TabCommand)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return context.equals(((TabCommand) other).context);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 31,
      "cutieprobe": 5,
      "gary-lgy": 14
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/generalcommand/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Reverts the {@code model}\u0027s Weme to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undid the following command:\\n%s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No commands to undo.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": undo the previous command.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!model.canUndoWeme()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String feedback \u003d model.undoWeme();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, feedback));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 28,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/importcommand/ImportClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.commands.importcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Clears all the memes in Weme\u0027s import staging area."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Import staging area has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": clear all memes in the import staging area.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        model.clearImportList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        CommandResult result \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 27,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/importcommand/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.importcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Imports memes from the import context into application storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": imports memes from import staging area into Weme.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Memes imported successfully into Weme.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            model.importMemes();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            model.clearImportList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(e.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof ImportCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 39,
      "jonchan51": 2,
      "cutieprobe": 7
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/importcommand/ImportDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.commands.importcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Deletes a meme identified using it\u0027s displayed index from the import staging area."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": deletes the meme identified by the index number used in the displayed import list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"\\nParameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_DELETE_MEME_SUCCESS \u003d \"Deleted Meme: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImportDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredImportList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Meme memeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        model.deleteImportedMeme(memeToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_DELETE_MEME_SUCCESS, memeToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof ImportDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ImportDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 55,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/importcommand/ImportEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.commands.importcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Edits the details of an imported meme in the import staging area."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportEditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": edits the details of the meme identified by the index number used in the displayed meme list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \" Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"d/A funny meme \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"t/funny\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_EDIT_MEME_SUCCESS \u003d \"Edited Meme: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEME \u003d \"This meme already exists in import staging area.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final MemeEditCommand.EditMemeDescriptor editMemeDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param index of the meme in the filtered meme list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param editMemeDescriptor details to edit the meme with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImportEditCommand(Index index, MemeEditCommand.EditMemeDescriptor editMemeDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(editMemeDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.editMemeDescriptor \u003d new MemeEditCommand.EditMemeDescriptor(editMemeDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredImportList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Meme memeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Meme editedMeme \u003d createEditedMeme(memeToEdit, editMemeDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!memeToEdit.isSameMeme(editedMeme) \u0026\u0026 model.hasMeme(editedMeme)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        model.setImportedMeme(memeToEdit, editedMeme);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_EDIT_MEME_SUCCESS, editedMeme));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Creates and returns a {@code Meme} with the details of {@code memeToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * edited with {@code editMemeDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static Meme createEditedMeme(Meme memeToEdit, MemeEditCommand.EditMemeDescriptor editMemeDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assert memeToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImagePath updatedPath \u003d editMemeDescriptor.getFilePath().orElse(memeToEdit.getImagePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Description updatedDescription \u003d editMemeDescriptor.getDescription().orElse(memeToEdit.getDescription());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editMemeDescriptor.getTags().orElse(memeToEdit.getTags());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new Meme(updatedPath, updatedDescription, updatedTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!(other instanceof ImportEditCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportEditCommand e \u003d (ImportEditCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 editMemeDescriptor.equals(e.editMemeDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 109,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/importcommand/LoadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.importcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.DirectoryPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Loads memes from a directory to the import context."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class LoadCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"load\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": loads memes to the import staging area from a given directory. \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + PREFIX_FILEPATH + \"PATH \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + PREFIX_FILEPATH + \"C:/Users/username/Downloads/ \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Memes loaded successfully to the import staging area.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_LOAD_FAILURE \u003d \"Invalid directory path given.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final DirectoryPath importDirectoryPath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Creates a LoadCommand to import the memes from the specified {@code Path}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public LoadCommand(DirectoryPath path) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importDirectoryPath \u003d path;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            List\u003cPath\u003e pathList \u003d FileUtil.loadImagePath(importDirectoryPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            model.loadMemes(pathList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(MESSAGE_LOAD_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof LoadCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 importDirectoryPath.equals(((LoadCommand) other).importDirectoryPath));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 57,
      "cutieprobe": 8
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.util.ImageUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Adds a meme to Weme."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeAddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": adds a meme to Weme.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + PREFIX_FILEPATH + \"PATH \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + PREFIX_FILEPATH + \"C:\\\\Users\\\\username\\\\Downloads\\\\funny_meme.jpg \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Popular Meme among SoC Students  \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + PREFIX_TAG + \"funny\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meme added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEME \u003d \"This meme already exists in Weme\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_COPY_FAILURE \u003d \"Error encountered while copying the meme to data folder\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Meme toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates an MemeAddCommand to add the specified {@code Meme}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeAddCommand(Meme meme) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(meme);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        toAdd \u003d meme;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // Copy the meme to internal data directory"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Meme copiedMeme;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            copiedMeme \u003d ImageUtil.copyMeme(toAdd, model.getMemeImagePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            model.addMemeToRecords(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(MESSAGE_COPY_FAILURE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (model.hasMeme(copiedMeme)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.addMeme(copiedMeme);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_SUCCESS, copiedMeme));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                || (other instanceof MemeAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 toAdd.equals(((MemeAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 2,
      "moziliar": 3,
      "jonchan51": 19,
      "-": 32,
      "cutieprobe": 9,
      "gary-lgy": 15
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_UNARCHIVED_MEMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Archives a meme in the display window."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeArchiveCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": archive a meme by index.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \" Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_MEME_SUCCESS \u003d \"Archived Meme: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_ALREADY_ARCHIVED \u003d \"This meme is already archived!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param index of the meme in the filtered meme list to archive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeArchiveCommand(Index index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredMemeList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeToArchive \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (memeToArchive.isArchived()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ARCHIVED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme archivedMeme \u003d createArchivedMeme(memeToArchive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.setMeme(memeToArchive, archivedMeme);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_ARCHIVE_MEME_SUCCESS, memeToArchive));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredMemeList(PREDICATE_SHOW_ALL_UNARCHIVED_MEMES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates an archived Meme using the input unarchived Meme."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Meme createArchivedMeme(Meme meme) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assert meme !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ImagePath imagePath \u003d meme.getImagePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Description description \u003d meme.getDescription();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Set\u003cTag\u003e tags \u003d meme.getTags();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new Meme(imagePath, description, tags, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof MemeArchiveCommand)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeArchiveCommand e \u003d (MemeArchiveCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 98,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeArchivesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_ARCHIVED_MEMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Lists all archived memes in Weme to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeArchivesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archives\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived memes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": list all archived memes.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredMemeList(PREDICATE_SHOW_ALL_ARCHIVED_MEMES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 26,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Clears all the memes in Weme."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Memes have been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": delete all memes in Weme.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.clearMemes();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "jonchan51": 9,
      "-": 15,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Deletes a meme identified using it\u0027s displayed index from Weme."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": deletes the meme identified by the index number used in the displayed meme list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"\\nParameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_DELETE_MEME_SUCCESS \u003d \"Deleted Meme: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredMemeList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.deleteMeme(memeToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        model.clearMemeStats(memeToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_DELETE_MEME_SUCCESS, memeToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                || (other instanceof MemeDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MemeDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "jonchan51": 20,
      "-": 33,
      "cutieprobe": 8
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeDislikeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Likes a meme in the display window."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class MemeDislikeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"dislike\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": dislike a meme by index.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + \" Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String MESSAGE_DISLIKE_MEME_SUCCESS \u003d \"Disliked Meme: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String MESSAGE_NOT_LIKED \u003d \"Please specify the index of the meme that you dislike.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param index of the meme in the filtered meme list to like"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public MemeDislikeCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredMemeList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme memeToDislike \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        model.decrementMemeLikeCount(memeToDislike);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_DISLIKE_MEME_SUCCESS, memeToDislike));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!(other instanceof MemeDislikeCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        MemeDislikeCommand e \u003d (MemeDislikeCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 75,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Edits the details of an existing meme in Weme."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeEditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": edits the details of the meme identified by the index number used in the displayed meme list.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + \"d/A funny meme \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + \"t/funny\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_EDIT_MEME_SUCCESS \u003d \"Edited Meme: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEME \u003d \"This meme already exists in Weme.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final EditMemeDescriptor editMemeDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param index of the meme in the filtered meme list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param editMemeDescriptor details to edit the meme with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeEditCommand(Index index, EditMemeDescriptor editMemeDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(editMemeDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.editMemeDescriptor \u003d new EditMemeDescriptor(editMemeDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredMemeList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme editedMeme \u003d createEditedMeme(memeToEdit, editMemeDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!memeToEdit.isSameMeme(editedMeme) \u0026\u0026 model.hasMeme(editedMeme)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.setMeme(memeToEdit, editedMeme);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        model.addMemeToRecords(editedMeme);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_EDIT_MEME_SUCCESS, editedMeme));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates and returns a {@code Meme} with the details of {@code memeToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * edited with {@code editMemeDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static Meme createEditedMeme(Meme memeToEdit, EditMemeDescriptor editMemeDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assert memeToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImagePath updatedPath \u003d editMemeDescriptor.getFilePath().orElse(memeToEdit.getImagePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Description updatedDescription \u003d editMemeDescriptor.getDescription().orElse(memeToEdit.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editMemeDescriptor.getTags().orElse(memeToEdit.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        boolean isArchived \u003d memeToEdit.isArchived();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new Meme(updatedPath, updatedDescription, updatedTags, isArchived);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof MemeEditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand e \u003d (MemeEditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 editMemeDescriptor.equals(e.editMemeDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Stores the details to edit the meme with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * corresponding field value of the meme."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static class EditMemeDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        private ImagePath filePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public EditMemeDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public EditMemeDescriptor(EditMemeDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            setFilePath(toCopy.filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return CollectionUtil.isAnyNonNull(filePath, description, tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public void setFilePath(ImagePath filePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public Optional\u003cImagePath\u003e getFilePath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return Optional.ofNullable(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (!(other instanceof EditMemeDescriptor)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            EditMemeDescriptor e \u003d (EditMemeDescriptor) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return getFilePath().equals(e.getFilePath())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 11,
      "moziliar": 11,
      "jonchan51": 45,
      "-": 123,
      "cutieprobe": 10,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeFindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Finds and lists all memes in Weme whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeFindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": finds all memes with tags containing any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"\\nParameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeFindCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredMemeList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                String.format(Messages.MESSAGE_MEMES_LISTED_OVERVIEW, model.getFilteredMemeList().size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                || (other instanceof MemeFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 predicate.equals(((MemeFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 2,
      "jonchan51": 9,
      "-": 27,
      "cutieprobe": 8
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeLikeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Likes a meme in the display window."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class MemeLikeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"like\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": like a meme by index.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + \" Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String MESSAGE_LIKE_MEME_SUCCESS \u003d \"Liked Meme: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String MESSAGE_NOT_LIKED \u003d \"Please specify the index of the meme that you like.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param index of the meme in the filtered meme list to like"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public MemeLikeCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredMemeList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme memeToLike \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        model.incrementMemeLikeCount(memeToLike);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_LIKE_MEME_SUCCESS, memeToLike));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!(other instanceof MemeLikeCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        MemeLikeCommand e \u003d (MemeLikeCommand) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 67,
      "jonchan51": 5,
      "cutieprobe": 6
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_UNARCHIVED_MEMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Lists all memes in Weme to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all memes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": list all memes.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredMemeList(PREDICATE_SHOW_ALL_UNARCHIVED_MEMES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 6,
      "-": 17,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeStageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Stage Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class MemeStageCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stage\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": stages a meme.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \" Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meme staged: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_MEME_ALREADY_STAGED \u003d \"Meme is already in staging area\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Creates an MemeStageCommand to add the specified {@code Meme} to the staging area."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public MemeStageCommand(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        targetIndex \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredMemeList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cMeme\u003e stageList \u003d model.getFilteredStagedMemeList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Meme memeToStage \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (stageList.contains(memeToStage)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new CommandException(MESSAGE_MEME_ALREADY_STAGED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        model.stageMeme(memeToStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, memeToStage));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof MemeStageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((MemeStageCommand) other).targetIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 64,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/memecommand/MemeUnarchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_ARCHIVED_MEMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Unarchives a meme in the display window."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeUnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": unarchive a meme by index.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \" Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_MEME_SUCCESS \u003d \"Unarchived Meme: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_ALREADY_UNARCHIVED \u003d \"This meme is already unarchived!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param index of the meme in the filtered meme list to unarchive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeUnarchiveCommand(Index index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cMeme\u003e lastShownList \u003d model.getFilteredMemeList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeToUnarchive \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!memeToUnarchive.isArchived()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_UNARCHIVED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme unarchivedMeme \u003d createUnarchivedMeme(memeToUnarchive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.setMeme(memeToUnarchive, unarchivedMeme);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_UNARCHIVE_MEME_SUCCESS, memeToUnarchive));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredMemeList(PREDICATE_SHOW_ALL_ARCHIVED_MEMES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates an unarchived Meme using the input archived Meme."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Meme createUnarchivedMeme(Meme meme) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assert meme !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ImagePath imagePath \u003d meme.getImagePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Description description \u003d meme.getDescription();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Set\u003cTag\u003e tags \u003d meme.getTags();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new Meme(imagePath, description, tags, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof MemeUnarchiveCommand)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeUnarchiveCommand e \u003d (MemeUnarchiveCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 98,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/templatecommand/TemplateAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.templatecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.util.ImageUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Adds a template to Weme."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": adds a template to Weme.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_FILEPATH + \"PATH\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_NAME + \"Drake Reaction \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_FILEPATH + \"C:\\\\Users\\\\username\\\\Downloads\\\\drake_template.jpg\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New template added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE \u003d \"A template with the same name already exists in Weme\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_COPY_FAILURE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \"Error encountered while copying the template image to data folder\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Template toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Creates an TemplateAddCommand to add the specified {@code Template}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateAddCommand(Template template) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(template);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        toAdd \u003d template;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // Copy the template image to internal data directory"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Template copiedTemplate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            copiedTemplate \u003d ImageUtil.copyTemplate(toAdd, model.getTemplateImagePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(MESSAGE_COPY_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (model.hasTemplate(copiedTemplate)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TEMPLATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.addTemplate(copiedTemplate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        model.addTemplateToRecords(copiedTemplate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_SUCCESS, copiedTemplate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                || (other instanceof TemplateAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 toAdd.equals(((TemplateAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "cutieprobe": 9,
      "gary-lgy": 65
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/templatecommand/TemplateArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands.templatecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_UNARCHIVED_TEMPLATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Archives a template in the display window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TemplateArchiveCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": archive a template by index.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \" Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_TEMPLATE_SUCCESS \u003d \"Archived Template: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_ALREADY_ARCHIVED \u003d \"This template is already archived!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param index of the template in the filtered template list to archive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public TemplateArchiveCommand(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cTemplate\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Template templateToArchive \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (templateToArchive.isArchived()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ARCHIVED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Template archivedTemplate \u003d createArchivedTemplate(templateToArchive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.setTemplate(templateToArchive, archivedTemplate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_ARCHIVE_TEMPLATE_SUCCESS, templateToArchive));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_UNARCHIVED_TEMPLATES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates an archived Template using the input unarchived Template."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Template createArchivedTemplate(Template template) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assert template !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Name name \u003d template.getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ImagePath imagePath \u003d template.getImagePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new Template(name, imagePath, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof TemplateArchiveCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        TemplateArchiveCommand e \u003d (TemplateArchiveCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 95,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/templatecommand/TemplateArchivesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands.templatecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_ARCHIVED_TEMPLATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Lists all archived memes in Weme to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TemplateArchivesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archives\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived templates\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": list all archived templates.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_ARCHIVED_TEMPLATES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 26,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/templatecommand/TemplateDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.templatecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Deletes a template identified using it\u0027s displayed index from Weme."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": deletes the template identified by the index number used in the displayed template list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"\\nParameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_DELETE_TEMPLATE_SUCCESS \u003d \"Deleted Template: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cTemplate\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Template templateToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.deleteTemplate(templateToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_DELETE_TEMPLATE_SUCCESS, templateToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || (other instanceof TemplateDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((TemplateDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "cutieprobe": 8,
      "gary-lgy": 49
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/templatecommand/TemplateEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.templatecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Edits the details of an existing template in Weme."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateEditCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": edits the details of the template identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"by the index number used in the displayed template list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \" Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 n/Drake\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_EDIT_TEMPLATE_SUCCESS \u003d \"Edited Template: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE \u003d \"A template with the same name already exists in Weme\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param index of the template in the filtered template list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param name the new name of the template"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateEditCommand(Index index, Name name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(index, name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cTemplate\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Template templateToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Template editedTemplate \u003d new Template(name, templateToEdit.getImagePath(), templateToEdit.isArchived());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!templateToEdit.isSameTemplate(editedTemplate) \u0026\u0026 model.hasTemplate(editedTemplate)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TEMPLATE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.setTemplate(templateToEdit, editedTemplate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        model.addTemplateToRecords(editedTemplate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_EDIT_TEMPLATE_SUCCESS, editedTemplate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof TemplateEditCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TemplateEditCommand e \u003d (TemplateEditCommand) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 name.equals(e.name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 5,
      "cutieprobe": 9,
      "gary-lgy": 78
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/templatecommand/TemplateUnarchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands.templatecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_ARCHIVED_TEMPLATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Likes a template in the display window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TemplateUnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD + \": unarchive a template by index.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \" Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_TEMPLATE_SUCCESS \u003d \"Unarchived Template: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_ALREADY_UNARCHIVED \u003d \"This template is already unarchived!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param index of the template in the filtered template list to unarchive"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public TemplateUnarchiveCommand(Index index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cTemplate\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Template templateToUnarchive \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!templateToUnarchive.isArchived()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_UNARCHIVED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Template unarchivedTemplate \u003d createUnarchivedTemplate(templateToUnarchive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.setTemplate(templateToUnarchive, unarchivedTemplate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_UNARCHIVE_TEMPLATE_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                templateToUnarchive));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredTemplateList(PREDICATE_SHOW_ALL_ARCHIVED_TEMPLATES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates an unarchived Template using the input archived Template."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Template createUnarchivedTemplate(Template template) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assert template !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Name name \u003d template.getName();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ImagePath imagePath \u003d template.getImagePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new Template(name, imagePath, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof TemplateUnarchiveCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        TemplateUnarchiveCommand e \u003d (TemplateUnarchiveCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 96,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/commands/templatecommand/TemplateUseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.commands.templatecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Chooses a template to be used for meme creation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateUseCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"use\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \": chooses a template and starts meme creation in the create tab.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d MESSAGE_DESCRIPTION"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            + \"\\nParameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_USE_TEMPLATE_SUCCESS \u003d \"Started creating meme with template: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_USE_TEMPLATE_FAILED_TO_START_SESSION \u003d \"Failed to start a meme\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            + \"creation session.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param index of the template in the filtered template list to use"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateUseCommand(Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cTemplate\u003e lastShownList \u003d model.getFilteredTemplateList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TEMPLATE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Template templateToUse \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            model.startMemeCreation(templateToUse);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new CommandException(MESSAGE_USE_TEMPLATE_FAILED_TO_START_SESSION, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.setContext(ModelContext.CONTEXT_CREATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        CommandResult result \u003d new CommandResult(String.format(MESSAGE_USE_TEMPLATE_SUCCESS, templateToUse));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        model.commitWeme(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof TemplateUseCommand)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TemplateUseCommand e \u003d (TemplateUseCommand) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 80,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/createcommandparser/CreateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.parser.commandparser.createcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.CreateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new CreateCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class CreateCommandParser implements Parser\u003cCreateCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns an CreateCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CreateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new CreateCommand(description, tagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 39
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/createcommandparser/TextAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.parser.commandparser.createcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_SIZE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_STYLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_X_COORDINATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_Y_COORDINATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.model.template.MemeTextColor.DEFAULT_MEME_TEXT_COLOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.model.template.MemeTextSize.DEFAULT_MEME_TEXT_SIZE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.model.template.MemeTextStyle.DEFAULT_MEME_TEXT_STYLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Coordinates;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextColor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextSize;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextStyle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new TextAddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TextAddCommandParser implements Parser\u003cTextAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TextAddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns an TextAddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TextAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                PREFIX_X_COORDINATE, PREFIX_Y_COORDINATE, PREFIX_COLOR, PREFIX_STYLE, PREFIX_SIZE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_X_COORDINATE, PREFIX_Y_COORDINATE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TextAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String text \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Coordinates coordinates \u003d ParserUtil.parseCoordinates("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            argMultimap.getValue(PREFIX_X_COORDINATE).get(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            argMultimap.getValue((PREFIX_Y_COORDINATE)).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeTextColor color;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLOR).isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            color \u003d DEFAULT_MEME_TEXT_COLOR;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            color \u003d ParserUtil.parseMemeTextColor(argMultimap.getValue(PREFIX_COLOR).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Set\u003cMemeTextStyle\u003e styles \u003d ParserUtil.parseMemeTextStyles(argMultimap.getAllValues(PREFIX_STYLE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (styles.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            styles.add(DEFAULT_MEME_TEXT_STYLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeTextSize size;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SIZE).isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            size \u003d DEFAULT_MEME_TEXT_SIZE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            size \u003d ParserUtil.parseMemeTextSize(argMultimap.getValue(PREFIX_SIZE).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new TextAddCommand(new MemeText(text, coordinates, color, styles, size));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 75
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/createcommandparser/TextDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.parser.commandparser.createcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new TextDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TextDeleteCommandParser implements Parser\u003cTextDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TextDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns a TextDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TextDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TextDeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TextDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 32
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/createcommandparser/TextEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.parser.commandparser.createcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_SIZE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_STYLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_X_COORDINATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_Y_COORDINATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextEditCommand.EditMemeTextDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextStyle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new TextEditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TextEditCommandParser implements Parser\u003cTextEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TextEditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns an TextEditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TextEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            PREFIX_TEXT, PREFIX_X_COORDINATE, PREFIX_Y_COORDINATE, PREFIX_COLOR, PREFIX_STYLE, PREFIX_SIZE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TextEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        EditMemeTextDescriptor editMemeDescriptor \u003d new EditMemeTextDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TEXT).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            editMemeDescriptor.setText(argMultimap.getValue(PREFIX_TEXT).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_X_COORDINATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            editMemeDescriptor.setX(ParserUtil.parseCoordinate(argMultimap.getValue(PREFIX_X_COORDINATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_Y_COORDINATE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            editMemeDescriptor.setY(ParserUtil.parseCoordinate(argMultimap.getValue(PREFIX_Y_COORDINATE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLOR).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            editMemeDescriptor.setColor(ParserUtil.parseMemeTextColor(argMultimap.getValue(PREFIX_COLOR).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SIZE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            editMemeDescriptor.setSize(ParserUtil.parseMemeTextSize(argMultimap.getValue(PREFIX_SIZE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STYLE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            editMemeDescriptor.setStyle("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                MemeTextStyle.combine(ParserUtil.parseMemeTextStyles(argMultimap.getAllValues(PREFIX_STYLE))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!editMemeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(TextEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new TextEditCommand(index, editMemeDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 74
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/exportcommandparser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.exportcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.ExportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.DirectoryPath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String DEFAULT_DIRECTORY \u003d \"[d]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        boolean isApplicationExportPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILEPATH).isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            isApplicationExportPath \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new ExportCommand(isApplicationExportPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String directoryPath \u003d argMultimap.getValue(PREFIX_FILEPATH).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ExportCommand command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        switch (directoryPath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case DEFAULT_DIRECTORY:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            isApplicationExportPath \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            command \u003d new ExportCommand(isApplicationExportPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            DirectoryPath path \u003d ParserUtil.parseDirectoryPath(directoryPath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            command \u003d new ExportCommand(path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 41,
      "cutieprobe": 8
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/exportcommandparser/UnstageCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.exportcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.UnstageCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses input arguments and creates a new UnstageCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class UnstageCommandParser implements Parser\u003cUnstageCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnstageCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * and returns a MemeUnstageCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public UnstageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new UnstageCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnstageCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 26,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/generalcommandparser/TabCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.generalcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.TabCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new TabCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TabCommandParser implements Parser\u003cTabCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TabCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns a TabCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws ParseException if the user input does not provide a valid context."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public TabCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new TabCommand(ParserUtil.parseTab(userInput));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 18,
      "cutieprobe": 4,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/importcommandparser/ImportDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.parser.commandparser.importcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses input arguments and creates a new ImportDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportDeleteCommandParser implements Parser\u003cImportDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * and returns a ImportDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImportDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new ImportDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 31
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/importcommandparser/ImportEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.parser.commandparser.importcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses input arguments and creates a new ImportEditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportEditCommandParser implements Parser\u003cImportEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportEditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * and returns an ImportEditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImportEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        MemeEditCommand.EditMemeDescriptor editMemeDescriptor \u003d new MemeEditCommand.EditMemeDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            editMemeDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editMemeDescriptor::setTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!editMemeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException(ImportEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new ImportEditCommand(index, editMemeDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 75
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/importcommandparser/LoadCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.importcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.LoadCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.DirectoryPath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses input arguments and creates a new LoadCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class LoadCommandParser implements Parser\u003cLoadCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_MISSING_PATH \u003d \"Please provide a directory path to load.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoadCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * and returns an LoadCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public LoadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FILEPATH).isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException(MESSAGE_MISSING_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        DirectoryPath path \u003d ParserUtil.parseDirectoryPath(argMultimap.getValue(PREFIX_FILEPATH).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new LoadCommand(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 31,
      "cutieprobe": 7
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new MemeAddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeAddCommandParser implements Parser\u003cMemeAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns an MemeAddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILEPATH, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_FILEPATH)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        ImagePath url \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILEPATH).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme meme \u003d new Meme(url, description, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new MemeAddCommand(meme);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 2,
      "moziliar": 3,
      "jonchan51": 11,
      "-": 22,
      "cutieprobe": 9,
      "gary-lgy": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeArchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new MemeArchiveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeArchiveCommandParser implements Parser\u003cMemeArchiveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeArchiveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns a MemeArchiveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeArchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 31
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new MemeDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeDeleteCommandParser implements Parser\u003cMemeDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns a MemeDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 10,
      "-": 17,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeDislikeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDislikeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Parses input arguments and creates a new MemeLikeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class MemeDislikeCommandParser implements Parser\u003cMemeDislikeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeDislikeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * and returns a MemeDislikeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public MemeDislikeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return new MemeDislikeCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeDislikeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 31
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand.EditMemeDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new MemeEditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeEditCommandParser implements Parser\u003cMemeEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeEditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns an MemeEditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        EditMemeDescriptor editMemeDescriptor \u003d new EditMemeDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            editMemeDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editMemeDescriptor::setTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!editMemeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException(MemeEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new MemeEditCommand(index, editMemeDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 3,
      "moziliar": 1,
      "jonchan51": 15,
      "-": 47,
      "cutieprobe": 9
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeFindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new MemeFindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeFindCommandParser implements Parser\u003cMemeFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeFindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns a MemeFindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return new MemeFindCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 3,
      "jonchan51": 8,
      "-": 20,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeLikeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeLikeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Parses input arguments and creates a new MemeLikeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class MemeLikeCommandParser implements Parser\u003cMemeLikeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeLikeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * and returns a MemeLikeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public MemeLikeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return new MemeLikeCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeLikeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 27,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeStageCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeStageCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses input arguments and creates a new MemeStageCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class MemeStageCommandParser implements Parser\u003cMemeStageCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeStageCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * and returns a MemeStageCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public MemeStageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new MemeStageCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeStageCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 27,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeUnarchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeUnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new MemeUnarchiveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeUnarchiveCommandParser implements Parser\u003cMemeUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MemeUnarchiveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns a MemeUnarchiveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeUnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeUnarchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeUnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 31
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/templatecommandparser/TemplateAddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.templatecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new TemplateAddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateAddCommandParser implements Parser\u003cTemplateAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TemplateAddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns an TemplateAddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_FILEPATH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TemplateAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ImagePath imagePath \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILEPATH).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Template template \u003d new Template(name, imagePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new TemplateAddCommand(template);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 8,
      "gary-lgy": 36
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/templatecommandparser/TemplateArchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser.commandparser.templatecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new TemplateArchiveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TemplateArchiveCommandParser implements Parser\u003cTemplateArchiveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TemplateArchiveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns a TemplateArchiveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public TemplateArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new TemplateArchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TemplateArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 31
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/templatecommandparser/TemplateDeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.templatecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new TemplateDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateDeleteCommandParser implements Parser\u003cTemplateDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TemplateDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns a TemplateDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TemplateDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TemplateDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 4,
      "gary-lgy": 27
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/templatecommandparser/TemplateEditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.templatecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateEditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new TemplateEditCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateEditCommandParser implements Parser\u003cTemplateEditCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TemplateEditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns an TemplateEditCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                TemplateEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!argMultimap.arePrefixesPresent(PREFIX_NAME) || argMultimap.getValue(PREFIX_NAME).get().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                TemplateEditCommand.MESSAGE_NOT_EDITED));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Name editedName \u003d new Name(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new TemplateEditCommand(index, editedName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 7,
      "gary-lgy": 41
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/templatecommandparser/TemplateUnarchiveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser.commandparser.templatecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses input arguments and creates a new TemplateUnarchiveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TemplateUnarchiveCommandParser implements Parser\u003cTemplateUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TemplateUnarchiveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and returns a TemplateUnarchiveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public TemplateUnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new TemplateUnarchiveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TemplateUnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 31
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/commandparser/templatecommandparser/TemplateUseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.parser.commandparser.templatecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses input arguments and creates a new TemplateUseCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateUseCommandParser implements Parser\u003cTemplateUseCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TemplateUseCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * and returns an TemplateUseCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateUseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TemplateUseCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                TemplateUseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 35
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/contextparser/CreateParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.logic.parser.contextparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.AbortCreationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.CreateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.commandparser.createcommandparser.CreateCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.commandparser.createcommandparser.TextAddCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.commandparser.createcommandparser.TextDeleteCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.commandparser.createcommandparser.TextEditCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses user input in the create context."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class CreateParser extends WemeParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case TextAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TextAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case AbortCreationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new AbortCreationCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new CreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case TextEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TextEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case TextDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TextDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return super.parseCommand(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 63
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/contextparser/ExportParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.contextparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.ExportClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.UnstageCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.exportcommandparser.ExportCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.exportcommandparser.UnstageCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses user input in the export context."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ExportParser extends WemeParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case UnstageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new UnstageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case ExportClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new ExportClearCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return super.parseCommand(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 45,
      "cutieprobe": 7
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/contextparser/ImportParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.contextparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.LoadCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.commandparser.importcommandparser.ImportDeleteCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.commandparser.importcommandparser.ImportEditCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.importcommandparser.LoadCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Parses user input in the import context."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportParser extends WemeParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case LoadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new LoadCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new ImportCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case ImportClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new ImportClearCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case ImportEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new ImportEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case ImportDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new ImportDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return super.parseCommand(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 56,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/contextparser/MemeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.contextparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeArchivesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDislikeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeFindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeLikeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeStageCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeUnarchiveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeAddCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeArchiveCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeDeleteCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeDislikeCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeEditCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeFindCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeLikeCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeStageCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.commandparser.memecommandparser.MemeUnarchiveCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses user input in the meme context."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeParser extends WemeParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case MemeLikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new MemeLikeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        case MemeDislikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return new MemeDislikeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case MemeStageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return new MemeStageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeArchivesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeArchivesCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case MemeUnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new MemeUnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return super.parseCommand(userInput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 6,
      "moziliar": 6,
      "jonchan51": 65,
      "cutieprobe": 18
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/contextparser/TemplateParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.contextparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateArchiveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateArchivesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUnarchiveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUseCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.templatecommandparser.TemplateAddCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.commandparser.templatecommandparser.TemplateArchiveCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.templatecommandparser.TemplateDeleteCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.templatecommandparser.TemplateEditCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.commandparser.templatecommandparser.TemplateUnarchiveCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.commandparser.templatecommandparser.TemplateUseCommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Parses user input in the templates context."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateParser extends WemeParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case TemplateAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TemplateAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case TemplateDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TemplateDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case TemplateEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TemplateEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case TemplateUseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new TemplateUseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case TemplateArchivesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new TemplateArchivesCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case TemplateArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new TemplateArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case TemplateUnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new TemplateUnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return super.parseCommand(userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 14,
      "cutieprobe": 8,
      "gary-lgy": 50
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/contextparser/WemeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.contextparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.TabCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.commandparser.generalcommandparser.TabCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Parses user input. Base context parser that all context parsers inherit from."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public abstract class WemeParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"commandWord\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String ARGUMENTS \u003d \"arguments\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD).toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new TabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 13,
      "-": 41,
      "cutieprobe": 12
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/util/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in this {@code ArgumentMultiMap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean arePrefixesPresent(Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "cutieprobe": 2,
      "gary-lgy": 9
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/util/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.PREFIX_LENGTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Parse the given arguments to obtain the last prefix with its arguments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param argsString Input string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return           LastArgument in the argument string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static LastArgument getLastArgument(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        List\u003cPrefixPosition\u003e prefixPositions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (prefixPositions.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix2.getStartPosition() - prefix1.getStartPosition());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        PrefixPosition lastPrefixPosition \u003d prefixPositions.get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Prefix lastPrefix \u003d lastPrefixPosition.prefix;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new LastArgument(lastPrefix, extractArgumentValue(argsString, lastPrefixPosition, endPositionMarker));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Removes the value of the last argument from the input string for command auto-completion."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param userInput    Input string of the form: {@code commandWord preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param prefixes Prefixes to tokenize the input string with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return         String input without the last argument value."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static String removeLastArgument(String userInput, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        List\u003cPrefixPosition\u003e prefixPositions \u003d findAllPrefixPositions(userInput, prefixes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (prefixPositions.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix2.getStartPosition() - prefix1.getStartPosition());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        PrefixPosition lastPrefixPosition \u003d prefixPositions.get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return userInput.substring(0, lastPrefixPosition.getStartPosition() + PREFIX_LENGTH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 148,
      "cutieprobe": 42
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/util/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String PREFIX_DESCRIPTION_STRING \u003d \"d/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String PREFIX_FILEPATH_STRING \u003d \"p/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String PREFIX_TAG_STRING \u003d \"t/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String PREFIX_NAME_STRING \u003d \"n/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String PREFIX_TEXT_STRING \u003d \"t/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String PREFIX_X_COORDINATE_STRING \u003d \"x/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String PREFIX_Y_COORDINATE_STRING \u003d \"y/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String PREFIX_COLOR_STRING \u003d \"c/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String PREFIX_STYLE_STRING \u003d \"S/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String PREFIX_SIZE_STRING \u003d \"s/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(PREFIX_DESCRIPTION_STRING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Prefix PREFIX_FILEPATH \u003d new Prefix(PREFIX_FILEPATH_STRING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(PREFIX_TAG_STRING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(PREFIX_NAME_STRING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Prefix PREFIX_TEXT \u003d new Prefix(PREFIX_TEXT_STRING);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Prefix PREFIX_X_COORDINATE \u003d new Prefix(PREFIX_X_COORDINATE_STRING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Prefix PREFIX_Y_COORDINATE \u003d new Prefix(PREFIX_Y_COORDINATE_STRING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Prefix PREFIX_COLOR \u003d new Prefix(PREFIX_COLOR_STRING);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Prefix PREFIX_STYLE \u003d new Prefix(PREFIX_STYLE_STRING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Prefix PREFIX_SIZE \u003d new Prefix(PREFIX_SIZE_STRING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "cutieprobe": 12,
      "gary-lgy": 12
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/parser/util/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_CREATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_EXPORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_IMPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_MEMES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_PREFERENCES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_STATISTICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_TEMPLATES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.parser.contextparser.CreateParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.ExportParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.ImportParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.MemeParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.TemplateParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.WemeParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.DirectoryPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Coordinates;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextColor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextSize;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeTextStyle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_INVALID_TAB \u003d \"Tab provided is not a valid tab.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_INVALID_FILEPATH \u003d \"File not found or invalid file path given.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_INVALID_DIRECTORYPATH \u003d \"Invalid directory path given.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_INVALID_COORDINATES \u003d \"Coorinates must be numbers between 0 and 1 inclusive\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final MemeParser MEMES_PARSER \u003d new MemeParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final TemplateParser TEMPLATE_PARSER \u003d new TemplateParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final ImportParser IMPORT_PARSER \u003d new ImportParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final ExportParser EXPORT_PARSER \u003d new ExportParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final CreateParser CREATE_PARSER \u003d new CreateParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a Parser depending on the given ModelContext."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param modelContext Current context."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Parser to parse commands with."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static WemeParser forContext(ModelContext modelContext) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        switch (modelContext) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case CONTEXT_MEMES:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return MEMES_PARSER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_IMPORT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return IMPORT_PARSER;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_EXPORT:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return EXPORT_PARSER;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_TEMPLATES:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return TEMPLATE_PARSER;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_CREATE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return CREATE_PARSER;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_STATISTICS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_PREFERENCES:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            // TODO: This is a temporary placeholder until all tabs have been implemented"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new WemeParser() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses {@code context} into a {@code ModelContext} that has its own tab and returns it."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the specified context does not corresponds to a tab"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static ModelContext parseTab(String context) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String trimmedContext \u003d context.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (trimmedContext.equals(CONTEXT_MEMES.getContextName())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return CONTEXT_MEMES;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else if (trimmedContext.equals(CONTEXT_TEMPLATES.getContextName())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return CONTEXT_TEMPLATES;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else if (trimmedContext.equals(CONTEXT_CREATE.getContextName())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return CONTEXT_CREATE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else if (trimmedContext.equals(CONTEXT_STATISTICS.getContextName())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return CONTEXT_STATISTICS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } else if (trimmedContext.equals(CONTEXT_EXPORT.getContextName())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return CONTEXT_EXPORT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } else if (trimmedContext.equals(CONTEXT_IMPORT.getContextName())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return CONTEXT_IMPORT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        } else if (trimmedContext.equals(CONTEXT_PREFERENCES.getContextName())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return CONTEXT_PREFERENCES;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses {@code x} and {@code y} into a {@code Coordinates} and returns it."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if x or y is not between 0 to 1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static Coordinates parseCoordinates(String x, String y) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new Coordinates(parseCoordinate(x), parseCoordinate(y));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses {@code coordinate} into a float suitable for use as a coordinate for {@code Coordinates} and returns it."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if coordinate is not between 0 to 1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static float parseCoordinate(String coordinate) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        float val;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            val \u003d Float.parseFloat(coordinate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COORDINATES);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (val \u003c 0 || val \u003e 1) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COORDINATES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return val;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Parses a {@code String input} into an {@code ImagePath}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static ImagePath parseFilePath(String input) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String trimmedPath \u003d input.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!ImagePath.isValidFilePath(trimmedPath)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILEPATH);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return new ImagePath(trimmedPath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Parses a {@code String input} into a {@code DirectoryPath}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static DirectoryPath parseDirectoryPath(String input) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String trimmedPath \u003d input.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!FileUtil.isValidDirectoryPath(trimmedPath)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DIRECTORYPATH);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new DirectoryPath(trimmedPath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses {@code color} into a {@code MemeTextColor}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static MemeTextColor parseMemeTextColor(String color) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(color);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String trimmedColor \u003d color.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!MemeTextColor.isValidMemeTextColor(trimmedColor)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(MemeTextColor.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new MemeTextColor(trimmedColor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e styles} into a {@code Set\u003cMemeTextStyle\u003e}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static Set\u003cMemeTextStyle\u003e parseMemeTextStyles(Collection\u003cString\u003e styles) throws ParseException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(styles);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final Set\u003cMemeTextStyle\u003e styleSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (String style : styles) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            String trimmedStyle \u003d style.trim().toLowerCase();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            if (!MemeTextStyle.isValidMemeTextStyle(trimmedStyle)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                throw new ParseException(MemeTextStyle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            styleSet.add(new MemeTextStyle(trimmedStyle));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return styleSet;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses {@code size} into a {@code MemeTextSize}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static MemeTextSize parseMemeTextSize(String size) throws ParseException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(size);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String trimmedSize \u003d size.trim();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!MemeTextSize.isValidMemeTextSize(trimmedSize)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new ParseException(MemeTextSize.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new MemeTextSize(trimmedSize);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 40,
      "moziliar": 7,
      "jonchan51": 33,
      "-": 69,
      "cutieprobe": 6,
      "gary-lgy": 114
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/Prompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Represent an prompter that suggest command prompts given command arguments."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public interface Prompter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Suggest possible command arguments for the user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    CommandPrompt prompt(Model model, String userInput) throws PromptException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 15
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/createcommandprompter/TextAddCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.createcommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.createcommand.TextAddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_SIZE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_STYLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_X_COORDINATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_Y_COORDINATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible arguments for TextAddCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TextAddCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_X_COORDINATE, PREFIX_Y_COORDINATE, PREFIX_COLOR,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                PREFIX_STYLE, PREFIX_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_X_COORDINATE, PREFIX_Y_COORDINATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                PREFIX_COLOR, PREFIX_STYLE, PREFIX_SIZE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 48
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/exportcommandpropmter/ExportCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.exportcommandpropmter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.exportcommand.ExportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.PREFIX_LENGTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible arguments for ExportCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ExportCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.trim().length() \u003e\u003d PREFIX_LENGTH \u0026\u0026 lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 46
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/exportcommandpropmter/UnstageCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.exportcommandpropmter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.exportcommand.UnstageCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible arguments for UnstageCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class UnstageCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/generalcommandprompter/TabCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.generalcommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.generalcommand.TabCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.generalcommand.TabCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.ParserUtil.MESSAGE_INVALID_TAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.COMMAND_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.CONTEXTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.findMostSimilarString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.findSimilarStrings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible contexts for a tab command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TabCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private static final String PREAMBLE \u003d COMMAND_WORD + COMMAND_DELIMITER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String context \u003d arguments.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (context.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String similarContexts \u003d findSimilarStrings(CONTEXTS, context);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String mostSimilarContext \u003d findMostSimilarString(CONTEXTS, context);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (similarContexts.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new PromptException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new CommandPrompt(similarContexts, PREAMBLE + mostSimilarContext);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 42,
      "gary-lgy": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/importcommandprompter/ImportDeleteCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.importcommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.importcommand.ImportDeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for ImportDeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ImportDeleteCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/importcommandprompter/ImportEditCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.importcommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.importcommand.ImportEditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for ImportEditCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ImportEditCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ArgumentTokenizer.tokenize(arguments, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                // Checks whether the arguments is in the correct format:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                // either contains index only or contains index and partial prefix."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                char partialPrefix \u003d arguments.charAt(arguments.length() - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                if (partialPrefix \u003d\u003d PREFIX_DESCRIPTION.toString().charAt(0)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                        || partialPrefix \u003d\u003d PREFIX_TAG.toString().charAt(0)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    Integer.parseInt(arguments.substring(0, arguments.length() - 1).trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 59
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/importcommandprompter/LoadCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.importcommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.importcommand.LoadCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.PREFIX_LENGTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible arguments for LoadCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class LoadCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.trim().length() \u003e\u003d PREFIX_LENGTH \u0026\u0026 lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 46
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeAddCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeAddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.PREFIX_LENGTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible arguments for MemeAddCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeAddCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_FILEPATH, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.trim().length() \u003e\u003d PREFIX_LENGTH \u0026\u0026 lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_FILEPATH, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 49
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeArchiveCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeArchiveCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeArchiveCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeArchiveCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeDeleteCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeDeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeDeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeDeleteCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeDislikeCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeDislikeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeDisLikeCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeDislikeCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeEditCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeEditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeEditCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeEditCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ArgumentTokenizer.tokenize(arguments, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                // Checks whether the arguments is in the correct format:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                // either contains index only or contains index and partial prefix."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                char partialPrefix \u003d arguments.charAt(arguments.length() - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                if (partialPrefix \u003d\u003d PREFIX_DESCRIPTION.toString().charAt(0)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                        || partialPrefix \u003d\u003d PREFIX_TAG.toString().charAt(0)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    Integer.parseInt(arguments.substring(0, arguments.length() - 1).trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_DESCRIPTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 59
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeFindCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeFindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeFindCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.COMMAND_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeFindCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeFindCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private static final String PREAMBLE \u003d COMMAND_WORD + COMMAND_DELIMITER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Find similar tags in the records for the last tag in the input separated by white space."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String[] tokens \u003d arguments.trim().split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d new LastArgument(PREFIX_TAG, tokens[tokens.length - 1].trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Comparator\u003cString\u003e tagComparator \u003d (x, y) -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            int countX \u003d model.getCountOfTag(new Tag(x));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            int countY \u003d model.getCountOfTag(new Tag(y));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (countX \u003d\u003d countY) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return x.compareTo(y);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return countY - countX;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (lastArgument.getArgument().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            List\u003cString\u003e possibleArguments \u003d model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .getTagRecords()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted(tagComparator)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    possibleArguments"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                            .reduce((t1, t2) -\u003e t1 + \u0027\\n\u0027 + t2)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                            .orElse(\"\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    possibleArguments"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                            .findFirst()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                            .orElse(\"\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d PREAMBLE + String.join(\" \","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                Arrays.copyOfRange(tokens, 0, tokens.length - 1)) + COMMAND_DELIMITER;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 78
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeLikeCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeLikeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeLikeCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeLikeCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            String displayText \u003d \"You can now use UP arrow key to spam likes!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(displayText, userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 2,
      "cutieprobe": 36
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeStageCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeStageCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeStageCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeStageCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/memecommandprompter/MemeUnarchiveCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.memecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeUnarchiveCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for MemeUnarchiveCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemeUnarchiveCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/templatecommandprompter/TemplateAddCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.templatecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.templatecommand.TemplateAddCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.PREFIX_LENGTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible arguments for TemplateAddCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TemplateAddCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_NAME, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.trim().length() \u003e\u003d PREFIX_LENGTH \u0026\u0026 lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_NAME, PREFIX_FILEPATH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 47
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/templatecommandprompter/TemplateArchiveCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.templatecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.templatecommand.TemplateArchiveCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for TemplateArchiveCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TemplateArchiveCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/templatecommandprompter/TemplateDeleteCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.templatecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.templatecommand.TemplateDeleteCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for TemplateDeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TemplateDeleteCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/templatecommandprompter/TemplateEditCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.templatecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.templatecommand.TemplateEditCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.getLastArgument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ArgumentTokenizer.removeLastArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptSimilarArguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.util.LastArgument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt possible arguments for TemplateEditCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TemplateEditCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        ArgumentTokenizer.tokenize(arguments, PREFIX_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LastArgument lastArgument \u003d getLastArgument(arguments, PREFIX_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (lastArgument \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                // Checks whether the arguments is in the correct format:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                // either contains index only or contains index and partial prefix."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                char partialPrefix \u003d arguments.charAt(arguments.length() - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                if (partialPrefix \u003d\u003d PREFIX_NAME.toString().charAt(0)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    Integer.parseInt(arguments.substring(0, arguments.length() - 1).trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return new CommandPrompt(TemplateEditCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String inputWithoutLastArgument \u003d removeLastArgument(userInput, PREFIX_NAME);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return promptSimilarArguments(model, inputWithoutLastArgument, lastArgument);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 58
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/templatecommandprompter/TemplateUnarchiveCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.templatecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.templatecommand.TemplateUnarchiveCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for TemplateUnarchiveCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TemplateUnarchiveCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/commandprompter/templatecommandprompter/TemplateUseCommandPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.commandprompter.templatecommandprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.commands.templatecommand.TemplateUseCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.Prompter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt arguments for TemplateUseCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TemplateUseCommandPrompter implements Prompter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt prompt(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        matcher.matches();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/CreatePrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.CREATE_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.CREATE_COMMANDS_DESCRIPTION_MAP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.GENERAL_COMMANDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.createcommand.AbortCreationCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.createcommand.CreateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.createcommandprompter.TextAddCommandPrompter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt command arguments in the create context."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class CreatePrompter extends WemePrompter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(CREATE_COMMANDS"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .map(command -\u003e CREATE_COMMANDS_DESCRIPTION_MAP.get(command))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .orElse(\"\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    CREATE_COMMANDS.stream().sorted().findFirst().orElse(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (GENERAL_COMMANDS.contains(commandWord)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return super.promptCommand(model, userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TextAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TextAddCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case AbortCreationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(AbortCreationCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(CreateCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return promptCommandWord(CREATE_COMMANDS, commandWord, CREATE_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 64
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/ExportPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.EXPORT_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.EXPORT_COMMANDS_DESCRIPTION_MAP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.GENERAL_COMMANDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.ExportClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.ExportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.UnstageCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.exportcommandpropmter.ExportCommandPrompter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.exportcommandpropmter.UnstageCommandPrompter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt command arguments in the export context."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ExportPrompter extends WemePrompter {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(EXPORT_COMMANDS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .map(command -\u003e EXPORT_COMMANDS_DESCRIPTION_MAP.get(command))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .orElse(\"\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    EXPORT_COMMANDS.stream().sorted().findFirst().orElse(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (GENERAL_COMMANDS.contains(commandWord)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return super.promptCommand(model, userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case UnstageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new UnstageCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new ExportCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case ExportClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(ExportClearCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return promptCommandWord(EXPORT_COMMANDS, commandWord, EXPORT_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 65
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/ImportPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.GENERAL_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.IMPORT_COMMANDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.IMPORT_COMMANDS_DESCRIPTION_MAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportDeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.LoadCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.importcommandprompter.ImportDeleteCommandPrompter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.importcommandprompter.ImportEditCommandPrompter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.importcommandprompter.LoadCommandPrompter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt command arguments in the import context."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class ImportPrompter extends WemePrompter {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(IMPORT_COMMANDS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .map(command -\u003e IMPORT_COMMANDS_DESCRIPTION_MAP.get(command))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .orElse(\"\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    IMPORT_COMMANDS.stream().sorted().findFirst().orElse(\"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (GENERAL_COMMANDS.contains(commandWord)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return super.promptCommand(model, userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case LoadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new LoadCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(ImportCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case ImportDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new ImportDeleteCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case ImportEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new ImportEditCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case ImportClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(ImportClearCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return promptCommandWord(IMPORT_COMMANDS, commandWord, IMPORT_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 74
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/MemePrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.GENERAL_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.MEME_COMMANDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.MEME_COMMANDS_DESCRIPTION_MAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeArchiveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeArchivesCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDislikeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeFindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeLikeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeStageCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeUnarchiveCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeAddCommandPrompter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeArchiveCommandPrompter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeDeleteCommandPrompter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeDislikeCommandPrompter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeEditCommandPrompter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeFindCommandPrompter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeLikeCommandPrompter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeStageCommandPrompter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.memecommandprompter.MemeUnarchiveCommandPrompter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt command arguments in the meme context."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class MemePrompter extends WemePrompter {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MEME_COMMANDS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .map(command -\u003e MEME_COMMANDS_DESCRIPTION_MAP.get(command))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .orElse(\"\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MEME_COMMANDS.stream().sorted().findFirst().orElse(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (GENERAL_COMMANDS.contains(commandWord)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return super.promptCommand(model, userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeAddCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeArchiveCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeArchivesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MemeArchivesCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeEditCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeDeleteCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeDislikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeDislikeCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeFindCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeLikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeLikeCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeStageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeStageCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MemeClearCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeUnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new MemeUnarchiveCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case MemeListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(MemeListCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return promptCommandWord(MEME_COMMANDS, commandWord, MEME_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 108
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/PreferencePrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.GENERAL_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.PREFERENCES_COMMANDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.PREFERENCES_COMMANDS_DESCRIPTION_MAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt command arguments in the preference context."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class PreferencePrompter extends WemePrompter {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(PREFERENCES_COMMANDS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .map(command -\u003e PREFERENCES_COMMANDS_DESCRIPTION_MAP.get(command))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .orElse(\"\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    PREFERENCES_COMMANDS.stream().sorted().findFirst().orElse(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (GENERAL_COMMANDS.contains(commandWord)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return super.promptCommand(model, userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return promptCommandWord(PREFERENCES_COMMANDS, commandWord, PREFERENCES_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 48
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/StatisticsPrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.GENERAL_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.STATISTICS_COMMANDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.STATISTICS_COMMANDS_DESCRIPTION_MAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt command arguments in the statistics context."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class StatisticsPrompter extends WemePrompter {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(STATISTICS_COMMANDS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .map(command -\u003e STATISTICS_COMMANDS_DESCRIPTION_MAP.get(command))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .orElse(\"\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    STATISTICS_COMMANDS.stream().sorted().findFirst().orElse(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (GENERAL_COMMANDS.contains(commandWord)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return super.promptCommand(model, userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return promptCommandWord(STATISTICS_COMMANDS, commandWord, STATISTICS_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 48
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/TemplatePrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.GENERAL_COMMANDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.TEMPLATE_COMMANDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.TEMPLATE_COMMANDS_DESCRIPTION_MAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.prompter.util.PrompterUtil.promptCommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateArchiveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateArchivesCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUnarchiveCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.templatecommandprompter.TemplateAddCommandPrompter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.templatecommandprompter.TemplateArchiveCommandPrompter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.templatecommandprompter.TemplateDeleteCommandPrompter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.templatecommandprompter.TemplateEditCommandPrompter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.templatecommandprompter.TemplateUnarchiveCommandPrompter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.templatecommandprompter.TemplateUseCommandPrompter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt command arguments in the template context."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class TemplatePrompter extends WemePrompter {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(TEMPLATE_COMMANDS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .map(command -\u003e TEMPLATE_COMMANDS_DESCRIPTION_MAP.get(command))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    .orElse(\"\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TEMPLATE_COMMANDS.stream().sorted().findFirst().orElse(\"\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (GENERAL_COMMANDS.contains(commandWord)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return super.promptCommand(model, userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TemplateAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TemplateAddCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TemplateArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TemplateArchiveCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TemplateArchivesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(TemplateArchivesCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TemplateDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TemplateDeleteCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TemplateEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TemplateEditCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TemplateUnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TemplateUnarchiveCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TemplateUseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TemplateUseCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (arguments.isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                return promptCommandWord(TEMPLATE_COMMANDS, commandWord, TEMPLATE_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                throw new PromptException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 85
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/contextprompter/WemePrompter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.contextprompter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.ARGUMENTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.TabCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.commandprompter.generalcommandprompter.TabCommandPrompter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Prompt commands based on user input. Base context prompter that all context prompter inherit from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class WemePrompter {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Provide a command prompt given user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return command prompt based on user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws PromptException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt promptCommand(Model model, String userInput) throws PromptException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return CommandPrompt.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String commandWord \u003d matcher.group(COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        final String arguments \u003d matcher.group(ARGUMENTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new TabCommandPrompter().prompt(model, userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(UndoCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(RedoCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(ExitCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(HelpCommand.MESSAGE_USAGE, userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 61
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/exceptions/PromptException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Represents a prompt error encountered by a prompter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class PromptException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public PromptException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public PromptException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 17
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/prompt/CommandPrompt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.prompt;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * A Wrapper class for command prompt and complete command for auto-completion."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class CommandPrompt {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private final String commandPrompt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private final String completeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt(String completeCommand) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.commandPrompt \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.completeCommand \u003d completeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public CommandPrompt(String commandPrompt, String completeCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.commandPrompt \u003d commandPrompt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.completeCommand \u003d completeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static CommandPrompt empty() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new CommandPrompt(\"\", \"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String getCommandPrompt() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return commandPrompt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String getCompleteCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return completeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return String.format(\"Command prompt: %s\\nComplete command: %s\\n\", commandPrompt, completeCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 36
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/util/LastArgument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * A wrapper class for the last argument in user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class LastArgument {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Prefix prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public LastArgument(Prefix prefix, String argument) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String getArgument() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return argument;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 24
    }
  },
  {
    "path": "src/main/java/seedu/weme/logic/prompter/util/PrompterUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.prompter.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_COLOR_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_NAME_STRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_SIZE_STRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_STYLE_STRING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG_STRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_X_COORDINATE_STRING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_Y_COORDINATE_STRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_CREATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_EXPORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_IMPORT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_MEMES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_PREFERENCES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_STATISTICS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_TEMPLATES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import org.apache.commons.text.similarity.LevenshteinDistance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.createcommand.AbortCreationCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.createcommand.CreateCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.createcommand.TextAddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.ExportClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.ExportCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.exportcommand.UnstageCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.ExitCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.TabCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportClearCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportDeleteCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportEditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.importcommand.LoadCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeAddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeArchiveCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeArchivesCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeClearCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDeleteCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDislikeCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeFindCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeLikeCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeListCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeStageCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeUnarchiveCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateAddCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateArchiveCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateArchivesCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateDeleteCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateEditCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUnarchiveCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.templatecommand.TemplateUseCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.CreatePrompter;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.ExportPrompter;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.ImportPrompter;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.MemePrompter;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.PreferencePrompter;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.StatisticsPrompter;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.TemplatePrompter;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.contextprompter.WemePrompter;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Contains utility methods used for prompting commands in the various *Prompter classes."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class PrompterUtil {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final int PREFIX_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    // Delimiter separating command word and arguments."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String COMMAND_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final int MAX_RESULTS_DISPLAY \u003d 3;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String NO_LISTED_MEME \u003d \"No meme listed for now!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String NO_STAGED_MEME \u003d \"No meme found in staging!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String NO_LISTED_TEMPLATE \u003d \"No template listed for now!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e CONTEXTS \u003d Set.of("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CONTEXT_MEMES.getContextName(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CONTEXT_TEMPLATES.getContextName(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CONTEXT_CREATE.getContextName(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CONTEXT_STATISTICS.getContextName(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CONTEXT_EXPORT.getContextName(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CONTEXT_IMPORT.getContextName(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CONTEXT_PREFERENCES.getContextName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e GENERAL_COMMANDS \u003d Set.of("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            TabCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            UndoCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    );"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e GENERAL_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(ExitCommand.COMMAND_WORD, ExitCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(HelpCommand.COMMAND_WORD, HelpCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(RedoCommand.COMMAND_WORD, RedoCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TabCommand.COMMAND_WORD, TabCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(UndoCommand.COMMAND_WORD, UndoCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e MEME_COMMANDS \u003d Stream"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .concat(Stream.of("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeAddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeArchiveCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeArchivesCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeDeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeDislikeCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeEditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeFindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeLikeCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeStageCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    MemeUnarchiveCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ), GENERAL_COMMANDS.stream())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e MEME_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeAddCommand.COMMAND_WORD, MemeAddCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeArchiveCommand.COMMAND_WORD, MemeArchiveCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeArchivesCommand.COMMAND_WORD, MemeArchivesCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeClearCommand.COMMAND_WORD, MemeClearCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeDeleteCommand.COMMAND_WORD, MemeDeleteCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeDislikeCommand.COMMAND_WORD, MemeDislikeCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeEditCommand.COMMAND_WORD, MemeEditCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeFindCommand.COMMAND_WORD, MemeFindCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeLikeCommand.COMMAND_WORD, MemeLikeCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeListCommand.COMMAND_WORD, MemeListCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeStageCommand.COMMAND_WORD, MemeStageCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(MemeUnarchiveCommand.COMMAND_WORD, MemeUnarchiveCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            putAll(GENERAL_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e TEMPLATE_COMMANDS \u003d Stream"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .concat(Stream.of("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TemplateAddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TemplateArchiveCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TemplateArchivesCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TemplateDeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TemplateEditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TemplateUnarchiveCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TemplateUseCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ), GENERAL_COMMANDS.stream())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e TEMPLATE_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TemplateAddCommand.COMMAND_WORD, TemplateAddCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TemplateArchiveCommand.COMMAND_WORD, TemplateArchiveCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TemplateArchivesCommand.COMMAND_WORD, TemplateArchivesCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TemplateDeleteCommand.COMMAND_WORD, TemplateDeleteCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TemplateEditCommand.COMMAND_WORD, TemplateEditCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TemplateUnarchiveCommand.COMMAND_WORD, TemplateUnarchiveCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TemplateUseCommand.COMMAND_WORD, TemplateUseCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            putAll(GENERAL_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e CREATE_COMMANDS \u003d Stream"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .concat(Stream.of("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    AbortCreationCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    CreateCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    TextAddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ), GENERAL_COMMANDS.stream())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e CREATE_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(AbortCreationCommand.COMMAND_WORD, AbortCreationCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(CreateCommand.COMMAND_WORD, CreateCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(TextAddCommand.COMMAND_WORD, TextAddCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            putAll(GENERAL_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e STATISTICS_COMMANDS \u003d new HashSet\u003c\u003e(GENERAL_COMMANDS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e STATISTICS_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            GENERAL_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e EXPORT_COMMANDS \u003d Stream"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .concat(Stream.of("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    ExportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    UnstageCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    ExportClearCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ), GENERAL_COMMANDS.stream())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e EXPORT_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(ExportCommand.COMMAND_WORD, ExportCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(UnstageCommand.COMMAND_WORD, UnstageCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(ExportClearCommand.COMMAND_WORD, ExportClearCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            putAll(GENERAL_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e IMPORT_COMMANDS \u003d Stream"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .concat(Stream.of("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    ImportClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    ImportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    ImportDeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    ImportEditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    LoadCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            ), GENERAL_COMMANDS.stream())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e IMPORT_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e() {{"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(ImportClearCommand.COMMAND_WORD, ImportClearCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(ImportCommand.COMMAND_WORD, ImportCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(ImportDeleteCommand.COMMAND_WORD, ImportDeleteCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(ImportEditCommand.COMMAND_WORD, ImportEditCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            put(LoadCommand.COMMAND_WORD, LoadCommand.MESSAGE_DESCRIPTION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            putAll(GENERAL_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e PREFERENCES_COMMANDS \u003d new HashSet\u003c\u003e(GENERAL_COMMANDS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Map\u003cString, String\u003e PREFERENCES_COMMANDS_DESCRIPTION_MAP \u003d new HashMap\u003c\u003e("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            GENERAL_COMMANDS_DESCRIPTION_MAP);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String X_COORDINATE_PROMPT \u003d \"0.2\\n0.4\\n0.6\\n0.8\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String X_COORDINATE_AUTO_COMPLETION \u003d \"0.2\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String Y_COORDINATE_PROMPT \u003d \"0.2\\n0.4\\n0.6\\n0.8\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final String Y_COORDINATE_AUTO_COMPLETION \u003d \"0.2\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e STYLES \u003d Set.of(\"plain\", \"bold\", \"italic\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final Set\u003cString\u003e SIZES \u003d Set.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final WemePrompter MEME_PROMPTER \u003d new MemePrompter();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final WemePrompter TEMPLATE_PROMPTER \u003d new TemplatePrompter();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final WemePrompter CREATE_PROMPTER \u003d new CreatePrompter();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final WemePrompter STATISTICS_PROMPTER \u003d new StatisticsPrompter();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final WemePrompter EXPORT_PROMPTER \u003d new ExportPrompter();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final WemePrompter IMPORT_PROMPTER \u003d new ImportPrompter();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static final WemePrompter PREFERENCE_PROMPTER \u003d new PreferencePrompter();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns a Prompter depending on the given ModelContext."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param modelContext current context"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return Prompter to prompt command"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static WemePrompter forContext(ModelContext modelContext) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (modelContext) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CONTEXT_MEMES:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return MEME_PROMPTER;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CONTEXT_TEMPLATES:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return TEMPLATE_PROMPTER;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CONTEXT_CREATE:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return CREATE_PROMPTER;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CONTEXT_EXPORT:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return EXPORT_PROMPTER;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CONTEXT_IMPORT:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return IMPORT_PROMPTER;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CONTEXT_STATISTICS:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return STATISTICS_PROMPTER;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case CONTEXT_PREFERENCES:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return PREFERENCE_PROMPTER;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Check whether a string (start) starts with another string (full)."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param start the shorter string as a start"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param full the string that starts with the shorter string"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static boolean startsWith(String start, String full) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (start.length() \u003e full.length()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return full.substring(0, start.length()).equals(start);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Compare two strings based on their similarity with the argument."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return Int which is used by comparator"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private static int compareStrings(String x, String y, String argument) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (argument.isBlank()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return x.compareTo(y);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (startsWith(argument, x) \u0026\u0026 startsWith(argument, y)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return x.length() - y.length();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (startsWith(argument, x)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (startsWith(argument, y)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        LevenshteinDistance ld \u003d new LevenshteinDistance();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return ld.apply(x, argument) - ld.apply(y, argument);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Sort given set of strings by similarity to the argument."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return Stream containing the sorted records."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static Stream\u003cString\u003e sortStringsBySimilarity(Set\u003cString\u003e strings, String argument) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return strings"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .sorted((a, b) -\u003e compareStrings(a.toLowerCase(), b.toLowerCase(), argument.toLowerCase()));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Find most similar strings for the argument, limited by {@code MAX_RESULT_DISPLAY}."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return String containing the most similar records separated by line break."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static String findSimilarStrings(Set\u003cString\u003e strings, String argument) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return sortStringsBySimilarity(strings, argument)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .limit(MAX_RESULTS_DISPLAY)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Find the most similar string to the argument."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static String findMostSimilarString(Set\u003cString\u003e strings, String argument) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return sortStringsBySimilarity(strings, argument).findFirst().orElse(\"\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Find most similar command words to the input command word."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return CommandPrompt containing the most similar command words"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static CommandPrompt promptCommandWord(Set\u003cString\u003e commandWords, String commandWord,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                                                  Map\u003cString, String\u003e commandsDescriptionMap) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String similarCommands \u003d sortStringsBySimilarity(commandWords, commandWord)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .map(command -\u003e commandsDescriptionMap.get(command))"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .limit(MAX_RESULTS_DISPLAY)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .reduce((x, y) -\u003e x + \u0027\\n\u0027 + y)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String mostSimilarCommand \u003d findMostSimilarString(commandWords, commandWord);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new CommandPrompt(similarCommands, mostSimilarCommand + COMMAND_DELIMITER);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Find most similar arguments from records for the last argument in user input."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return CommandPrompt containing the most similar arguments"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static CommandPrompt promptSimilarArguments("
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Model model, String inputWithoutLastArgument, LastArgument lastArgument) throws PromptException {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String lastArgumentValue \u003d lastArgument.getArgument();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        switch (lastArgument.getPrefix().toString()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_FILEPATH_STRING:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Set\u003cString\u003e pathRecords \u003d model.getPathRecords();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(findSimilarStrings(pathRecords, lastArgumentValue),"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    inputWithoutLastArgument + findMostSimilarString(pathRecords, lastArgumentValue));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_DESCRIPTION_STRING:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Set\u003cString\u003e descriptionRecords \u003d model.getDescriptionRecords();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(findSimilarStrings(descriptionRecords, lastArgumentValue),"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    inputWithoutLastArgument + findMostSimilarString(descriptionRecords, lastArgumentValue));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_TAG_STRING:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Set\u003cString\u003e tagRecords \u003d model.getTagRecords();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(findSimilarStrings(tagRecords, lastArgumentValue),"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    inputWithoutLastArgument + findMostSimilarString(tagRecords, lastArgumentValue));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_NAME_STRING:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Set\u003cString\u003e nameRecords \u003d model.getNameRecords();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(findSimilarStrings(nameRecords, lastArgumentValue),"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    inputWithoutLastArgument + findMostSimilarString(nameRecords, lastArgumentValue));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_X_COORDINATE_STRING:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(X_COORDINATE_PROMPT, inputWithoutLastArgument + X_COORDINATE_AUTO_COMPLETION);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_Y_COORDINATE_STRING:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(Y_COORDINATE_PROMPT, inputWithoutLastArgument + Y_COORDINATE_AUTO_COMPLETION);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_COLOR_STRING:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            Set\u003cString\u003e colorRecords \u003d model.getColorRecords();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(findSimilarStrings(colorRecords, lastArgumentValue),"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    inputWithoutLastArgument + findMostSimilarString(colorRecords, lastArgumentValue));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_STYLE_STRING:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(findSimilarStrings(STYLES, lastArgumentValue),"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    inputWithoutLastArgument + findMostSimilarString(STYLES, lastArgumentValue));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        case PREFIX_SIZE_STRING:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return new CommandPrompt(findSimilarStrings(SIZES, lastArgumentValue),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                    inputWithoutLastArgument + findMostSimilarString(SIZES, lastArgumentValue));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new PromptException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 408
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/Archivable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Makes a resource archivable, requires an instance field {@code isArchived} as well."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public interface Archivable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns whether the implementing resource is archived."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    boolean isArchived();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 13
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/DirectoryPath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Wrapper class for Path for Import and Export."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class DirectoryPath {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Invalid Directory Path given.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public final Path directoryPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Constructs an {@code DirectoryPath}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param directoryPath A valid relative file path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public DirectoryPath(String directoryPath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(directoryPath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        checkArgument(isValidDirectoryPath(directoryPath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.directoryPath \u003d Paths.get(directoryPath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns true if the given string is a valid Path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private boolean isValidDirectoryPath(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // Paths.get() throws InvalidPathException when the path is a invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // It is caught and becomes return false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return FileUtil.isValidDirectoryPath(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Path toPath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return directoryPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return directoryPath.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof DirectoryPath // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 directoryPath.equals(((DirectoryPath) other).directoryPath)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return directoryPath.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 62
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithCount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /** {@code Predicate} that evaluates to true if unarchived */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Predicate\u003cMeme\u003e PREDICATE_SHOW_ALL_UNARCHIVED_MEMES \u003d meme -\u003e !meme.isArchived();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /** {@code Predicate} that evaluate to true if unarchived */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Predicate\u003cTemplate\u003e PREDICATE_SHOW_ALL_UNARCHIVED_TEMPLATES \u003d template -\u003e !template.isArchived();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /** {@code Predicate} that evaluate to true if archived */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Predicate\u003cMeme\u003e PREDICATE_SHOW_ALL_ARCHIVED_MEMES \u003d meme -\u003e meme.isArchived();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /** {@code Predicate} that evaluate to true if archived */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Predicate\u003cTemplate\u003e PREDICATE_SHOW_ALL_ARCHIVED_TEMPLATES \u003d template -\u003e template.isArchived();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns the user\u0027s preferences for Weme."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableMap\u003cString, String\u003e getObservableUserPreferences();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns the default export path in preferences.json."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    Path getDefaultExportPath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the user prefs\u0027 data file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    Path getDataFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the user prefs\u0027 data file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void setDataFilePath(Path dataFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the user prefs\u0027 meme image path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    Path getMemeImagePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the user prefs\u0027 meme image path."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void setMemeImagePath(Path memeImagePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the user prefs\u0027 template image path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    Path getTemplateImagePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the user prefs\u0027 template image path."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void setTemplateImagePath(Path templateImagePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Replaces Weme data with the data in {@code weme}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void setWeme(ReadOnlyWeme weme);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns Weme"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    ReadOnlyWeme getWeme();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Replaces meme data with the data in {@code memes}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void clearMemes();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if a meme with the same identity as {@code meme} exists in weme."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    boolean hasMeme(Meme meme);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Stages the given meme for export."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme must exist in Weme."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void stageMeme(Meme meme);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Unstages the given meme for export."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme must exist in Weme."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void unstageMeme(Meme meme);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Deletes the given meme."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme must exist in Weme."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void deleteMeme(Meme target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Deletes the given imported meme."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * The meme must exist in the imported list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void deleteImportedMeme(Meme target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Adds the given meme."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code meme} must not already exist in Weme."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void addMeme(Meme meme);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Retrieves paths of memes in the staging area."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @return A List of Path representing memes in staging area."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    List\u003cPath\u003e getExportPathList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Imports the meme to storage."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void importMemes() throws IOException;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Loads the memes to import staging area."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void loadMemes(List\u003cPath\u003e pathList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Replaces the given meme {@code target} with {@code editedMeme}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code target} must exist in Weme."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme identity of {@code editedMeme} must not be the same as another existing meme in Weme."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void setMeme(Meme target, Meme editedMeme);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Replaces the given meme {@code target} with {@code editedMeme}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * {@code target} must exist in Weme."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * The meme identity of {@code editedMeme} must not be the same as another existing meme in Weme."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void setImportedMeme(Meme target, Meme editedMeme);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if a template with the same identity as {@code template} exists in Weme."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    boolean hasTemplate(Template template);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Deletes the given template."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The template must exist in Weme."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void deleteTemplate(Template template);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Adds the given template."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * {@code template} must not already exist in Weme."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void addTemplate(Template template);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replaces the given template {@code target} with {@code editedTemplate}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * {@code target} must exist in Weme."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The template identity of {@code editedTemplate} must not be the same as another existing template in Weme."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void setTemplate(Template target, Template editedTemplate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /** Returns an unmodifiable view of the filtered meme list */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    ObservableList\u003cMeme\u003e getFilteredMemeList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns an unmodifiable view of the staged meme list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableList\u003cMeme\u003e getFilteredStagedMemeList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns an unmodifiable view of the import meme list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableList\u003cMeme\u003e getFilteredImportList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Updates the filter of the filtered meme list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void updateFilteredMemeList(Predicate\u003cMeme\u003e predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered template list */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    ObservableList\u003cTemplate\u003e getFilteredTemplateList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Updates the filter of the filtered template list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void updateFilteredTemplateList(Predicate\u003cTemplate\u003e predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the model context."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param context the context to switch to"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void setContext(ModelContext context);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the context of the model."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the current context"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    ObservableValue\u003cModelContext\u003e getContext();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Starts a meme creation session."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param template the template to use for meme creation"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void startMemeCreation(Template template) throws IOException;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the current meme creation session."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the current meme creation session."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    MemeCreation getMemeCreation();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Aborts the current meme creation session."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    void abortMemeCreation();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if model has a previous state to restore."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    boolean canUndoWeme();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if model has a undone state to restore."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    boolean canRedoWeme();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Restores the model\u0027s Weme to its previous state."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return the feedback to give the user of the undone command."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    String undoWeme();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Restores the model\u0027s Weme to its previously undone state."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return the feedback to give the user of the redone command."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    String redoWeme();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Saves the current Weme state for undo/redo."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param feedback The string to inform the user what command was undone / redone"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void commitWeme(String feedback);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns the number of likes of a meme."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    int getLikesByMeme(Meme meme);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns the like data."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Increments likes of a meme by the Meme object."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void incrementMemeLikeCount(Meme meme);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Decrements likes of a meme by the Meme object."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void decrementMemeLikeCount(Meme meme);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Deletes stats data by meme."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void clearMemeStats(Meme memeToDelete);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Clears the list memes in export tab."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void clearExportList();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Clears the list memes in export tab."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    void clearImportList();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns all past records of file paths."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    Set\u003cString\u003e getPathRecords();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns all past records of descriptions."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    Set\u003cString\u003e getDescriptionRecords();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns all past records of tags."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    Set\u003cString\u003e getTagRecords();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns all past records of names."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    Set\u003cString\u003e getNameRecords();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns all past records of colors."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    Set\u003cString\u003e getColorRecords();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add information of a meme to the records."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    void addMemeToRecords(Meme meme);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add information of a template to the records."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    void addTemplateToRecords(Template template);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Add information of a meme text to the records."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    void addMemeTextToRecords(MemeText memeText);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns the count of a tag in the current meme list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns -1 if the tag is not present in the current meme list."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getCountOfTag(Tag tag);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns a list of tags with counts."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    List\u003cTagWithCount\u003e getTagsWithCountList();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Clears the image data folder of any memes that are not referenced in weme."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void cleanMemeStorage();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Clears the image data folder of any templates that are not referenced in Weme."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void cleanTemplateStorage();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 72,
      "moziliar": 31,
      "jonchan51": 78,
      "-": 58,
      "cutieprobe": 56,
      "gary-lgy": 85
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/ModelContext.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Determines the current context of the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public enum ModelContext {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    // List of all contexts in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    CONTEXT_MEMES(\"memes\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    CONTEXT_TEMPLATES(\"templates\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    CONTEXT_CREATE(\"create\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    CONTEXT_STATISTICS(\"statistics\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    CONTEXT_EXPORT(\"export\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    CONTEXT_IMPORT(\"import\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    CONTEXT_PREFERENCES(\"preferences\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final String contextName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    ModelContext(String contextName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.contextName \u003d contextName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getContextName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return contextName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 3,
      "jonchan51": 18,
      "gary-lgy": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.UncheckedIOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithCount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents the in-memory model of Weme data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final VersionedWeme versionedWeme;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final FilteredList\u003cMeme\u003e filteredMemes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final FilteredList\u003cMeme\u003e filteredStagedMemeList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final FilteredList\u003cMeme\u003e filteredImportMemeList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final FilteredList\u003cTemplate\u003e filteredTemplates;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    // ModelContext determines which parser to use at any point of time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private SimpleObjectProperty\u003cModelContext\u003e context \u003d new SimpleObjectProperty\u003c\u003e(ModelContext.CONTEXT_MEMES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Initializes a ModelManager with the given Weme and userPrefs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public ModelManager(ReadOnlyWeme weme, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireAllNonNull(weme, userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        logger.fine(\"Initializing with Weme: \" + weme + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme \u003d new VersionedWeme(weme);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        filteredMemes \u003d new FilteredList\u003c\u003e(versionedWeme.getMemeList(), PREDICATE_SHOW_ALL_UNARCHIVED_MEMES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        filteredStagedMemeList \u003d new FilteredList\u003c\u003e(versionedWeme.getStagedMemeList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        filteredImportMemeList \u003d new FilteredList\u003c\u003e(versionedWeme.getImportList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        filteredTemplates \u003d new FilteredList\u003c\u003e(versionedWeme.getTemplateList(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                PREDICATE_SHOW_ALL_UNARCHIVED_TEMPLATES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(new Weme(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Export/Import \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public List\u003cPath\u003e getExportPathList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return versionedWeme.getExportPathList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void importMemes() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.importMeme(getMemeImagePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void loadMemes(List\u003cPath\u003e pathList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.loadMemes(pathList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void clearExportList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.clearExportList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void clearImportList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.clearImportList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableMap\u003cString, String\u003e getObservableUserPreferences() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return userPrefs.getObservableUserPreferences();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Path getDataFilePath() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return userPrefs.getDataFilePath();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Path getDefaultExportPath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return userPrefs.getDefaultExportPath();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setDataFilePath(dataFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Path getMemeImagePath() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return userPrefs.getMemeImagePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setMemeImagePath(Path memeImagePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(memeImagePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setMemeImagePath(memeImagePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Path getTemplateImagePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return userPrefs.getTemplateImagePath();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplateImagePath(Path templateImagePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(templateImagePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setTemplateImagePath(templateImagePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Weme \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setWeme(ReadOnlyWeme weme) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.versionedWeme.resetData(weme);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public ReadOnlyWeme getWeme() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void clearMemes() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme.setMemes(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean hasMeme(Meme meme) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(meme);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme.hasMeme(meme);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void deleteMeme(Meme target) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme.removeMeme(target);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void deleteImportedMeme(Meme target) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.removeImportedMeme(target);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void addMeme(Meme meme) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme.addMeme(meme);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        updateFilteredMemeList(PREDICATE_SHOW_ALL_UNARCHIVED_MEMES);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme(Meme target, Meme editedMeme) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireAllNonNull(target, editedMeme);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme.setMeme(target, editedMeme);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void setImportedMeme(Meme target, Meme editedMeme) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireAllNonNull(target, editedMeme);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.setImportedMeme(target, editedMeme);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void stageMeme(Meme meme) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.stageMeme(meme);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void unstageMeme(Meme meme) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        versionedWeme.unstageMeme(meme);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean hasTemplate(Template template) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(template);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return versionedWeme.hasTemplate(template);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void deleteTemplate(Template template) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        versionedWeme.removeTemplate(template);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void addTemplate(Template template) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        versionedWeme.addTemplate(template);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        updateFilteredTemplateList(PREDICATE_SHOW_ALL_UNARCHIVED_TEMPLATES);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplate(Template target, Template editedTemplate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(target, editedTemplate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        versionedWeme.setTemplate(target, editedTemplate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Meme/Template List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Meme} backed by the internal list of"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code versionedWeme}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public ObservableList\u003cMeme\u003e getFilteredMemeList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return filteredMemes;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableList\u003cMeme\u003e getFilteredStagedMemeList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return filteredStagedMemeList;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableList\u003cMeme\u003e getFilteredImportList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return filteredImportMemeList;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void updateFilteredMemeList(Predicate\u003cMeme\u003e predicate) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        filteredMemes.setPredicate(predicate);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public ObservableList\u003cTemplate\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return filteredTemplates;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void updateFilteredTemplateList(Predicate\u003cTemplate\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        filteredTemplates.setPredicate(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setContext(ModelContext context) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.context.setValue(context);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public ObservableValue\u003cModelContext\u003e getContext() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return context;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void startMemeCreation(Template template) throws IOException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        versionedWeme.startMemeCreation(template);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeCreation getMemeCreation() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return versionedWeme.getMemeCreation();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void abortMemeCreation() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        versionedWeme.abortMemeCreation();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean canUndoWeme() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme.canUndo();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean canRedoWeme() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme.canRedo();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String undoWeme() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme.undo();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String redoWeme() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme.redo();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void commitWeme(String feedback) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme.commit(feedback);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getLikesByMeme(meme);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme.getObservableLikeData();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void incrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme.incrementMemeLikeCount(meme);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void decrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        versionedWeme.decrementMemeLikeCount(meme);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getCountOfTag(Tag tag) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getCountOfTag(tag);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public List\u003cTagWithCount\u003e getTagsWithCountList() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getTagsWithCountList();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void clearMemeStats(Meme meme) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWeme.clearMemeStats(meme);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Records method \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getPathRecords() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getPaths();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getDescriptionRecords() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getDescriptions();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getTagRecords() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getTags();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getNameRecords() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getNames();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getColorRecords() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return versionedWeme.getColors();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addMemeToRecords(Meme meme) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        versionedWeme.addPath(meme.getImagePath());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        versionedWeme.addDescription(meme.getDescription());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        versionedWeme.addTags(meme.getTags());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addTemplateToRecords(Template template) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        versionedWeme.addPath(template.getImagePath());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        versionedWeme.addName(template.getName());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addMemeTextToRecords(MemeText memeText) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        versionedWeme.addColor(memeText.getColor());"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void cleanMemeStorage() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Set\u003cFile\u003e filesToKeep \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            for (Meme meme : versionedWeme.getMemeList()) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                File file \u003d meme.getImagePath().getFilePath().toFile();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                filesToKeep.add(file);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Files.list(getMemeImagePath())"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    .map(Path::toFile)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    .filter(file -\u003e !filesToKeep.contains(file))"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    .forEach(File::delete);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new UncheckedIOException(e);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void cleanTemplateStorage() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Set\u003cFile\u003e filesToKeep \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            for (Template template : versionedWeme.getTemplateList()) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                File file \u003d template.getImagePath().getFilePath().toFile();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                filesToKeep.add(file);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Files.list(getTemplateImagePath())"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    .map(Path::toFile)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    .filter(file -\u003e !filesToKeep.contains(file))"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    .forEach(File::delete);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new UncheckedIOException(e);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return versionedWeme.equals(other.versionedWeme)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 filteredMemes.equals(other.filteredMemes)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 context.getValue().equals(other.context.getValue());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 77,
      "moziliar": 22,
      "jonchan51": 123,
      "-": 106,
      "gary-lgy": 89,
      "cutieprobe": 61
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    Path getDataFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    Path getMemeImagePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    Path getExportPath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    Path getTemplateImagePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 2,
      "moziliar": 1,
      "jonchan51": 2,
      "-": 13,
      "gary-lgy": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/ReadOnlyWeme.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.Stats;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithCount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithLike;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Unmodifiable view of a Weme"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public interface ReadOnlyWeme {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns an unmodifiable view of the memes list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * This list will not contain any duplicate memes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    ObservableList\u003cMeme\u003e getMemeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns an umodifiable view of the staged memes list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * This list will not contain any duplicate memes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableList\u003cMeme\u003e getStagedMemeList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns an umodifiable view of the import memes list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * This list will not contain any duplicate memes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    ObservableList\u003cMeme\u003e getImportList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns an unmodifiable view of the template list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * This list will not contain any duplicate templates."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    ObservableList\u003cTemplate\u003e getTemplateList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns the statistics data of Weme."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    Stats getStats();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns the count of a tag in the memeList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns -1 if the tag is not present in the memeList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    int getCountOfTag(Tag tag);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns a list of tags with their counts."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    List\u003cTagWithCount\u003e getTagsWithCountList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns a list of tags with their like counts."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    List\u003cTagWithLike\u003e getTagsWithLikeCountList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns records of Weme."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    Records getRecords();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the current meme creation session."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the current meme creation session"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    MemeCreation getMemeCreation();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 12,
      "moziliar": 21,
      "jonchan51": 9,
      "-": 10,
      "cutieprobe": 10,
      "gary-lgy": 15
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/Records.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Interface for storing all past records of command arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public interface Records {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getPaths();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getDescriptions();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getTags();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getNames();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getColors();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addPath(ImagePath path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addDescription(Description description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addName(Name name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addColor(Color color);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void resetRecords(Records records);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 38
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/RecordsManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * Stores all past records of command arguments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class RecordsManager implements Records {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e pathRecords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e descriptionRecords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e tagRecords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e nameRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e colorRecords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public RecordsManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.pathRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.descriptionRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.tagRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.nameRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.colorRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public RecordsManager(Set\u003cString\u003e pathRecords,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                          Set\u003cString\u003e descriptionRecords,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                          Set\u003cString\u003e tagRecords,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                          Set\u003cString\u003e nameRecords,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                          Set\u003cString\u003e colorRecords) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.pathRecords.addAll(pathRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.descriptionRecords.addAll(descriptionRecords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.tagRecords.addAll(tagRecords);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.nameRecords.addAll(nameRecords);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.colorRecords.addAll(colorRecords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public RecordsManager(Records records) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this(records.getPaths(), records.getDescriptions(), records.getTags(), records.getNames(), records.getColors());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getPaths() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new HashSet\u003c\u003e(pathRecords);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getDescriptions() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new HashSet\u003c\u003e(descriptionRecords);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new HashSet\u003c\u003e(tagRecords);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getNames() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new HashSet\u003c\u003e(nameRecords);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getColors() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new HashSet\u003c\u003e(colorRecords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addPath(ImagePath path) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        pathRecords.add(path.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addDescription(Description description) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (!description.toString().isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            descriptionRecords.add(description.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            tagRecords.add(tag.getTagName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addName(Name name) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        nameRecords.add(name.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addColor(Color color) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        colorRecords.add(color.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Resets the existing records of this {@code RecordsManager} with {@code newRecords}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void resetRecords(Records records) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        requireNonNull(records);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        pathRecords.clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        descriptionRecords.clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        tagRecords.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        nameRecords.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        colorRecords.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        pathRecords.addAll(records.getPaths());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        descriptionRecords.addAll(records.getDescriptions());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        tagRecords.addAll(records.getTags());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        nameRecords.addAll(records.getNames());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        colorRecords.addAll(records.getColors());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sb.append(\"All paths: \\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (String path: pathRecords) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            sb.append(path + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sb.append(\"All descriptions: \\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (String description: getDescriptions()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            sb.append(description + \"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sb.append(\"All tags: \\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (String tag: tagRecords) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            sb.append(tag + \"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sb.append(\"All names: \\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (String name: nameRecords) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            sb.append(name + \"\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sb.append(\"All colors: \\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        for (String color: colorRecords) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            sb.append(color + \"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 9,
      "cutieprobe": 139
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String EXPORT_PATH_KEY \u003d \"exportPath\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String DATA_FILE_PATH_KEY \u003d \"dataFilePath\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MEME_IMAGE_PATH_KEY \u003d \"memeImagePath\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String TEMPLATE_IMAGE_PATH_KEY \u003d \"templateImagePath\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Path dataFilePath \u003d Paths.get(\"data\" , \"weme.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Path memeImagePath \u003d Paths.get(\"data\", \"memes\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Path templateImagePath \u003d Paths.get(\"data\", \"templates\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Path exportFilePath \u003d Paths.get(System.getProperty(\"user.home\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setDataFilePath(newUserPrefs.getDataFilePath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setMemeImagePath(newUserPrefs.getMemeImagePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setTemplateImagePath(newUserPrefs.getTemplateImagePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        setExportPath(newUserPrefs.getExportPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Path getDataFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return dataFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(dataFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.dataFilePath \u003d dataFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Path getDefaultExportPath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return exportFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Path getMemeImagePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return memeImagePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setMemeImagePath(Path memeImagePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(memeImagePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.memeImagePath \u003d memeImagePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableMap\u003cString, String\u003e getObservableUserPreferences() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ObservableMap\u003cString, String\u003e observablePreferences \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        observablePreferences.put(EXPORT_PATH_KEY, exportFilePath.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        observablePreferences.put(DATA_FILE_PATH_KEY, dataFilePath.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        observablePreferences.put(MEME_IMAGE_PATH_KEY, memeImagePath.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        observablePreferences.put(TEMPLATE_IMAGE_PATH_KEY, templateImagePath.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return observablePreferences;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Path getTemplateImagePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return templateImagePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplateImagePath(Path templateImagePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(templateImagePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.templateImagePath \u003d templateImagePath;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void setExportPath(Path exportFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(exportFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.exportFilePath \u003d exportFilePath;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Path getExportPath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return exportFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 dataFilePath.equals(o.dataFilePath)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 memeImagePath.equals(o.memeImagePath)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 exportFilePath.equals(o.exportFilePath)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \u0026\u0026 templateImagePath.equals(o.templateImagePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return Objects.hash(guiSettings, dataFilePath, memeImagePath, templateImagePath, exportFilePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + dataFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        sb.append(\"\\nMemes image location : \" + memeImagePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        sb.append(\"\\nTemplate image location : \" + templateImagePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        sb.append(\"\\nExport Path directory : \" + exportFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 36,
      "jonchan51": 2,
      "-": 75,
      "gary-lgy": 37
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/VersionedWeme.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * {@code Weme} that keeps track of it\u0027s previous states."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class VersionedWeme extends Weme {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final List\u003cReadOnlyWeme\u003e versionedWemeStates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private int stateIndex \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final List\u003cString\u003e feedbackList \u003d new ArrayList\u003c\u003e(); // Feedback for undo redo command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public VersionedWeme(ReadOnlyWeme initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWemeStates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWemeStates.add(new Weme(initialState));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if has previous states to undo to."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return stateIndex \u003e 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if has previously undone states to redo to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return stateIndex \u003c versionedWemeStates.size() - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Saves the current state to the end of the state list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Wipes previously undone states."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param feedback the feedback of the last executed command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void commit(String feedback) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWemeStates.subList(stateIndex + 1, versionedWemeStates.size()).clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        feedbackList.subList(stateIndex, feedbackList.size()).clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        versionedWemeStates.add(new Weme(this));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        feedbackList.add(feedback);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        stateIndex++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Restores Weme to its previous state."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return the feedback to the user of the command just undone"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        stateIndex--;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        resetData(versionedWemeStates.get(stateIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return feedbackList.get(stateIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Restores Weme to its previously undone state."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return the feedback to the user of the command just redone"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        stateIndex++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        resetData(versionedWemeStates.get(stateIndex));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return feedbackList.get(stateIndex - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof VersionedWeme)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        VersionedWeme otherWeme \u003d (VersionedWeme) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return super.equals(otherWeme)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 versionedWemeStates.equals(otherWeme.versionedWemeStates)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 stateIndex \u003d\u003d otherWeme.stateIndex"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 feedbackList.equals(otherWeme.feedbackList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Thrown when unable to undo."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            super(\"There are no commands to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Thrown when unable to redo."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            super(\"There are no commands to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 110
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/Weme.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.UniqueMemeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.Stats;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.StatsManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithCount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithLike;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.UniqueTemplateList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.util.ImageUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Wraps all data at Weme level"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Duplicates are not allowed (by {@link Meme#isSameMeme(Meme)} and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * {@link Template#isSameTemplate(Template)} comparisons)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Weme implements ReadOnlyWeme {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final UniqueMemeList memes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final UniqueMemeList exportList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final UniqueMemeList importList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final UniqueTemplateList templates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final Stats stats;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private final Records records;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final MemeCreation memeCreation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        memes \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templates \u003d new UniqueTemplateList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        stats \u003d new StatsManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records \u003d new RecordsManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeCreation \u003d new MemeCreation();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Weme() {}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates an Weme using the Memes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Weme(ReadOnlyWeme toBeCopied) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    //// overwrite operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void setStats(Stats replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        stats.resetData(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void setRecords(Records replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records.resetRecords(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Resets the existing data of this {@code Weme} with {@code newData}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void resetData(ReadOnlyWeme newData) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setMemes(newData.getMemeList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setTemplates(newData.getTemplateList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setStats(newData.getStats());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        updateStats(newData.getMemeList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setRecords(newData.getRecords());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setMemeCreation(newData.getMemeCreation());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Updates {@code Stats} with the latest {@code MemeList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void updateStats(List\u003cMeme\u003e memeList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (Meme meme : memeList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            if (stats.getLikesByMeme(meme) \u003d\u003d Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                stats.addDefaultLikeData(meme);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Replaces the contents of the meme list with {@code memes}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code memes} must not contain duplicate memes."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes(List\u003cMeme\u003e memes) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.memes.setMemes(memes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replaces the contents of the template list with {@code templates}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * {@code templates} must not contain duplicate templates."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplates(List\u003cTemplate\u003e templates) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.templates.setTemplates(templates);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void startMemeCreation(Template template) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeCreation.startWithTemplate(template);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    //// meme-level operations"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if a meme with the same identity as {@code meme} exists in Weme."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean hasMeme(Meme meme) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(meme);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return memes.contains(meme);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Stages a meme to the staging area."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param meme meme to stage"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void stageMeme(Meme meme) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportList.add(meme);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Unstages a meme from the staging area."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param meme meme to unstage"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void unstageMeme(Meme meme) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportList.remove(meme);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Transfers all memes from importList into storage."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void importMeme(Path internalImagePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        for (Meme meme : importList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            Meme copiedMeme \u003d ImageUtil.copyMeme(meme, internalImagePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            addMeme(copiedMeme);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void clearImportList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importList.clear();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void clearExportList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportList.clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Loads meme from given directory to staging area."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param pathList"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void loadMemes(List\u003cPath\u003e pathList) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        for (Path path : pathList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            Meme meme \u003d new Meme(new ImagePath(path.toString()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            importList.add(meme);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public List\u003cPath\u003e getExportPathList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return exportList.asPathList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if a template with the same identity as {@code template} exists in Weme."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean hasTemplate(Template template) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(template);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return templates.contains(template);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Adds a meme to Weme."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme must not already exist in Weme."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void addMeme(Meme m) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        memes.add(m);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        stats.addDefaultLikeData(m);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Adds a template to Weme."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The template must not already exist in Weme."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void addTemplate(Template p) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templates.add(p);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Replaces the given meme {@code target} in the list with {@code editedMeme}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code target} must exist in Weme."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme identity of {@code editedMeme} must not be the same as another existing meme in Weme."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme(Meme target, Meme editedMeme) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireNonNull(editedMeme);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        memes.setMeme(target, editedMeme);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Replaces the given meme {@code target} in the list with {@code editedMeme}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * {@code target} must exist in Weme."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * The meme identity of {@code editedMeme} must not be the same as another existing meme in Weme."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void setImportedMeme(Meme target, Meme editedMeme) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(editedMeme);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importList.setMeme(target, editedMeme);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replaces the given template {@code target} in the list with {@code editedTemplate}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code target} must exist in Weme."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The template identity of {@code editedTemplate} must not be the same as another existing template in the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Weme."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplate(Template target, Template editedTemplate) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(editedTemplate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templates.setTemplate(target, editedTemplate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Removes {@code key} from this {@code Weme}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code key} must exist in Weme."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void removeMeme(Meme key) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        memes.remove(key);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Removes {@code key} from this {@code Weme}."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * {@code key} must exist in Weme."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void removeImportedMeme(Meme key) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importList.remove(key);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Removes {@code key} from this {@code Weme}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code key} must exist in Weme."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void removeTemplate(Template key) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templates.remove(key);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    //// Meme Creation methods"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeCreation getMemeCreation() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return memeCreation;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replaces the current meme creation session with {@code memeCreation}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setMemeCreation(MemeCreation replacement) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeCreation.resetSession(replacement);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void abortMemeCreation() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeCreation.abort();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return memes.asUnmodifiableObservableList().size() + \" memes and \""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                + templates.asUnmodifiableObservableList().size() + \" templates\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public ObservableList\u003cMeme\u003e getMemeList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return memes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableList\u003cMeme\u003e getStagedMemeList() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return exportList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ObservableList\u003cMeme\u003e getImportList() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return importList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public ObservableList\u003cTemplate\u003e getTemplateList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return templates.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Stats data Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public Stats getStats() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return stats.getStats();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return stats.getLikesByMeme(meme);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return stats.getObservableLikeData();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void incrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        stats.incrementMemeLikeCount(meme);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void decrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        stats.decrementMemeLikeCount(meme);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void clearMemeStats(Meme meme) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        stats.deleteLikesByMeme(meme);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag Data Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getCountOfTag(Tag tag) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return stats.getCountOfTag(getMemeList(), tag);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public List\u003cTagWithCount\u003e getTagsWithCountList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return stats.getTagsWithCountList(getMemeList());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Records Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public List\u003cTagWithLike\u003e getTagsWithLikeCountList() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return stats.getTagsWithLikeCountList(getMemeList());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    };"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Records getRecords() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return records;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getPaths() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return records.getPaths();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getDescriptions() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return records.getDescriptions();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return records.getTags();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getNames() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return records.getNames();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Set\u003cString\u003e getColors() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return records.getColors();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addPath(ImagePath path) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records.addPath(path);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addDescription(Description description) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records.addDescription(description);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records.addTags(tags);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addName(Name name) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records.addName(name);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public void addColor(Color color) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records.addColor(color);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof Weme)) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme otherWeme \u003d (Weme) other;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return memes.equals(otherWeme.memes)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            \u0026\u0026 templates.equals(otherWeme.templates);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return Objects.hash(memes, templates);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 89,
      "moziliar": 56,
      "jonchan51": 45,
      "-": 71,
      "cutieprobe": 68,
      "gary-lgy": 97
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/imagePath/ImagePath.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.imagePath;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Wrapper class for Path in {@code Meme}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Acts as the identity reference to a {@code Meme}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class ImagePath {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File not found or invalid file path given.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public final Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs an {@code ImagePath}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param relativeFilePath A valid relative file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public ImagePath(String relativeFilePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(relativeFilePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        checkArgument(isValidFilePath(relativeFilePath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.filePath \u003d Paths.get(relativeFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns true if the given string is a valid Path."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static boolean isValidFilePath(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // Paths.get() throws InvalidPathException when the path is a invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // It is caught and becomes return false."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return FileUtil.isValidPath(test)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    \u0026\u0026 FileUtil.isFileExists(Paths.get(test));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } catch (InvalidPathException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns a URL object representing this {@code ImagePath}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return a URL object representing this {@code ImagePath}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public URL toUrl() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return filePath.toUri().toURL();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalArgumentException(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return filePath.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                || (other instanceof ImagePath // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                \u0026\u0026 toString().equals(((ImagePath) other).toString())); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 65,
      "jonchan51": 1,
      "gary-lgy": 16
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/meme/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents a Meme\u0027s description in Weme."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, including empty input\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The first character of description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param description A valid meme description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 13,
      "jonchan51": 4,
      "-": 39,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/meme/Meme.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Archivable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents a Meme in Weme."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Meme implements Archivable {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final ImagePath imagePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final boolean isArchived;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Meme(ImagePath imagePath, Description description, Set\u003cTag\u003e tags, boolean isArchived) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireAllNonNull(imagePath, description, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Overloaded Constructor for unarchived memes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Meme(ImagePath imagePath, Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(imagePath, description, tags, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Overloaded Constructor used to generate imported memes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Meme(ImagePath imagePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(imagePath, new Description(\"\"), new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImagePath getImagePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return imagePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean isArchived() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return isArchived;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if both memes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * This defines a weaker notion of equality between two memes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean isSameMeme(Meme otherMeme) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (otherMeme \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return otherMeme !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 otherMeme.getImagePath().equals(getImagePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if both memes have the same identity and data fields."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * This defines a stronger notion of equality between two memes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof Meme)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme otherMeme \u003d (Meme) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return otherMeme.getImagePath().equals(getImagePath())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 otherMeme.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 otherMeme.getTags().equals(getTags())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 otherMeme.isArchived() \u003d\u003d isArchived();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return Objects.hash(imagePath, description, tags, isArchived);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        builder.append(\" Description: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 18,
      "moziliar": 2,
      "jonchan51": 35,
      "-": 67,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/meme/PathMatchesPathPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Tests that a {@code Meme}\u0027s {@code Path} matches a path given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class PathMatchesPathPredicate implements Predicate\u003cMeme\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final ImagePath path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public PathMatchesPathPredicate(ImagePath path) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public boolean test(Meme meme) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return path.equals(meme.getImagePath());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                || (other instanceof PathMatchesPathPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                \u0026\u0026 path.equals(((PathMatchesPathPredicate) other).path)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "moziliar": 26,
      "gary-lgy": 2
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/meme/TagContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Tests that a {@code Meme}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cMeme\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public boolean test(Meme meme) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                        meme.getTags().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                                .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 34
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/meme/UniqueMemeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.exceptions.DuplicateMemeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.exceptions.MemeNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A list of memes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A meme is considered unique by comparing using {@code Meme#isSameMeme(Meme)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * memes uses Meme#isSameMeme(Meme) for equality so as to ensure that the meme being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * unique in terms of identity in the UniqueMemeList. However, the removal of a meme uses Meme#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * as to ensure that the meme with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * @see Meme#isSameMeme(Meme)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class UniqueMemeList implements Iterable\u003cMeme\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final ObservableList\u003cMeme\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final ObservableList\u003cMeme\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if the list contains an equivalent meme as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean contains(Meme toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeme);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Adds a meme to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void add(Meme toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DuplicateMemeException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * List representation of the list of Meme paths."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public List\u003cPath\u003e asPathList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return internalList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .map(meme -\u003e meme.getImagePath().getFilePath())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Replaces the meme {@code target} in the list with {@code editedMeme}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme identity of {@code editedMeme} must not be the same as another existing meme in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme(Meme target, Meme editedMeme) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireAllNonNull(target, editedMeme);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new MemeNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!target.isSameMeme(editedMeme) \u0026\u0026 contains(editedMeme)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DuplicateMemeException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        internalList.set(index, editedMeme);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Removes the equivalent meme from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * The meme must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void remove(Meme toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new MemeNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Clears all the memes in the import list after successful import"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes(UniqueMemeList replacement) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Replaces the contents of this list with {@code memes}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code memes} must not contain duplicate memes."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes(List\u003cMeme\u003e memes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireAllNonNull(memes);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!memesAreUnique(memes)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DuplicateMemeException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        internalList.setAll(memes);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public ObservableList\u003cMeme\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Iterator\u003cMeme\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                || (other instanceof UniqueMemeList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueMemeList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if {@code memes} contains only unique memes."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private boolean memesAreUnique(List\u003cMeme\u003e memes) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (int i \u003d 0; i \u003c memes.size() - 1; i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            for (int j \u003d i + 1; j \u003c memes.size(); j++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (memes.get(i).isSameMeme(memes.get(j))) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 19,
      "jonchan51": 49,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/meme/exceptions/DuplicateMemeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.meme.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Signals that the operation will result in duplicate Memes (Memes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class DuplicateMemeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public DuplicateMemeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(\"Operation would result in duplicate memes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 11
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/meme/exceptions/MemeNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.meme.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Signals that the operation is unable to find the specified meme."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/LikeData.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * The like data storage in Stats."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class LikeData {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final ObservableMap\u003cString, SimpleIntegerProperty\u003e likeMap \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final ObservableMap\u003cString, SimpleIntegerProperty\u003e unmodifiableLikeMap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            FXCollections.unmodifiableObservableMap(likeMap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs an empty LikeData"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public LikeData() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a LikeData filled with the provided likeMap"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public LikeData(ObservableMap\u003cString, SimpleIntegerProperty\u003e likeMap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        setLikeMap(likeMap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Sets the current set of {@code LikeData} with a replacement."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void setLikeMap(Map\u003cString, SimpleIntegerProperty\u003e replacement) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        requireAllNonNull(replacement);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        likeMap.clear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeMap.putAll(replacement);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Sets like count of a meme."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void setLikesByMemeRef(String memeRef, int change) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        SimpleIntegerProperty currLikes \u003d likeMap.getOrDefault(memeRef, new SimpleIntegerProperty(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        currLikes.set(currLikes.get() + change);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!likeMap.containsKey(memeRef)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            likeMap.put(memeRef, currLikes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // forces the map to update as changes to the individual SimpleIntegerProperty value is not reflected as"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // change to the map."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        forceUpdate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Forces the map to update."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void forceUpdate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeMap.put(\"update\", new SimpleIntegerProperty(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeMap.remove(\"update\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns the like count of a meme by its URL."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public int getLikesByMemeRef(String memeRef) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return likeMap.getOrDefault(memeRef, new SimpleIntegerProperty(Integer.MAX_VALUE)).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns an unmodifiable view of LikeData."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return unmodifiableLikeMap;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Deletes like count of a meme by its URL."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param memeRef"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void deleteLikesByMemeRef(String memeRef) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeMap.remove(memeRef);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Map\u003cString, SimpleIntegerProperty\u003e getCopy() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Map\u003cString, SimpleIntegerProperty\u003e copy \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (Map.Entry\u003cString, SimpleIntegerProperty\u003e entry : likeMap.entrySet()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            copy.put(entry.getKey(), new SimpleIntegerProperty(entry.getValue().get()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 74,
      "jonchan51": 21
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/LikeManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Implementation of Like interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class LikeManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final int INCREMENT \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final int DECREMENT \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private LikeData data;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public LikeManager(LikeData data) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireAllNonNull(data);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        logger.fine(\"Initializing with like data: \" + data);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.data \u003d new LikeData(data.getObservableLikeData());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public LikeManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.data \u003d new LikeData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns the number of likes of a meme."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public int getLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String memeRef \u003d meme.getImagePath().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return data.getLikesByMemeRef(memeRef);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns an unmodifiable view of {@code LikeData}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return data.getObservableLikeData();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Replace the current like data with a new set of data."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void setLikeData(Map\u003cString, SimpleIntegerProperty\u003e replacement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        data.setLikeMap(replacement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Initializes the like count of a meme."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void addDefaultLikeData(Meme meme) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String memeRef \u003d meme.getImagePath().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        data.setLikesByMemeRef(memeRef, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Increments a meme\u0027s like count by 1."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void incrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String memeRef \u003d meme.getImagePath().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        data.setLikesByMemeRef(memeRef, INCREMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Decrements a meme\u0027s like count by 1."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void decrementLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String memeRef \u003d meme.getImagePath().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        data.setLikesByMemeRef(memeRef, DECREMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Deletes like data of a meme when it gets deleted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void deleteLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String memeRef \u003d meme.getImagePath().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        data.deleteLikesByMemeRef(memeRef);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Map\u003cString, SimpleIntegerProperty\u003e getCopyLikeData() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return data.getCopy();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 4,
      "moziliar": 82,
      "jonchan51": 6,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/Stats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Interface for statistics data for Weme."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public interface Stats {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void resetData(Stats stats);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    Stats getStats();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Like Data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns the number of likes of a meme."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    int getLikesByMeme(Meme meme);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Replaces the contents of the like data with {@code likeData}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void setLikeData(Map\u003cString, SimpleIntegerProperty\u003e likeData);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns an unmodifiable view of LikeData."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Adds default like when the like data of a meme is not captured."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void addDefaultLikeData(Meme meme);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Increments like count of a meme."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void incrementMemeLikeCount(Meme meme);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Increments like count of a meme."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void decrementMemeLikeCount(Meme meme);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Deletes like count of a meme from likeData."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    void deleteLikesByMeme(Meme meme);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag Data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getCountOfTag(List\u003cMeme\u003e memeList, Tag tag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns a list of tags with their use counts in descending order."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    List\u003cTagWithCount\u003e getTagsWithCountList(List\u003cMeme\u003e memeList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns a list of tags with their like counts in descending order."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    List\u003cTagWithLike\u003e getTagsWithLikeCountList(List\u003cMeme\u003e memeList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 63,
      "jonchan51": 4,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/StatsManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Manager class for statistics data for Weme."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class StatsManager implements Stats {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private LikeManager likeManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private TagManager tagManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs a {@code StatsManager} without data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public StatsManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.likeManager \u003d new LikeManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.tagManager \u003d new TagManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs a {@code Stats Manager} with a {@code stats} data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public StatsManager(Stats stats) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        resetData(stats);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Like Data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void addDefaultLikeData(Meme meme) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeManager.addDefaultLikeData(meme);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void setLikeData(Map\u003cString, SimpleIntegerProperty\u003e likeData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        likeManager.setLikeData(likeData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return likeManager.getLikesByMeme(meme);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return likeManager.getObservableLikeData();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void incrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeManager.incrementMemeLikeCount(meme);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void decrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeManager.decrementLikesByMeme(meme);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void deleteLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeManager.deleteLikesByMeme(meme);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag Data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getCountOfTag(List\u003cMeme\u003e memeList, Tag tag) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return tagManager.getCountOfTag(memeList, tag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public List\u003cTagWithCount\u003e getTagsWithCountList(List\u003cMeme\u003e memeList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return tagManager.getTagsWithCountList(memeList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public List\u003cTagWithLike\u003e getTagsWithLikeCountList(List\u003cMeme\u003e memeList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return tagManager.getTagsWithLike(memeList, likeManager);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Resets the existing data of this {@code StatsManager} with {@code newData}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void resetData(Stats newData) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        setLikeData(newData.getObservableLikeData());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns a copy of the current Stats."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public Stats getStats() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Stats newStats \u003d new StatsManager(this);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // needs a full copy of likedata using it\u0027s own SIP"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        newStats.setLikeData(likeManager.getCopyLikeData());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return newStats;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 94,
      "jonchan51": 7,
      "cutieprobe": 11
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/TagManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Tag manager in Statistics feature that reads tags from a {@code memeList}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class TagManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final int INITIAL_LIKE_COUNT \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final List\u003cTagWithCount\u003e tagsWithCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final List\u003cTagWithLike\u003e tagsWithLike;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public TagManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        tagsWithCount \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        tagsWithLike \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public Set\u003cTag\u003e getTagsInSet() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns the count of a tag in the memeList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Returns -1 if the tag is not present in the memeList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public int getCountOfTag(List\u003cMeme\u003e memeList, Tag tag) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return getTagsWithCountList(memeList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .filter(t -\u003e t.getTag().equals(tag))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .map(t -\u003e t.getData())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .reduce((t1, t2) -\u003e t1)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .orElse(-1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Returns {@code TagWithCount} in List."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public List\u003cTagWithCount\u003e getTagsWithCountList(List\u003cMeme\u003e memeList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        parseMemeListForTags(memeList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return tagsWithCount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public List\u003cTagWithLike\u003e getTagsWithLike(List\u003cMeme\u003e memeList, LikeManager likeData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        parseMemeListAndLikeDataForTags(memeList, likeData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return tagsWithLike;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Resets the data."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void purgeData() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        tags.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        tagsWithCount.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        tagsWithLike.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses a {@code memeList} for tags and their occurrence."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void parseMemeListForTags(List\u003cMeme\u003e memeList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        purgeData();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Map\u003cTag, Integer\u003e tagToCount \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Set\u003cTag\u003e memeTags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (Meme meme : memeList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            memeTags \u003d meme.getTags();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            tags.addAll(memeTags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            for (Tag tag : memeTags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                int count \u003d tagToCount.getOrDefault(tag, INITIAL_LIKE_COUNT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                tagToCount.put(tag, count + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (Map.Entry\u003cTag, Integer\u003e mapEntry : tagToCount.entrySet()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            tagsWithCount.add(new TagWithCount(mapEntry.getKey(), mapEntry.getValue()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Collections.sort(tagsWithCount);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Parses a {@code ReadOnlyMemeBook} for tags and their like counts."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void parseMemeListAndLikeDataForTags(List\u003cMeme\u003e memeList, LikeManager likeData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        purgeData();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Map\u003cTag, Integer\u003e tagToLike \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        int likeCount;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (Meme meme : memeList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            likeCount \u003d likeData.getLikesByMeme(meme);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            tags.addAll(meme.getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            for (Tag tag : tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                tagToLike.put(tag, tagToLike.getOrDefault(tag, INITIAL_LIKE_COUNT) + likeCount);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (Map.Entry\u003cTag, Integer\u003e mapEntry : tagToLike.entrySet()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            tagsWithLike.add(new TagWithLike(mapEntry.getKey(), mapEntry.getValue()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Collections.sort(tagsWithLike);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 103,
      "jonchan51": 2,
      "cutieprobe": 12
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/TagWithCount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * A wrapper class of {@code Tag} that carries the number of occurrence of such a tag"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * in a {@code memeList}for {@code TagManager} in statistics."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class TagWithCount extends TagWithStats implements Comparable\u003cTagWithCount\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs a {@code TagWithCount}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public TagWithCount(Tag tag, int count) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        super(tag, count);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return getTag().tagName + \" count: \" + getData();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public int compareTo(TagWithCount o) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        int count \u003d getData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        int targetCount \u003d o.getData();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // Reverse the order so that tags with more occurrence appears before."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (count \u003c targetCount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } else if (count \u003e targetCount) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return getTag().tagName.compareTo(o.getTag().tagName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 35,
      "jonchan51": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/TagWithLike.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * A wrapper class of {@code Tag} that carries the number of occurrence of such a tag"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * in a {@code MemeBook}for {@code TagManager} in statistics."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class TagWithLike extends TagWithStats implements Comparable\u003cTagWithLike\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs a {@code TagWithCount}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public TagWithLike(Tag tag, int like) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        super(tag, like);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return getTag().tagName + \" likes: \" + getData();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public int compareTo(TagWithLike o) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        int count \u003d getData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        int targetCount \u003d o.getData();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // Reverse the order so that tags with more likes appears before."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (count \u003c targetCount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } else if (count \u003e targetCount) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return getTag().tagName.compareTo(o.getTag().tagName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 36
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/statistics/TagWithStats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * A wrapper class of {@code Tag} that carries the number of occurrence of such a tag"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * in a {@code MemeBook}for {@code TagManager} in statistics."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public abstract class TagWithStats {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private int data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs a {@code TagWithStats}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public TagWithStats(Tag tag, int data) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public int getData() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 34
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents a Tag in Weme."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 51,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/Coordinates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Represents a pair of coordinates."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class Coordinates {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final float x;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final float y;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Coordinates(float x, float y) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.x \u003d x;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.y \u003d y;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public float getX() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public float getY() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return y;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return String.format(\"(%.2f, %.2f)\", x, y);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return Objects.hash(x, y);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof Coordinates)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Coordinates otherCoorinates \u003d (Coordinates) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return x \u003d\u003d otherCoorinates.x"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 y \u003d\u003d otherCoorinates.y;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 51
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/MemeCreation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.Font;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.FontMetrics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.Graphics2D;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.geom.Rectangle2D;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.exceptions.MemeTextNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.util.ImageUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Represents a meme creation session."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeCreation {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final ObservableList\u003cMemeText\u003e textList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final ObservableList\u003cMemeText\u003e unmodifiableObservableTextList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private BufferedImage initialImage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeCreation() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        textList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        unmodifiableObservableTextList \u003d FXCollections.unmodifiableObservableList(textList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        initialImage \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Start a meme creation session with the given template as the base image."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param template the template to use as the base image"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws IOException if fails to read the image of the template"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void startWithTemplate(Template template) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Path templateImagePath \u003d template.getImagePath().getFilePath().toAbsolutePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        initialImage \u003d ImageIO.read(templateImagePath.toFile());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Adds text to the meme currently being generated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param text specified the text to be added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws IllegalValueException if the text added will exceed image boundary"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void addText(MemeText text) throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!isWithinImageBoundary(getTextBoundary(text))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalValueException(\"Text exceeds image boundary\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        textList.add(text);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replaces a meme text in the list with a new meme text."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param target      the {@code MemeText} to replace"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param replacement the {@code MemeText} to use as replacement"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws IllegalValueException if the new text will exceed image boundary"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setText(MemeText target, MemeText replacement) throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(target, replacement);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int index \u003d textList.indexOf(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new MemeTextNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!isWithinImageBoundary(getTextBoundary(replacement))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalValueException(\"Text exceeds image boundary\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        textList.set(index, replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Removes the meme text from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The meme text must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void remove(MemeText toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!textList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new MemeTextNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public ObservableList\u003cMemeText\u003e getMemeTextList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return unmodifiableObservableTextList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private boolean isWithinImageBoundary(TextBoundaries boundaries) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return boundaries.getX1() \u003e\u003d 0 \u0026\u0026 boundaries.getX2() \u003c\u003d initialImage.getWidth()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 boundaries.getY1() \u003e\u003d 0 \u0026\u0026 boundaries.getY2() \u003c\u003d initialImage.getHeight();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the boundary coordinates of the text on the template."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param text the text to be placed on the template"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return a {@code TextBoundaries} object denoting the boundary coordinates of the text"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private TextBoundaries getTextBoundary(MemeText text) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Graphics2D graphics \u003d (Graphics2D) initialImage.getGraphics();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        graphics.setFont(new Font(Font.SANS_SERIF, text.getStyle(), text.getSize()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        FontMetrics fontMetrics \u003d graphics.getFontMetrics();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Rectangle2D rect \u003d fontMetrics.getStringBounds(text.getText(), graphics);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int imageWidth \u003d initialImage.getWidth();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int imageHeight \u003d initialImage.getHeight();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int textWidth \u003d (int) rect.getWidth();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int textHeight \u003d (int) rect.getHeight();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int startOfTextX \u003d (int) (text.getX() * imageWidth - textWidth / 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int startOfTextY \u003d (int) (text.getY() * imageHeight - textHeight / 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int endOfTextX \u003d startOfTextX + textWidth;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int endOfTextY \u003d startOfTextY + textHeight;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new TextBoundaries(startOfTextX, endOfTextX, startOfTextY, endOfTextY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Abort the meme creation session."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void abort() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Clears this creation session"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private void clear() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        textList.clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (initialImage !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            initialImage.getGraphics().dispose();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            initialImage \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Optional\u003cBufferedImage\u003e getCurrentImage() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.of(render());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Renders the current meme image."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The current meme image is generated from the initial image of the template plus all the {@code MemeText} added."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the current meme image"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private BufferedImage render() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (initialImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new RuntimeException(\"Initial image should have been initialized.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        BufferedImage newImage \u003d ImageUtil.copyBufferedImage(initialImage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Graphics2D graphics \u003d (Graphics2D) newImage.getGraphics();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (MemeText text : textList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            TextBoundaries boundaries \u003d getTextBoundary(text);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            int x \u003d boundaries.getX1();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            int y \u003d (boundaries.getY1() + boundaries.getY2()) / 2;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            graphics.setFont(new Font(Font.SANS_SERIF, text.getStyle(), text.getSize()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            graphics.setColor(text.getColor());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            graphics.drawString(text.getText(), x, y);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return newImage;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Generates the meme and writes it to the specified path. The current session will be cleared afterwards."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param destination the path to write the meme image file"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws IOException if an error occurred during IO"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void generate(Path destination) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ImageIO.write(render(), \"jpg\", destination.toFile());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        clear();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replace this meme creation session with {@code otherSession}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param otherSession the replacement"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void resetSession(MemeCreation otherSession) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        textList.clear();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        textList.addAll(otherSession.textList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        initialImage \u003d ImageUtil.copyBufferedImage(otherSession.initialImage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Represents the boundary coordinates of a piece of text."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final class TextBoundaries {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private final int x1;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private final int x2;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private final int y1;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private final int y2;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TextBoundaries(int x1, int x2, int y1, int y2) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.x1 \u003d x1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.x2 \u003d x2;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.y1 \u003d y1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.y2 \u003d y2;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int getX1() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return x1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int getX2() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return x2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int getY1() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return y1;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int getY2() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return y2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 234
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/MemeText.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Represents a piece of text on a meme."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeText {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final String text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Coordinates coordinates;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final MemeTextColor color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final MemeTextStyle style;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final MemeTextSize size;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeText(String value, Coordinates coordinates,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    MemeTextColor color, Set\u003cMemeTextStyle\u003e styles, MemeTextSize size) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(value, coordinates, color, styles, size);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.text \u003d value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.style \u003d MemeTextStyle.combine(styles);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeText(String value, Coordinates coordinates,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    MemeTextColor color, MemeTextStyle style, MemeTextSize size) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this(value, coordinates, color, Set.of(style), size);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public float getX() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return coordinates.getX();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public float getY() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return coordinates.getY();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Coordinates getCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return coordinates;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Color getColor() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return color.getColor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextColor getMemeTextColor() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return color;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int getStyle() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return style.getStyle();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextStyle getMemeTextStyle() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return style;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return size.getSize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextSize getMemeTextSize() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return text + \" \" + coordinates.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof MemeText)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeText otherMemeText \u003d (MemeText) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return text.equals(otherMemeText.text)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 coordinates.equals(otherMemeText.coordinates)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 color.equals(otherMemeText.color)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 style.equals(otherMemeText.style)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 size.equals(otherMemeText.size);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 96
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/MemeTextColor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Represents a {@code MemeText}\u0027s color."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMemeTextColor}}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeTextColor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Color must be either a valid color name, or a HEX string \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        + \"denoting the RGB values\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final MemeTextColor DEFAULT_MEME_TEXT_COLOR \u003d new MemeTextColor(\"black\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Color color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Constructs a {@code MemeTextColor}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param color A valid meme text color"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextColor(String color) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(color);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        checkArgument(isValidMemeTextColor(color), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.color \u003d getColorByName(color).orElseGet(() -\u003e getColorByHex(color).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextColor(Color color) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(color);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if a given string is a valid meme text color."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static boolean isValidMemeTextColor(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return getColorByName(test).isPresent() || getColorByHex(test).isPresent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static Optional\u003cColor\u003e getColorByHex(String hex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.of(Color.decode(hex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static Optional\u003cColor\u003e getColorByName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            // Use javafx.scene.paint.Color because it supports more color names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            javafx.scene.paint.Color fxColor \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                (javafx.scene.paint.Color) javafx.scene.paint.Color.class.getField(name.toUpperCase()).get(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Color awtColor \u003d new Color((float) fxColor.getRed(), (float) fxColor.getGreen(), (float) fxColor.getBlue(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                (float) fxColor.getOpacity());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.of(awtColor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the underlying {@link java.awt.Color}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the underlying {@link java.awt.Color}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Color getColor() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return color;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || (other instanceof MemeTextColor // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 color.equals(((MemeTextColor) other).color)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return color.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 85
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/MemeTextSize.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Represents a {@code MemeText}\u0027s font size."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * 6 sizes are possible, with 1 being the smallest and 6 being the largest."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFontSize}}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeTextSize {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Font size must be an integer from 1 to 6\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final MemeTextSize DEFAULT_MEME_TEXT_SIZE \u003d new MemeTextSize(\"3\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Constructs a {@code MemeTextSize}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param color A valid meme text color"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextSize(String size) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        checkArgument(isValidMemeTextSize(size), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.size \u003d Integer.parseInt(size);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if a given string is a valid meme text size."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static boolean isValidMemeTextSize(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            int s \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return 1 \u003c\u003d s \u0026\u0026 s \u003c\u003d 6;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return (size - 1) * 20 + 50;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || (other instanceof MemeTextSize // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 size \u003d\u003d ((MemeTextSize) other).size); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return Objects.hash(size);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 56
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/MemeTextStyle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.Font;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Represents a {@code MemeText}\u0027s text style, i.e. bold, italic, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMemeTextStyle}}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeTextStyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Style must be one of plain, bold, italic, or their combination\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final MemeTextStyle DEFAULT_MEME_TEXT_STYLE \u003d new MemeTextStyle(Font.PLAIN);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final Map\u003cString, Integer\u003e STRING_STYLE_MAP \u003d Map.of("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \"plain\", Font.PLAIN,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \"bold\", Font.BOLD,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \"italic\", Font.ITALIC"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private int style;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Constructs a {@code MemeTextStyle}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param color A valid meme text color"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextStyle(String style) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(style);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        checkArgument(isValidMemeTextStyle(style), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.style \u003d parseStyle(style).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Constructs a {@code MemeTextStyle} whose value is {@code style}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * style is assumed to be a valid style, otherwise it will be replaced by plain style."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param style the value of this style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private MemeTextStyle(int style) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.style \u003d style;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Parses {@code style} into an integer representing the font style, as specified in {@link java.awt.Font}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param style the string to parse"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the parsed font style, or {@link Optional#empty} if parsing fails."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static Optional\u003cInteger\u003e parseStyle(String style) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String s \u003d style.trim().toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (STRING_STYLE_MAP.containsKey(s)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.of(STRING_STYLE_MAP.get(s));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if a given string is a valid meme text style."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static boolean isValidMemeTextStyle(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return parseStyle(test).isPresent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Combines many styles and return the combined style."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param styles the styles to combine"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the combined style"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static MemeTextStyle combine(Collection\u003cMemeTextStyle\u003e styles) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int result \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (MemeTextStyle s : styles) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            result |\u003d s.style;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new MemeTextStyle(result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int getStyle() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return style;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || (other instanceof MemeTextStyle // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 style \u003d\u003d ((MemeTextStyle) other).style); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return Objects.hash(style);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 102
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents a Template\u0027s name in Weme."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Names should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Name should not be blank."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"..*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param name A valid template name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "gary-lgy": 55
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/Template.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Archivable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents a meme template in Weme."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Template implements Archivable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final ImagePath imagePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final boolean isArchived;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Template(Name name, ImagePath imagePath, boolean isArchived) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        requireAllNonNull(imagePath, name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Template(Name name, ImagePath imagePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(name, imagePath, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImagePath getImagePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return imagePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean isArchived() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return isArchived;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if both templates have either the same name or the same image path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * This defines a stronger notion of equality between two templates."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean isSameTemplate(Template otherTemplate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (otherTemplate \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return otherTemplate !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 (otherTemplate.getName().equals(getName())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            || otherTemplate.getImagePath().equals(getImagePath()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if both memes have the same identity and data fields."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * This defines a stronger notion of equality between two memes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof Template)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Template otherTemplate \u003d (Template) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return otherTemplate.getName().equals(getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u0026\u0026 otherTemplate.getImagePath().equals(getImagePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return Objects.hash(name, imagePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return \" Name: \" + getName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 8,
      "jonchan51": 14,
      "gary-lgy": 70
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/UniqueTemplateList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.exceptions.DuplicateTemplateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.exceptions.TemplateNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * A list of templates that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * A template is considered unique by comparing using {@link Template#isSameTemplate(Template)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * updating of templates uses {@link Template#isSameTemplate(Template)} for equality so as to ensure that the template"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueTemplateList. However, the removal of a template"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * uses {@link Template#equals(Object)} so as to ensure that the template with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * @see Template#isSameTemplate(Template)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class UniqueTemplateList implements Iterable\u003cTemplate\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final ObservableList\u003cTemplate\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final ObservableList\u003cTemplate\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if the list contains an equivalent template as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean contains(Template toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTemplate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Adds a template to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The template must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void add(Template toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new DuplicateTemplateException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replaces the template {@code target} in the list with {@code editedTemplate}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The template identity of {@code editedTemplate} must not be the same as another existing template in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplate(Template target, Template editedTemplate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(target, editedTemplate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new TemplateNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!target.isSameTemplate(editedTemplate) \u0026\u0026 contains(editedTemplate)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new DuplicateTemplateException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        internalList.set(index, editedTemplate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Removes the equivalent template from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * The template must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void remove(Template toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new TemplateNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplates(UniqueTemplateList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Replaces the contents of this list with {@code templates}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * {@code templates} must not contain duplicate templates."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplates(List\u003cTemplate\u003e templates) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        requireAllNonNull(templates);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!templatesAreUnique(templates)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new DuplicateTemplateException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        internalList.setAll(templates);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public ObservableList\u003cTemplate\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Iterator\u003cTemplate\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            || (other instanceof UniqueTemplateList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTemplateList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns true if {@code templates} contains only unique templates."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private boolean templatesAreUnique(List\u003cTemplate\u003e templates) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (int i \u003d 0; i \u003c templates.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c templates.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                if (templates.get(i).isSameTemplate(templates.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 137
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/exceptions/DuplicateTemplateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Signals that the operation will result in duplicate Templates (Templates are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class DuplicateTemplateException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public DuplicateTemplateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        super(\"Operation would result in duplicate templates\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 12
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/exceptions/MemeTextNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Signals that the operation is unable to find the specified meme text."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeTextNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 6
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/template/exceptions/TemplateNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.template.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Signals that the operation is unable to find the specified template."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 7
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/util/ImageUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.image.ColorModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.image.WritableRaster;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * A utility class for copying {@code Meme}s and {@code Template}s."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class ImageUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Copies the image of {@code toCopy} to {@code ImagePath}, and returns a new {@code Meme} whose {@code ImagePath}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * points to that location."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param toCopy       the {@code Meme} to copy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param memeLocation the meme image location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return a new {@code Meme} with the new {@code ImagePath}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static Meme copyMeme(Meme toCopy, Path memeLocation) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Path originalPath \u003d toCopy.getImagePath().getFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Path newPath \u003d copyImageFile(originalPath, memeLocation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new Meme(new ImagePath(newPath.toString()), toCopy.getDescription(), toCopy.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Copies the image of {@code toCopy} to {@code ImagePath}, and returns a new {@code Template} whose"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * {@code ImagePath} points to that location."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param toCopy       the {@code Template} to copy"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param templateLocation the template image location"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return a new {@code Template} with the new {@code ImagePath}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static Template copyTemplate(Template toCopy, Path templateLocation) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Path originalPath \u003d toCopy.getImagePath().getFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Path newPath \u003d copyImageFile(originalPath, templateLocation);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new Template(toCopy.getName(), new ImagePath(newPath.toString()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Copies the image file {@code originalPath} to {@code destinationDir}, with a new file name that will be"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * generated using {@link ImageUtil#getNewImagePath(Path, String)}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param originalPath   the path of the original image file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param destinationDir the destination directory"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the new {@code Path} of the copied image"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws IOException if an error occurred during IO"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static Path copyImageFile(Path originalPath, Path destinationDir) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String extension \u003d FileUtil.getExtension(originalPath).orElse(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Path newPath \u003d getNewImagePath(destinationDir, extension);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        FileUtil.copy(originalPath, newPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Generates a random image path in the destination directory."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param destination destination directory"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param extension file extension of the image"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the Path for the image to be copied to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static Path getNewImagePath(Path destination, String extension) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Path newPath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            newPath \u003d destination.resolve(FileUtil.generateUuidString() + \".\" + extension);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } while (FileUtil.isFileExists(newPath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns a copy of {@code toCopy}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param toCopy the {@code BufferedImage} to copy"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the copied {@code BufferedImage}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static BufferedImage copyBufferedImage(BufferedImage toCopy) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (toCopy \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            ColorModel cm \u003d toCopy.getColorModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            WritableRaster raster \u003d toCopy.copyData(toCopy.getRaster().createCompatibleWritableRaster());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            boolean isAlphaPremultiplied \u003d cm.isAlphaPremultiplied();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return new BufferedImage(cm, raster, isAlphaPremultiplied, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 2,
      "gary-lgy": 92
    }
  },
  {
    "path": "src/main/java/seedu/weme/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.FileUtil.MESSAGE_READ_FILE_FAILURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Records;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.RecordsManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Contains utility methods for populating {@code Weme} with sample data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static List\u003cMeme\u003e getSampleMemes(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // sample memes from resources folder"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cMemeFieldsContainer\u003e memeFields \u003d List.of("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            new MemeFieldsContainer(\"memes/5642dc30-927c-4e02-805d-831ea16bc68e.png\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    \"A meme about doge.\", \"doge\", \"cute\"), // doge"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            new MemeFieldsContainer(\"memes/74b9fc9f-a545-4bbc-98d5-09596a9166a9.jpg\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    \"A meme about Char and charmander.\", \"charmander\", \"cute\"), // charmander"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            new MemeFieldsContainer(\"memes/8de6b9f5-32a5-4eab-aebe-f47c2257e7d5.png\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    \"A meme about joker.\", \"joker\"), // joker"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            new MemeFieldsContainer(\"memes/ab6e1ed6-6025-4e84-b5da-8555ef1e0b05.png\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    \"A meme about toy.\", \"toy\", \"funny\"), // toy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            new MemeFieldsContainer(\"memes/b3afd215-8746-4113-aa19-1747d3578f41.jpg\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    \"A meme about a test.\", \"test\", \"funny\") // test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return createSampleMemes(memeFields, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static List\u003cTemplate\u003e getSampleTemplates(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // sample templates from resources folder"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cTemplateFieldsContainer\u003e templateFields \u003d List.of("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            new TemplateFieldsContainer(\"Drake Reaction\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \"templates/e2493713-6904-4530-98d1-eedc7fd88e5d.jpg\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            new TemplateFieldsContainer(\"Is This\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \"templates/0b4cc6ed-85b5-4ca0-a6b2-95ba5d29d06a.jpg\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            new TemplateFieldsContainer(\"Quiz Kid\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                \"templates/51460170-ef3e-41ad-8243-d0890e838cff.jpg\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return createSampleTemplates(templateFields, userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public static Records getSampleRecords() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e pathRecords \u003d Stream.of("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"/home/me/Pictures/weme.jpg\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"/home/me/Pictures/cutie.jpg\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"/home/me/Pictures/hey.jpg\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"/home/me/Pictures/hey.png\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"/home/me/Downloads/favorite_meme.jpg\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"/home/me/CS/Y2S1/ProgrammingMemes/CS2103.jpg\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e descriptionRecords \u003d Stream.of("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"A meme about doge.\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"A meme about Char and charmander.\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"A meme about joker.\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"A meme about toy.\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"A meme about a test.\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"OMG my favorite meme!!!\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"T$T: head \u003d null\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"CS2103 is so fun!\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"My first self-made meme\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"My second self-made meme\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e tagRecords \u003d Stream.of("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"doge\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"cute\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"charmander\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"joker\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"toy\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"funny\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"test\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"CS2103\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"GoT\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"CS\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"CSLectures\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"programming\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"cuteAnimals\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"CUTECATS\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"best\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"favorite\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"weme\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"wow\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e nameRecords \u003d Stream.of("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"Drake Reaction\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"Is This\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"Quiz Kid\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"disaster girl\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"hey girl\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"sponge bob\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"LOLcats\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"Double Rainbow\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"Gangnam Style\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"TheDress\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e colorRecords \u003d Stream.of("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"black\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"white\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"red\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"yellow\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"blue\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                \"green\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new RecordsManager(pathRecords, descriptionRecords, tagRecords, nameRecords, colorRecords);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Copies meme images from Resource folder to the Data folder."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param memeFields the data for the memes in the resource folder"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param userPrefs the user preferences for this instance of Weme"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return a List of Memes to import"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static List\u003cMeme\u003e createSampleMemes(List\u003cMemeFieldsContainer\u003e memeFields, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ClassLoader classLoader \u003d SampleDataUtil.class.getClassLoader();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cMeme\u003e copiedMemes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (MemeFieldsContainer fields : memeFields) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            String path \u003d fields.getImagePath();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Path newPath \u003d userPrefs.getMemeImagePath().resolve(FileUtil.getFileName(path));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                FileUtil.copy(classLoader.getResourceAsStream(path), newPath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            } catch (FileAlreadyExistsException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                // let the file pass"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_READ_FILE_FAILURE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            copiedMemes.add(new Meme(new ImagePath(newPath.toString()),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                    new Description(fields.getDescription()), getTagSet(fields.getTags())));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return copiedMemes;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Copies template images from Resource folder to the Data folder."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param templateFields the data for the templates in the resource folder"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param userPrefs the user preferences for this instance of Weme"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return a List of {@code Templates} to import"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static List\u003cTemplate\u003e createSampleTemplates(List\u003cTemplateFieldsContainer\u003e templateFields,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                                                       ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ClassLoader classLoader \u003d SampleDataUtil.class.getClassLoader();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        List\u003cTemplate\u003e copiedTemplates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (TemplateFieldsContainer fields : templateFields) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            String path \u003d fields.getImagePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Path newPath \u003d userPrefs.getTemplateImagePath().resolve(FileUtil.getFileName(path));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                FileUtil.copy(classLoader.getResourceAsStream(path), newPath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            } catch (FileAlreadyExistsException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                // let the file pass"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                throw new IllegalArgumentException(MESSAGE_READ_FILE_FAILURE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            copiedTemplates.add(new Template(new Name(fields.getName()), new ImagePath(newPath.toString())));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return copiedTemplates;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static ReadOnlyWeme getSampleWeme(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Weme sampleWeme \u003d new Weme();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (Meme sampleMeme : getSampleMemes(userPrefs)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            sampleWeme.addMeme(sampleMeme);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (Template sampleTemplate : getSampleTemplates(userPrefs)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            sampleWeme.addTemplate(sampleTemplate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        sampleWeme.setRecords(getSampleRecords());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return sampleWeme;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Container class for sample meme data"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static class MemeFieldsContainer {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        private String imagePath;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        private String[] tags;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public MemeFieldsContainer(String imagePath, String description, String... tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public String getImagePath() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return imagePath;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public String getDescription() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public String[] getTags() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Container class for sample template data"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static class TemplateFieldsContainer {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private String imagePath;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public TemplateFieldsContainer(String name, String imagePath) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public String getImagePath() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return imagePath;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "moziliar": 4,
      "jonchan51": 69,
      "-": 24,
      "gary-lgy": 77,
      "cutieprobe": 72
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonAdaptedMeme.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Jackson-friendly version of {@link Meme}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "class JsonAdaptedMeme {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meme\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final boolean isArchived;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeme} with the given meme details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public JsonAdaptedMeme(@JsonProperty(\"filePath\") String filePath, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                           @JsonProperty(\"isArchived\") boolean isArchived) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Converts a given {@code Meme} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public JsonAdaptedMeme(Meme source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        filePath \u003d source.getImagePath().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        isArchived \u003d source.isArchived();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Converts this Json-friendly adapted meme object into the model\u0027s {@code Meme} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Meme toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        final List\u003cTag\u003e memeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            memeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (filePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    ImagePath.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!ImagePath.isValidFilePath(filePath)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new IllegalValueException(ImagePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        final ImagePath modelUrl \u003d new ImagePath(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(memeTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new Meme(modelUrl, modelDescription, modelTags, isArchived);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 11,
      "moziliar": 10,
      "jonchan51": 22,
      "-": 47,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonAdaptedTemplate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Jackson-friendly version of {@link Template}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "class JsonAdaptedTemplate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Template\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final boolean isArchived;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Constructs a {@code JsonAdaptedTemplate} with the given template details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public JsonAdaptedTemplate(@JsonProperty(\"name\") String name, @JsonProperty(\"filePath\") String filePath,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                               @JsonProperty(\"isArchived\") boolean isArchived) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Converts a given {@code Template} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public JsonAdaptedTemplate(Template source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        filePath \u003d source.getImagePath().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        isArchived \u003d source.isArchived();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Converts this Jackson-friendly adapted template object into the model\u0027s {@code Template} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted template."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Template toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (filePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                ImagePath.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!ImagePath.isValidFilePath(filePath)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalValueException(ImagePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final ImagePath modelFilePath \u003d new ImagePath(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new Template(modelName, modelFilePath, isArchived);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "jonchan51": 6,
      "gary-lgy": 61
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonSerializableRecords.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.Records;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.RecordsManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " * An Immutable Records that is serializable to JSON format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "@JsonRootName(value \u003d \"records\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "public class JsonSerializableRecords {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e pathRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e descriptionRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e tagRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e nameRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private Set\u003cString\u003e colorRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Constructs a {@code JsonSerializableRecords} with the given records details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public JsonSerializableRecords(@JsonProperty(\"pathRecords\") Set\u003cString\u003e pathRecords,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                                    @JsonProperty(\"descriptionRecords\") Set\u003cString\u003e descriptionRecords,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                                    @JsonProperty(\"tagRecords\") Set\u003cString\u003e tagRecords,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                                    @JsonProperty(\"nameRecords\") Set\u003cString\u003e nameRecords,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                                   @JsonProperty(\"colorRecords\") Set\u003cString\u003e colorRecords) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.pathRecords.addAll(pathRecords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.descriptionRecords.addAll(descriptionRecords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.tagRecords.addAll(tagRecords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.nameRecords.addAll(nameRecords);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.colorRecords.addAll(colorRecords);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Converts a given {@code Records} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public JsonSerializableRecords(Records records) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        pathRecords.addAll(records.getPaths());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        descriptionRecords.addAll(records.getDescriptions());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        tagRecords.addAll(records.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        nameRecords.addAll(records.getNames());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        colorRecords.addAll(records.getColors());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Converts this serializable records object into the model\u0027s {@code Records} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the serializable records."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public Records toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e pathRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e descriptionRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e tagRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e nameRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Set\u003cString\u003e colorRecords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        pathRecords.addAll(this.pathRecords);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        descriptionRecords.addAll(this.descriptionRecords);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        tagRecords.addAll(this.tagRecords);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        nameRecords.addAll(this.nameRecords);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        colorRecords.addAll(this.colorRecords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        return new RecordsManager(pathRecords, descriptionRecords, tagRecords, nameRecords, colorRecords);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cutieprobe": 75
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonSerializableStats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.Stats;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.StatsManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * An Immutable Stats that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "@JsonRootName(value \u003d \"statsData\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "class JsonSerializableStats {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private final Map\u003cString, Integer\u003e likeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs a {@code JsonSerializableWeme} with the given memes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public JsonSerializableStats(@JsonProperty(\"likeMap\") Map\u003cString, Integer\u003e likeData) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likeMap.putAll(likeData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Converts a given {@code ReadOnlyWeme} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableWeme}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public JsonSerializableStats(Stats source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Map\u003cString, SimpleIntegerProperty\u003e likeData \u003d source.getObservableLikeData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (Map.Entry\u003cString, SimpleIntegerProperty\u003e entry : likeData.entrySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            likeMap.put(entry.getKey(), entry.getValue().get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Converts this stats into the model\u0027s {@code Stats} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public Stats toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Stats stats \u003d new StatsManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Map\u003cString, SimpleIntegerProperty\u003e likeData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (Map.Entry\u003cString, Integer\u003e entry : likeMap.entrySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            likeData.put(entry.getKey(), new SimpleIntegerProperty(entry.getValue()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        stats.setLikeData(likeData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 53,
      "jonchan51": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonSerializableWeme.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * An Immutable Weme that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "@JsonRootName(value \u003d \"weme\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "class JsonSerializableWeme {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEME \u003d \"Memes list contains duplicate meme(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEMPLATE \u003d \"Templates list contains duplicate meme(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final List\u003cJsonAdaptedMeme\u003e memes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final List\u003cJsonAdaptedTemplate\u003e templates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final JsonSerializableStats stats;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private final JsonSerializableRecords records;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Constructs a {@code JsonSerializableWeme} with the given memes and templates."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public JsonSerializableWeme(@JsonProperty(\"memes\") List\u003cJsonAdaptedMeme\u003e memes,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                                @JsonProperty(\"templates\") List\u003cJsonAdaptedTemplate\u003e templates,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                                @JsonProperty(\"stats\") JsonSerializableStats stats,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                                @JsonProperty(\"records\") JsonSerializableRecords records) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.memes.addAll(memes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.templates.addAll(templates);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.records \u003d records;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Converts a given {@code ReadOnlyWeme} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableWeme}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public JsonSerializableWeme(ReadOnlyWeme source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        memes.addAll(source.getMemeList().stream().map(JsonAdaptedMeme::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templates.addAll(source.getTemplateList().stream().map(JsonAdaptedTemplate::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        stats \u003d new JsonSerializableStats(source.getStats());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        records \u003d new JsonSerializableRecords(source.getRecords());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Converts this Weme into the model\u0027s {@code Weme} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Weme toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme weme \u003d new Weme();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (JsonAdaptedMeme jsonAdaptedMeme : memes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Meme meme \u003d jsonAdaptedMeme.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (weme.hasMeme(meme)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            weme.addMeme(meme);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        for (JsonAdaptedTemplate jsonAdaptedTemplate : templates) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Template template \u003d jsonAdaptedTemplate.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (weme.hasTemplate(template)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TEMPLATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            weme.addTemplate(template);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme.setStats(stats.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        weme.setRecords(records.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return weme;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 6,
      "jonchan51": 26,
      "-": 34,
      "gary-lgy": 10,
      "cutieprobe": 7
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/JsonWemeStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A class to access Weme data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class JsonWemeStorage implements WemeStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWemeStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public JsonWemeStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Path getWemeFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Optional\u003cReadOnlyWeme\u003e readWeme() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return readWeme(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Similar to {@link #readWeme()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Optional\u003cReadOnlyWeme\u003e readWeme(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Optional\u003cJsonSerializableWeme\u003e jsonWeme \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                filePath, JsonSerializableWeme.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!jsonWeme.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return Optional.of(jsonWeme.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void saveWeme(ReadOnlyWeme weme) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        saveWeme(weme, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Similar to {@link #saveWeme(ReadOnlyWeme)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void saveWeme(ReadOnlyWeme weme, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        requireNonNull(weme);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        FileUtil.createFileIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWeme(weme), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "moziliar": 12,
      "jonchan51": 14,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public interface Storage extends WemeStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Path getWemeFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Optional\u003cReadOnlyWeme\u003e readWeme() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void saveWeme(ReadOnlyWeme weme) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "jonchan51": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Manages storage of Weme data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private WemeStorage wemeStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public StorageManager(WemeStorage wemeStorage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.wemeStorage \u003d wemeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Weme methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Path getWemeFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return wemeStorage.getWemeFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Optional\u003cReadOnlyWeme\u003e readWeme() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return readWeme(wemeStorage.getWemeFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Optional\u003cReadOnlyWeme\u003e readWeme(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return wemeStorage.readWeme(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void saveWeme(ReadOnlyWeme weme) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        saveWeme(weme, wemeStorage.getWemeFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void saveWeme(ReadOnlyWeme weme, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        wemeStorage.saveWeme(weme, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 7,
      "jonchan51": 17,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents a storage for {@link seedu.weme.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Saves the given {@link seedu.weme.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/weme/storage/WemeStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Represents a storage for {@link Weme}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public interface WemeStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Path getWemeFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns Weme data as a {@link ReadOnlyWeme}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Optional\u003cReadOnlyWeme\u003e readWeme() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @see #getWemeFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    Optional\u003cReadOnlyWeme\u003e readWeme(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Saves the given {@link ReadOnlyWeme} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param weme cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void saveWeme(ReadOnlyWeme weme) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @see #saveWeme(ReadOnlyWeme)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    void saveWeme(ReadOnlyWeme weme, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 2,
      "jonchan51": 14,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.parser.contextparser.WemeParser.COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDislikeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeLikeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.logic.parser.contextparser.WemeParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final int BASE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private final CommandPrompter commandPrompter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private boolean isShowingCommandSuccess \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private ObservableList\u003cMeme\u003e memeFilteredList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                      CommandPrompter commandPrompter,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                      ObservableList\u003cMeme\u003e memeFilteredList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        this.commandPrompter \u003d commandPrompter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.memeFilteredList \u003d memeFilteredList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            setStyleToDefault();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            if (!isShowingCommandSuccess) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                displayCommandPrompt();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                isShowingCommandSuccess \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, this::handleKeyPress);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            handleLikeByKeyPress(keyEvent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        case LEFT:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        case RIGHT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            handleIndexToggleByKeyPress(keyEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            handleTabPress(keyEvent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Changes index in the command box with key press to enable fast liking."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void handleIndexToggleByKeyPress(KeyEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(commandTextField.getText().trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // Check if the input is a valid command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (!matcher.group(COMMAND_WORD).equals(MemeLikeCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            // Do not handle if the command word is not a like command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            final String commandWord \u003d matcher.group(WemeParser.COMMAND_WORD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            final String argument \u003d matcher.group(WemeParser.ARGUMENTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            int change \u003d event.getCode().equals(KeyCode.LEFT) ? -1 : 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            int currentIndex \u003d Integer.parseInt(argument.trim());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            int newIndex \u003d currentIndex + change;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            commandTextField.setText(commandWord + \" \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    + (Math.min(Math.max(newIndex, BASE_INDEX), memeFilteredList.size())));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Handles like command in the form of key press."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void handleLikeByKeyPress(KeyEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(commandTextField.getText().trim());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                final String commandWord \u003d matcher.group(WemeParser.COMMAND_WORD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                if (commandWord.equals(MemeLikeCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                        \u0026\u0026 event.getCode().equals(KeyCode.UP)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                        || commandWord.equals(MemeDislikeCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                        \u0026\u0026 event.getCode().equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                    commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            isShowingCommandSuccess \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Handles the tab key press event."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private void handleTabPress(KeyEvent event) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        if (event.getCode().equals(KeyCode.TAB)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                commandTextField.setText(commandPrompter.execute(commandTextField.getText()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } catch (PromptException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Display the command prompt in the result box."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private void displayCommandPrompt() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            commandPrompter.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (PromptException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "         * @see seedu.weme.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Represents a function that can auto-prompt commands."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    public interface CommandPrompter {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "         * Parse the user input and display the suggestions in ResultDisplay."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "         * @param userInput text input from CommandBox"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "         * @return String complete command for auto-completion"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        String execute(String userInput) throws PromptException;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 92,
      "jonchan51": 5,
      "-": 70,
      "cutieprobe": 56
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/CreateImageDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Panel displaying the image of the current meme creation session."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class CreateImageDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"CreateImageDisplay.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private HBox memeCreationBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ImageView memeImage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ImageView verticalRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ImageView horizontalRule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private VBox memeCreationPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane memeTextListPlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public CreateImageDisplay(MemeCreation memeCreation) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ObservableList\u003cMemeText\u003e memeTexts \u003d memeCreation.getMemeTextList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeTextListPanel memeTextListPanel \u003d new MemeTextListPanel(memeTexts);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeTextListPlaceholder.getChildren().addAll(memeTextListPanel.getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        updateImage(memeCreation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Updates the image displayed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param session the current meme creation session"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void updateImage(MemeCreation session) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (session.getCurrentImage().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            memeImage.setImage(SwingFXUtils.toFXImage(session.getCurrentImage().get(), null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            verticalRule.setFitHeight(memeImage.getBoundsInParent().getHeight());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            horizontalRule.setFitWidth(memeImage.getBoundsInParent().getWidth());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            memeCreationBox.setVisible(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            memeCreationPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            memeImage.setImage(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            memeCreationBox.setVisible(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            memeCreationPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 62
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-t16-3.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/ImportGridPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import org.controlsfx.control.GridCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import org.controlsfx.control.GridView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Panel containing the list of memes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportGridPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String FXML \u003d \"ImportGridPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ImportGridPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private GridView\u003cMeme\u003e importGridView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImportGridPanel(ObservableList\u003cMeme\u003e memeList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importGridView.setItems(memeList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importGridView.setCellFactory(listView -\u003e new MemeGridViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Custom {@code GridCell} that displays the graphics of a {@code Meme} using a {@code ImportMemeCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    class MemeGridViewCell extends GridCell\u003cMeme\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        protected void updateItem(Meme meme, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            super.updateItem(meme, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            if (empty || meme \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                String filePath \u003d meme.getImagePath().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                setGraphic(new ImportMemeCard(meme, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 49
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/ImportMemeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * An UI component that displays information of a {@code Meme}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportMemeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String FXML \u003d \"ImportMemeGridCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public final Meme meme;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private ImageView display;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public ImportMemeCard(Meme meme, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.meme \u003d meme;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        id.setText(displayedIndex + \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        display.setImage(new Image(meme.getImagePath().toUrl().toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        description.setText(meme.getDescription().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        meme.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        if (!(other instanceof ImportMemeCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportMemeCard card \u003d (ImportMemeCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u0026\u0026 meme.equals(card.meme);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 19,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.ParserUtil.MESSAGE_INVALID_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.exceptions.PromptException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.prompter.prompt.CommandPrompt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    // App content for different tabs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane memesPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane templatesPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane createPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private CreateImageDisplay createImageDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane statisticsPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private StackPane exportPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private StackPane importPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private StackPane preferencesPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane tabBarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private StackPane appContentPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        fillPeripherals();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        fillAppContent();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        listenToContextChange();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Fills up peripheral components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private void fillPeripherals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                this::promptCommand,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                logic.getFilteredMemeList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            resultDisplay.setFeedbackToUser(logic.prompt(\"\").getCommandPrompt());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (PromptException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            // Acts as a placeholder."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TabBar tabBar \u003d new TabBar(logic.getContext());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        tabBarPlaceholder.getChildren().add(tabBar.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getWemeFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Fills up main app content."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private void fillAppContent() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memesPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templatesPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        createPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        statisticsPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        preferencesPanel \u003d new StackPane();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        MemeGridPanel memeGridPanel \u003d new MemeGridPanel(logic.getFilteredMemeList(), logic.getObservableLikeData());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memesPanel.getChildren().add(memeGridPanel.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TemplateGridPanel templateGridPanel \u003d new TemplateGridPanel(logic.getFilteredTemplateList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templatesPanel.getChildren().add(templateGridPanel.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        createImageDisplay \u003d new CreateImageDisplay(logic.getMemeCreation());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        createPanel.getChildren().add(createImageDisplay.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        StatsPanel statsPanel \u003d new StatsPanel(logic.getWeme());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        statisticsPanel.getChildren().add(statsPanel.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        MemeGridPanel exportGridPanel \u003d new MemeGridPanel("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                logic.getFilteredStagedMemeList(), logic.getObservableLikeData());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportGridPanel importGridPanel \u003d new ImportGridPanel("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                logic.getFilteredImportList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        PreferencesGridPanel preferencesGridPanel \u003d new PreferencesGridPanel(logic.getObservableUserPreferences());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        preferencesPanel.getChildren().add(preferencesGridPanel.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportPanel.getChildren().add(exportGridPanel.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        importPanel.getChildren().add(importGridPanel.getRoot());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Attaches listener on ModelContext that changes app content accordingly."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private void listenToContextChange() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        setAppContent(logic.getContext().getValue()); // Set initial content"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        logic.getContext().addListener((observable, oldValue, newValue) -\u003e setAppContent(newValue));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets app content based on ModelContext."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param context the current {@code ModelContext}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private void setAppContent(ModelContext context) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        appContentPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_MEMES:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            appContentPlaceholder.getChildren().add(memesPanel);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_TEMPLATES:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            appContentPlaceholder.getChildren().add(templatesPanel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_PREFERENCES:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            appContentPlaceholder.getChildren().add(preferencesPanel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_CREATE:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            appContentPlaceholder.getChildren().add(createPanel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_STATISTICS:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            appContentPlaceholder.getChildren().add(statisticsPanel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_EXPORT:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            appContentPlaceholder.getChildren().add(exportPanel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_IMPORT:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            appContentPlaceholder.getChildren().add(importPanel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        new Thread(() -\u003e logic.cleanUp()).start();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @see seedu.weme.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            if (logic.getContext().getValue() \u003d\u003d ModelContext.CONTEXT_CREATE) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                MemeCreation memeCreation \u003d logic.getMemeCreation();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                createImageDisplay.updateImage(memeCreation);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * Parse the user input and display the suggestions in ResultDisplay."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @param commandText text input from CommandBox"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     * @return String complete command for auto-completion"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    private String promptCommand(String commandText) throws PromptException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            CommandPrompt commandPrompt \u003d logic.prompt(commandText);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandPrompt.getCommandPrompt());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return commandPrompt.getCompleteCommand();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        } catch (PromptException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 26,
      "moziliar": 7,
      "jonchan51": 10,
      "-": 172,
      "gary-lgy": 87,
      "cutieprobe": 23
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/MemeCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * An UI component that displays information of a {@code Meme}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"MemeGridCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Weme level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public final Meme meme;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ImageView display;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private Label likes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public MemeCard(Meme meme, int displayedIndex, SimpleIntegerProperty numOfLikes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.meme \u003d meme;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        id.setText(displayedIndex + \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        display.setImage(new Image(meme.getImagePath().toUrl().toString()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        description.setText(meme.getDescription().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        meme.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        likes.setText(\"Likes: \" + Integer.toString(numOfLikes.get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        numOfLikes.addListener((observable, oldValue, newValue) -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                likes.setText(\"Likes: \" + Integer.toString((int) newValue)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (!(other instanceof MemeCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeCard card \u003d (MemeCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u0026\u0026 meme.equals(card.meme);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 3,
      "moziliar": 7,
      "jonchan51": 11,
      "-": 50,
      "gary-lgy": 5
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/MemeGridPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import org.controlsfx.control.GridCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import org.controlsfx.control.GridView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Panel containing the list of memes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeGridPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"MemeGridPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MemeGridPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private GridView\u003cMeme\u003e memeGridView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private ObservableMap\u003cString, SimpleIntegerProperty\u003e likeData;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public MemeGridPanel(ObservableList\u003cMeme\u003e memeList, ObservableMap\u003cString, SimpleIntegerProperty\u003e likeData) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeGridView.setItems(memeList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        memeGridView.setCellFactory(listView -\u003e new MemeGridViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.likeData \u003d likeData;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Custom {@code GridCell} that displays the graphics of a {@code Meme} using a {@code MemeCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    class MemeGridViewCell extends GridCell\u003cMeme\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        protected void updateItem(Meme meme, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            super.updateItem(meme, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (empty || meme \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                String filePath \u003d meme.getImagePath().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                SimpleIntegerProperty likes \u003d likeData.get(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                setGraphic(new MemeCard(meme, getIndex() + 1, likes).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "moziliar": 10,
      "jonchan51": 7,
      "-": 26,
      "gary-lgy": 10
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/MemeTextCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * An UI component that displays information of a {@code MemeText}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeTextCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"MemeTextCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final MemeText memeText;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Label position;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextCard(MemeText memeText, int displayedIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.memeText \u003d memeText;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        id.setText(displayedIndex + \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        text.setText(memeText.getText());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        position.setText(memeText.getCoordinates().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof MemeTextCard)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        MemeTextCard card \u003d (MemeTextCard) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 memeText.equals(card.memeText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 48
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/MemeTextListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Panel showing all the currently added meme texts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class MemeTextListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"MemeTextListPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ListView\u003cMemeText\u003e memeTextListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public MemeTextListPanel(ObservableList\u003cMemeText\u003e memeTexts) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeTextListView.setItems(memeTexts);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeTextListView.setCellFactory(listView -\u003e new MemeTextListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // Auto-scroll to last item"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeTextListView.getItems().addListener((ListChangeListener\u003cMemeText\u003e) (c -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            c.next();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            final int size \u003d memeTextListView.getItems().size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            if (size \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                memeTextListView.scrollTo(size - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code MemeText} using a {@code MemeTextCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    class MemeTextListViewCell extends ListCell\u003cMemeText\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        protected void updateItem(MemeText memeText, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            super.updateItem(memeText, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            if (empty || memeText \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                setGraphic(new MemeTextCard(memeText, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 51
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/PreferencesGridPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.model.UserPrefs.DATA_FILE_PATH_KEY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.model.UserPrefs.EXPORT_PATH_KEY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.model.UserPrefs.MEME_IMAGE_PATH_KEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.model.UserPrefs.TEMPLATE_IMAGE_PATH_KEY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * Panel containing the list of memes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class PreferencesGridPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String NO_PREFERENCES_SPECIFIED \u003d \"No preferences specified\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String FXML \u003d \"PreferencesGridPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PreferencesGridPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Label exportPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Label dataFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Label memeImagePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Label templateImagePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public PreferencesGridPanel(ObservableMap\u003cString, String\u003e observableUserPreferences) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        exportPath.setText(\"Export Path: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                + observableUserPreferences.getOrDefault(EXPORT_PATH_KEY, NO_PREFERENCES_SPECIFIED));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        dataFilePath.setText(\"Data File Path: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                + observableUserPreferences.getOrDefault(DATA_FILE_PATH_KEY, NO_PREFERENCES_SPECIFIED));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        memeImagePath.setText(\"Meme Image Path: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                + observableUserPreferences.getOrDefault(MEME_IMAGE_PATH_KEY, NO_PREFERENCES_SPECIFIED));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        templateImagePath.setText(\"Template Image Path: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                + observableUserPreferences.getOrDefault(TEMPLATE_IMAGE_PATH_KEY, NO_PREFERENCES_SPECIFIED));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 47
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/StatsPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.MapChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithStats;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": " * Panel containing the statistical data about memes in Weme."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class StatsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final String FXML \u003d \"StatsPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final String COUNT_CHART_TITLE \u003d \"Tag usage\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final String LIKE_CHART_TITLE \u003d \"Likes per Tag\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final int LABEL_LINE_LENGTH \u003d 10;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private PieChart tagCountChart;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private PieChart tagLikeChart;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public StatsPanel(ReadOnlyWeme weme) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        renderCharts(weme);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        weme.getMemeList().addListener((ListChangeListener\u003cMeme\u003e) change -\u003e renderCharts(weme));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        weme.getStats().getObservableLikeData().addListener((MapChangeListener\u003cString, SimpleIntegerProperty\u003e) change -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                renderCharts(weme));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Renders the charts with Chart generator methods."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void renderCharts(ReadOnlyWeme weme) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        generateTagCountChart(weme);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        generateTagLikeChart(weme);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Generates a {@code PieChart} with a given {@code MemeBook} and {@code Stats}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * \u003cp\u003eStyling is mainly done in the CSS file.\u003c/p\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void generateTagCountChart(ReadOnlyWeme weme) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        generatePieChart(weme.getTagsWithCountList(), tagCountChart, COUNT_CHART_TITLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Generates a {@code PieChart} with a given {@code Weme}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * \u003cp\u003eStyling is mainly done in the CSS file.\u003c/p\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void generateTagLikeChart(ReadOnlyWeme weme) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        generatePieChart(weme.getTagsWithLikeCountList(), tagLikeChart, LIKE_CHART_TITLE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Generates pie chart with a list of tags with stats and the title."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private void generatePieChart(List\u003c? extends TagWithStats\u003e tagsWithStats, PieChart chart, String title) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cPieChart.Data\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        for (TagWithStats tag : tagsWithStats) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            data.add(new PieChart.Data(tag.getTag().tagName, tag.getData()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d data.stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .map(this::bindValueToLabel)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        chart.setData(pieChartData);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        chart.setTitle(title);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        chart.setLabelLineLength(LABEL_LINE_LENGTH);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        chart.setLegendSide(Side.LEFT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private PieChart.Data bindValueToLabel(PieChart.Data data) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        data.nameProperty().bind(Bindings.concat(data.getName(), \": \", Math.round(data.getPieValue())));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 91,
      "jonchan51": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/TabBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import static seedu.weme.logic.parser.util.ParserUtil.MESSAGE_INVALID_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.css.PseudoClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Bar containing all available tabs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TabBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"TabBar.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TabBar.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private VBox memesTab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private VBox templatesTab;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private VBox createTab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private VBox statisticsTab;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private VBox exportTab;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private VBox importTab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private VBox preferencesTab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ObservableValue\u003cModelContext\u003e context;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TabBar(ObservableValue\u003cModelContext\u003e context) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        select(context.getValue()); // Select initial tab"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.context.addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            deselect(oldValue);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            select(newValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private void select(ModelContext context) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        getContextTab(context).pseudoClassStateChanged(PseudoClass.getPseudoClass(\"selected\"), true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private void deselect(ModelContext context) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        getContextTab(context).pseudoClassStateChanged(PseudoClass.getPseudoClass(\"selected\"), false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private VBox getContextTab(ModelContext context) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_MEMES:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return memesTab;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_TEMPLATES:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return templatesTab;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_CREATE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return createTab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        case CONTEXT_STATISTICS:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return statisticsTab;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_EXPORT:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return exportTab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_IMPORT:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return importTab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        case CONTEXT_PREFERENCES:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return preferencesTab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_INVALID_TAB);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof TabBar)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TabBar card \u003d (TabBar) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return context.getValue().equals(card.context.getValue());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 11,
      "gary-lgy": 84
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/TemplateCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * An UI component that displays information of a {@code Template}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"TemplateGridCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on address book level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public final Template template;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ImageView display;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateCard(Template template, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.template \u003d template;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        id.setText(displayedIndex + \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        display.setImage(new Image(template.getImagePath().toUrl().toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        name.setText(template.getName().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!(other instanceof TemplateCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TemplateCard card \u003d (TemplateCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u0026\u0026 template.equals(card.template);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "jonchan51": 1,
      "gary-lgy": 60
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/TemplateGridPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import org.controlsfx.control.GridCell;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import org.controlsfx.control.GridView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * Panel containing the list of templates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateGridPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String FXML \u003d \"TemplateGridPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private GridView\u003cTemplate\u003e templateGridView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateGridPanel(ObservableList\u003cTemplate\u003e templateList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templateGridView.setItems(templateList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templateGridView.setCellFactory(gridView -\u003e new TemplateGridViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Custom {@code GridCell} that displays the graphics of a {@code Template} using a {@code TemplateCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    class TemplateGridViewCell extends GridCell\u003cTemplate\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        protected void updateItem(Template template, boolean empty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            super.updateItem(template, empty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            if (empty || template \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                setGraphic(new TemplateCard(template, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 44
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/weme.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 5,
      "-": 80,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/main/java/seedu/weme/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CreateImageDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cHBox fx:id\u003d\"memeCreationBox\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cVBox fx:id\u003d\"memeImageDisplay\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImageView fx:id\u003d\"memeImage\" cache\u003d\"true\" fitHeight\u003d\"500\" fitWidth\u003d\"500\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                   preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImageView fx:id\u003d\"verticalRule\" cache\u003d\"true\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003cImage url\u003d\"@../images/vertical_rule.png\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cImageView fx:id\u003d\"horizontalRule\" cache\u003d\"true\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImage url\u003d\"@../images/horizontal_rule.png\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cGridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cInsets left\u003d\"30\" top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cLabel GridPane.rowIndex\u003d\"0\" GridPane.halignment\u003d\"CENTER\" text\u003d\"Sample Font Sizes\" styleClass\u003d\"label-subheader\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cImageView GridPane.rowIndex\u003d\"1\" cache\u003d\"true\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImage url\u003d\"@../images/sample_font_sizes.png\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cLabel GridPane.rowIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" text\u003d\"Text added\" styleClass\u003d\"label-subheader\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cStackPane GridPane.rowIndex\u003d\"3\" fx:id\u003d\"memeTextListPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cVBox fx:id\u003d\"memeCreationPlaceholder\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cLabel text\u003d\"Please go to Templates tab and choose a template for meme creation\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "           textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" styleClass\u003d\"label-header\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 46
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".label-subheader {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".list-view, .grid-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".list-cell, .grid-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".list-cell:filled:even, .grid-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".list-cell:filled:odd, .grid-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".list-cell:filled:selected, .grid-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".list-cell:filled:selected #cardPane, .grid-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".list-cell .label, .grid-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ".tab .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "#filterField, #memeGridPanel {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 344,
      "gary-lgy": 25
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/ImportGridPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import org.controlsfx.control.GridView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cGridView fx:id\u003d\"importGridView\" VBox.vgrow\u003d\"ALWAYS\" cellWidth\u003d\"250\" cellHeight\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 8
    }
  },
  {
    "path": "src/main/resources/view/ImportMemeGridCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cGridPane alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"250\" prefWidth\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"250\" spacing\u003d\"5\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cImageView fx:id\u003d\"display\" cache\u003d\"true\" fitHeight\u003d\"200\" fitWidth\u003d\"200\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 29
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003cfx:root minHeight\u003d\"810\" minWidth\u003d\"990\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Weme\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cImage url\u003d\"@/images/weme.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tabBarPlaceholder\" maxWidth\u003d\"120\" minHeight\u003d\"320\" minWidth\u003d\"120\" prefWidth\u003d\"120\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "          \u003cStackPane fx:id\u003d\"appContentPlaceholder\" minWidth\u003d\"250\" prefWidth\u003d\"250\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 9,
      "-": 47,
      "gary-lgy": 8,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/main/resources/view/MemeGridCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cGridPane alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"250\" prefWidth\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"250\" spacing\u003d\"5\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "      \u003cImageView fx:id\u003d\"display\" cache\u003d\"true\" fitHeight\u003d\"200\" fitWidth\u003d\"200\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        \u003cPane prefHeight\u003d\"24.0\" prefWidth\u003d\"240.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            \u003cLabel fx:id\u003d\"likes\" alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"RIGHT\" layoutX\u003d\"193.0\" layoutY\u003d\"4.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$likes\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "         \u003c/Pane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "moziliar": 10,
      "gary-lgy": 23
    }
  },
  {
    "path": "src/main/resources/view/MemeGridPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import org.controlsfx.control.GridView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cGridView fx:id\u003d\"memeGridView\" VBox.vgrow\u003d\"ALWAYS\" cellWidth\u003d\"250\" cellHeight\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "gary-lgy": 2
    }
  },
  {
    "path": "src/main/resources/view/MemeTextCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cLabel fx:id\u003d\"text\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$text\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cLabel fx:id\u003d\"position\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$position\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 16
    }
  },
  {
    "path": "src/main/resources/view/MemeTextListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cListView fx:id\u003d\"memeTextListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cplaceholder\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cLabel text\u003d\"No text added yet\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-text-fill: white\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/placeholder\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003c/ListView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 13
    }
  },
  {
    "path": "src/main/resources/view/PreferencesGridPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cLabel fx:id\u003d\"exportPath\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$exportPath\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cLabel fx:id\u003d\"dataFilePath\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$dataFilePath\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cLabel fx:id\u003d\"memeImagePath\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$memeImagePath\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cLabel fx:id\u003d\"templateImagePath\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$templateImagePath\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 26
    }
  },
  {
    "path": "src/main/resources/view/StatsPanel.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    -fx-font-size: 1.5em;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": ".chart-pie-label-line {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    -fx-stroke: #8b4513;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    -fx-fill: #8b4513;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    -fx-fill: #ffffff;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    -fx-font-size: 0.5em;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "   -fx-background-color:  #fafad2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "   -fx-stroke: #daa520;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 18
    }
  },
  {
    "path": "src/main/resources/view/StatsPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003cStackPane id\u003d\"StackPane\" prefHeight\u003d\"800\" prefWidth\u003d\"800\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "   \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        \u003cStackPane id\u003d\"StackPane\" prefHeight\u003d\"800\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "             \u003cPieChart id\u003d\"tagCountChart\" fx:id\u003d\"tagCountChart\" prefHeight\u003d\"800.0\" prefWidth\u003d\"313.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        \u003cStackPane id\u003d\"StackPane\" prefHeight\u003d\"800\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "             \u003cPieChart id\u003d\"tagLikeChart\" fx:id\u003d\"tagLikeChart\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "  \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    \u003cURL value\u003d\"@StatsPanel.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "  \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "moziliar": 26
    }
  },
  {
    "path": "src/main/resources/view/TabBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cVBox fx:id\u003d\"memesTab\" alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u003cImage url\u003d\"@../images/doge_tab.png\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cLabel text\u003d\"Memes\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cVBox fx:id\u003d\"templatesTab\" alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u003cImage url\u003d\"@../images/template_tab.png\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cLabel text\u003d\"Templates\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cVBox fx:id\u003d\"createTab\" alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u003cImage url\u003d\"@../images/create_tab.png\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cLabel text\u003d\"Create\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cVBox fx:id\u003d\"statisticsTab\" alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            \u003cImage url\u003d\"@../images/statistics_tab.png\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cLabel text\u003d\"Statistics\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cVBox fx:id\u003d\"exportTab\" alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cImage url\u003d\"@../images/export_tab.png\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cLabel text\u003d\"Export\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cVBox fx:id\u003d\"importTab\" alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cImage url\u003d\"@../images/import_tab.png\"/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cLabel text\u003d\"Import\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cRegion VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003cVBox fx:id\u003d\"preferencesTab\" alignment\u003d\"CENTER\" styleClass\u003d\"tab\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cImageView fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            \u003cImage url\u003d\"@../images/preferences_tab.png\"/\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        \u003cLabel text\u003d\"Preferences\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 31,
      "gary-lgy": 79
    }
  },
  {
    "path": "src/main/resources/view/TemplateGridCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cGridPane alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"250\" prefWidth\u003d\"250\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"250\" spacing\u003d\"5\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cImageView fx:id\u003d\"display\" fitHeight\u003d\"200\" fitWidth\u003d\"200\" cache\u003d\"true\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 25
    }
  },
  {
    "path": "src/main/resources/view/TemplateGridPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import org.controlsfx.control.GridView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "  \u003cGridView fx:id\u003d\"templateGridView\" VBox.vgrow\u003d\"ALWAYS\" cellWidth\u003d\"250\" cellHeight\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 8
    }
  },
  {
    "path": "src/test/java/seedu/weme/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        final Index fifthIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertTrue(fifthIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertTrue(fifthIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertTrue(fifthIndex.equals(fifthIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertFalse(fifthIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertFalse(fifthIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertFalse(fifthIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 51,
      "gary-lgy": 7
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/weme.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 33,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/weme/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.storage.JsonWemeStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonWemeStorage wemeStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                new JsonWemeStorage(temporaryFolder.resolve(\"weme.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        StorageManager storage \u003d new StorageManager(wemeStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String listCommand \u003d MemeListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(listCommand, MemeListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /* Test does not make sense."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // Setup LogicManager with JsonWemeIoExceptionThrowingStub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        JsonWemeStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                new JsonWemeIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String addCommand \u003d MemeAddCommand.COMMAND_WORD + FILEPATH_DESC_CHARMANDER"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                + DESCRIPTION_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme expectedMeme \u003d new MemeBuilder(DOGE).withTags().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.addMeme(expectedMeme);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void getFilteredMemeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredMemeList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static class JsonWemeIoExceptionThrowingStub extends JsonWemeStorage {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        private JsonWemeIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void saveWeme(ReadOnlyWeme weme, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 11,
      "jonchan51": 24,
      "-": 120,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.memecommand.MemeDeleteCommand.MESSAGE_DELETE_MEME_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.MemeUtil.isSameMemeImage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.PathMatchesPathPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.EditMemeDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String VALID_DESCRIPTION_CHARMANDER \u003d \"A meme about Char and charmander.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String VALID_DESCRIPTION_JOKER \u003d \"A meme about joker.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String VALID_FILEPATH_CHARMANDER \u003d \"src/test/data/memes/charmander_meme.jpg\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String VALID_FILEPATH_JOKER \u003d \"src/test/data/memes/joker_meme.jpg\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String VALID_TAG_CHARMANDER \u003d \"charmander\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String VALID_TAG_JOKER \u003d \"joker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String DESCRIPTION_DESC_CHARMANDER \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CHARMANDER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String DESCRIPTION_DESC_JOKER \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String FILEPATH_DESC_CHARMANDER \u003d \" \" + PREFIX_FILEPATH + VALID_FILEPATH_CHARMANDER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String FILEPATH_DESC_JOKER \u003d \" \" + PREFIX_FILEPATH + VALID_FILEPATH_JOKER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String TAG_DESC_CHARMANDER \u003d \" \" + PREFIX_TAG + VALID_TAG_CHARMANDER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String TAG_DESC_JOKER \u003d \" \" + PREFIX_TAG + VALID_TAG_JOKER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String INVALID_FILEPATH_DESC \u003d \" \" + PREFIX_FILEPATH; // empty string not allowed for file path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final MemeEditCommand.EditMemeDescriptor DESC_CHARMANDER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final MemeEditCommand.EditMemeDescriptor DESC_JOKER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        DESC_CHARMANDER \u003d new EditMemeDescriptorBuilder().withFilePath(VALID_FILEPATH_CHARMANDER)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHARMANDER).withTags(VALID_TAG_CHARMANDER).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        DESC_JOKER \u003d new EditMemeDescriptorBuilder().withFilePath(VALID_FILEPATH_JOKER)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JOKER).withTags(VALID_TAG_JOKER).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Special method for executing the given AddCommand, checks whether the final model contains the newly added meme."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * AddCommand requires a different test method as checking for model equality does not work anymore due to"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * the command generating a different hash for the filename every time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static void assertAddCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Meme expectedMeme) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            int previousSize \u003d actualModel.getFilteredMemeList().size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            List\u003cMeme\u003e actualFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMemeList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Meme addedMeme \u003d actualFilteredList.get(actualFilteredList.size() - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            assertEquals(previousSize + 1, actualModel.getFilteredMemeList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            assertTrue(isSameMemeImage(expectedMeme, addedMeme));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Convenience wrapper to {@link #assertAddCommandSuccess(Command, Model, CommandResult, Meme)} that takes"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * a string {@code expectedMessage}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static void assertAddCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Meme expectedMeme) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertAddCommandSuccess(command, actualModel, expectedCommandResult, expectedMeme);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * - Weme, filtered meme list and selected meme in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme expectedWeme \u003d new Weme(actualModel.getWeme());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cMeme\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMemeList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedWeme, actualModel.getWeme());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredMemeList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the meme at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * {@code model}\u0027s Weme."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static void showMemeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMemeList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme meme \u003d model.getFilteredMemeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        final ImagePath filePath \u003d meme.getImagePath();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        model.updateFilteredMemeList(new PathMatchesPathPredicate(filePath));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(1, model.getFilteredMemeList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Deletes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static void deleteFirstMeme(Model model) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        int initialSize \u003d model.getFilteredMemeList().size();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(initialSize \u003e 0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme firstMeme \u003d model.getFilteredMemeList().get(0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.deleteMeme(firstMeme);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String feedback \u003d String.format(MESSAGE_DELETE_MEME_SUCCESS, firstMeme);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.commitWeme(feedback);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(initialSize - 1 \u003d\u003d model.getFilteredMemeList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "moziliar": 21,
      "jonchan51": 70,
      "-": 66,
      "cutieprobe": 4,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/generalcommand/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 14,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/generalcommand/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 14,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/generalcommand/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.deleteFirstMeme;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.undoWeme();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.undoWeme();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.undoWeme();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.undoWeme();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, expectedModel.redoWeme());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // multiple redo states"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(redoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, expectedModel.redoWeme());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // single redo state"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(redoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // no redo state"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 44,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/generalcommand/TabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_MEMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TabCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_tabMemes_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(String.format(TabCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                CONTEXT_MEMES.getContextName()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(new TabCommand(CONTEXT_MEMES), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 19,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/generalcommand/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.generalcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.deleteFirstMeme;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        deleteFirstMeme(expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, expectedModel.undoWeme());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // multiple undo states"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, expectedModel.undoWeme());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // single undo states"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(undoCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // no undo states"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 40,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/EditMemeDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESC_CHARMANDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESC_JOKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_FILEPATH_JOKER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_JOKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.EditMemeDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class EditMemeDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand.EditMemeDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                new MemeEditCommand.EditMemeDescriptor(DESC_CHARMANDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(DESC_CHARMANDER.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(DESC_CHARMANDER.equals(DESC_CHARMANDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DESC_CHARMANDER.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DESC_CHARMANDER.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DESC_CHARMANDER.equals(DESC_JOKER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // different url -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand.EditMemeDescriptor editedAmy \u003d new EditMemeDescriptorBuilder(DESC_CHARMANDER)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withFilePath(VALID_FILEPATH_JOKER).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DESC_CHARMANDER.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        editedAmy \u003d new EditMemeDescriptorBuilder(DESC_CHARMANDER).withDescription(VALID_DESCRIPTION_JOKER).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DESC_CHARMANDER.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        editedAmy \u003d new EditMemeDescriptorBuilder(DESC_CHARMANDER).withTags(VALID_TAG_JOKER).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DESC_CHARMANDER.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 17,
      "jonchan51": 6,
      "-": 25,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/MemeAddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertAddCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.testutil.UserPrefsBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code MemeAddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model \u003d new ModelManager(getTypicalWeme(), new UserPrefsBuilder().build());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TestUtil.clearSandBoxFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void execute_newMeme_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme validMeme \u003d new MemeBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        CommandTestUtil.assertAddCommandSuccess(new MemeAddCommand(validMeme), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                String.format(MemeAddCommand.MESSAGE_SUCCESS, validMeme), validMeme);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_duplicateMeme_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Meme validMeme \u003d new MemeBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.addMeme(validMeme);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertAddCommandSuccess(new MemeAddCommand(validMeme), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                String.format(MemeAddCommand.MESSAGE_SUCCESS, validMeme), validMeme);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 15,
      "-": 23,
      "cutieprobe": 3,
      "gary-lgy": 6
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/MemeAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.MemeUtil.isSameMemeImage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithCount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.template.MemeText;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.testutil.TestUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.testutil.UserPrefsBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeAddCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        TestUtil.clearSandBoxFolder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void constructor_nullMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MemeAddCommand(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_memeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ModelStubAcceptingMemeAdded modelStub \u003d new ModelStubAcceptingMemeAdded();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme validMeme \u003d new MemeBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        CommandResult commandResult \u003d new MemeAddCommand(validMeme).execute(modelStub);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(String.format(MemeAddCommand.MESSAGE_SUCCESS, validMeme), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(isSameMemeImage(validMeme, modelStub.memesAdded.get(modelStub.memesAdded.size() - 1)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme meme1 \u003d new MemeBuilder().withFilePath(\"src/test/data/memes/charmander_meme.jpg\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme meme2 \u003d new MemeBuilder().withFilePath(\"src/test/data/memes/joker_meme.jpg\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeAddCommand addMeme1Command \u003d new MemeAddCommand(meme1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeAddCommand addMeme2Command \u003d new MemeAddCommand(meme2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(addMeme1Command.equals(addMeme1Command));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeAddCommand addAliceCommandCopy \u003d new MemeAddCommand(meme1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(addMeme1Command.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(addMeme1Command.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(addMeme1Command.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // different meme -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(addMeme1Command.equals(addMeme2Command));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void importMemes() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public List\u003cPath\u003e getExportPathList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public Path getDefaultExportPath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void clearExportList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void clearImportList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void setImportedMeme(Meme target, Meme editedMeme) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void deleteImportedMeme(Meme target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public ObservableMap\u003cString, String\u003e getObservableUserPreferences() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void loadMemes(List\u003cPath\u003e pathList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Path getDataFilePath() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Path getMemeImagePath() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setMemeImagePath(Path memeImagePath) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Path getTemplateImagePath() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setTemplateImagePath(Path templateImagePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setWeme(ReadOnlyWeme newData) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public ReadOnlyWeme getWeme() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void addMeme(Meme meme) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void clearMemes() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public boolean hasMeme(Meme meme) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void deleteMeme(Meme target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void stageMeme(Meme meme) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public void unstageMeme(Meme meme) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void setMeme(Meme target, Meme editedMeme) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public boolean hasTemplate(Template template) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void deleteTemplate(Template template) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void addTemplate(Template template) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setTemplate(Template target, Template editedTemplate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public ObservableList\u003cMeme\u003e getFilteredMemeList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public ObservableList\u003cMeme\u003e getFilteredStagedMemeList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public ObservableList\u003cMeme\u003e getFilteredImportList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void updateFilteredMemeList(Predicate\u003cMeme\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public ObservableList\u003cTemplate\u003e getFilteredTemplateList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void updateFilteredTemplateList(Predicate\u003cTemplate\u003e predicate) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void setContext(ModelContext context) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public ObservableValue\u003cModelContext\u003e getContext() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void startMemeCreation(Template template) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public MemeCreation getMemeCreation() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public void abortMemeCreation() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public boolean canUndoWeme() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public boolean canRedoWeme() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public String undoWeme() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public String redoWeme() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void commitWeme(String feedback) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void cleanMemeStorage() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void cleanTemplateStorage() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public int getLikesByMeme(Meme meme) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public ObservableMap\u003cString, SimpleIntegerProperty\u003e getObservableLikeData() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public void incrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public void decrementMemeLikeCount(Meme meme) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public int getCountOfTag(Tag tag) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public List\u003cTagWithCount\u003e getTagsWithCountList() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public void clearMemeStats(Meme meme) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public Set\u003cString\u003e getPathRecords() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public Set\u003cString\u003e getDescriptionRecords() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public Set\u003cString\u003e getTagRecords() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public Set\u003cString\u003e getNameRecords() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public Set\u003cString\u003e getColorRecords() {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public void addMemeToRecords(Meme meme) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public void addTemplateToRecords(Template template) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public void addMemeTextToRecords(MemeText memeText) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * A Model stub that contains a single meme."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private class ModelStubWithMeme extends ModelStub {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        private final Meme meme;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ModelStubWithMeme(Meme meme) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            requireNonNull(meme);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            this.meme \u003d meme;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public boolean hasMeme(Meme meme) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            requireNonNull(meme);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return this.meme.isSameMeme(meme);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Path getMemeImagePath() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return UserPrefsBuilder.DEFAULT_MEME_IMAGE_PATH;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * A Model stub that always accept the meme being added."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private class ModelStubAcceptingMemeAdded extends ModelStub {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        final ArrayList\u003cMeme\u003e memesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public boolean hasMeme(Meme meme) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            requireNonNull(meme);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return memesAdded.stream().anyMatch(meme::isSameMeme);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void addMeme(Meme meme) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            requireNonNull(meme);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            memesAdded.add(meme);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public void commitWeme(String feedback) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            // called by {@code MemeAddCommand#execute()}"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public Path getMemeImagePath() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return UserPrefsBuilder.DEFAULT_MEME_IMAGE_PATH;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public ReadOnlyWeme getWeme() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new Weme();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public void addMemeToRecords(Meme meme) {}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public void addTemplateToRecords(Template template) {}"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public void addMemeTextToRecords(MemeText memeText) {}"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 66,
      "moziliar": 36,
      "jonchan51": 97,
      "-": 124,
      "cutieprobe": 64,
      "gary-lgy": 97
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/MemeClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_emptyWeme_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.commitWeme(MemeClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new MemeClearCommand(), model, MemeClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_nonEmptyWeme_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.clearMemes();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.commitWeme(MemeClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(new MemeClearCommand(), model, MemeClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 14,
      "-": 17,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/MemeDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.showMemeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * {@code MemeDeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeToDelete \u003d model.getFilteredMemeList().get(INDEX_FIRST_MEME.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand memeDeleteCommand \u003d new MemeDeleteCommand(INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MemeDeleteCommand.MESSAGE_DELETE_MEME_SUCCESS, memeToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.deleteMeme(memeToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String feedback \u003d String.format(MemeDeleteCommand.MESSAGE_DELETE_MEME_SUCCESS, memeToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.commitWeme(expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(memeDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemeList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand memeDeleteCommand \u003d new MemeDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(memeDeleteCommand, model, Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showMemeAtIndex(model, INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeToDelete \u003d model.getFilteredMemeList().get(INDEX_FIRST_MEME.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand memeDeleteCommand \u003d new MemeDeleteCommand(INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MemeDeleteCommand.MESSAGE_DELETE_MEME_SUCCESS, memeToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.deleteMeme(memeToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showNoMeme(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.commitWeme(expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(memeDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showMemeAtIndex(model, INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of meme list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWeme().getMemeList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand memeDeleteCommand \u003d new MemeDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(memeDeleteCommand, model, Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand deleteFirstCommand \u003d new MemeDeleteCommand(INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand deleteSecondCommand \u003d new MemeDeleteCommand(INDEX_SECOND_MEME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand deleteFirstCommandCopy \u003d new MemeDeleteCommand(INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // different meme -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void showNoMeme(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model.updateFilteredMemeList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(model.getFilteredMemeList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 48,
      "-": 63,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/MemeEditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESC_CHARMANDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESC_JOKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_FILEPATH_JOKER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.showMemeAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand.EditMemeDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.EditMemeDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * MemeEditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeEditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme editedMeme \u003d new MemeBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder(editedMeme).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand memeEditCommand \u003d new MemeEditCommand(INDEX_FIRST_MEME, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MemeEditCommand.MESSAGE_EDIT_MEME_SUCCESS, editedMeme);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Weme(model.getWeme()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.setMeme(model.getFilteredMemeList().get(0), editedMeme);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.commitWeme(expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(memeEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /* Logic about list filtering is not discussed yet."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredMemeList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme lastMeme \u003d model.getFilteredMemeList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeBuilder memeInList \u003d new MemeBuilder(lastMeme);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedMeme \u003d memeInList.withFilePath(VALID_FILEPATH_JOKER)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withFilePath(VALID_FILEPATH_JOKER).withTags(VALID_TAG_CHARMANDER).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder().withUrl(VALID_FILEPATH_JOKER)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withUrl(VALID_FILEPATH_JOKER).withTags(VALID_TAG_CHARMANDER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand editCommand \u003d new MemeEditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MemeEditCommand.MESSAGE_EDIT_MEME_SUCCESS, editedMeme);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Weme(model.getMemeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.setMeme(lastMeme, editedMeme);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand memeEditCommand \u003d new MemeEditCommand(INDEX_FIRST_MEME, new EditMemeDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme editedMeme \u003d model.getFilteredMemeList().get(INDEX_FIRST_MEME.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MemeEditCommand.MESSAGE_EDIT_MEME_SUCCESS, editedMeme);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Weme(model.getWeme()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.commitWeme(expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(memeEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showMemeAtIndex(model, INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeInFilteredList \u003d model.getFilteredMemeList().get(INDEX_FIRST_MEME.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedMeme \u003d new MemeBuilder(memeInFilteredList).withDescription(VALID_DESCRIPTION_JOKER).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand memeEditCommand \u003d new MemeEditCommand(INDEX_FIRST_MEME,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                new EditMemeDescriptorBuilder().withDescription(VALID_DESCRIPTION_JOKER).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MemeEditCommand.MESSAGE_EDIT_MEME_SUCCESS, editedMeme);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Weme(model.getWeme()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.setMeme(model.getFilteredMemeList().get(0), editedMeme);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.commitWeme(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showMemeAtIndex(expectedModel, INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(memeEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_duplicateMemeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme firstMeme \u003d model.getFilteredMemeList().get(INDEX_FIRST_MEME.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder(firstMeme).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand memeEditCommand \u003d new MemeEditCommand(INDEX_SECOND_MEME, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(memeEditCommand, model, MemeEditCommand.MESSAGE_DUPLICATE_MEME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_duplicateMemeFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showMemeAtIndex(model, INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // edit meme in filtered list into a duplicate in Weme"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme memeInList \u003d model.getWeme().getMemeList().get(INDEX_SECOND_MEME.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand memeEditCommand \u003d new MemeEditCommand(INDEX_FIRST_MEME,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                new EditMemeDescriptorBuilder(memeInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(memeEditCommand, model, MemeEditCommand.MESSAGE_DUPLICATE_MEME);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_invalidMemeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMemeList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder().withFilePath(VALID_FILEPATH_JOKER).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand memeEditCommand \u003d new MemeEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(memeEditCommand, model, Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * but smaller than size of the meme list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_invalidMemeIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showMemeAtIndex(model, INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of weme list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWeme().getMemeList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand memeEditCommand \u003d new MemeEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                new EditMemeDescriptorBuilder().withFilePath(VALID_FILEPATH_JOKER).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandFailure(memeEditCommand, model, Messages.MESSAGE_INVALID_MEME_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        final MemeEditCommand standardCommand \u003d new MemeEditCommand(INDEX_FIRST_MEME, DESC_CHARMANDER);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        EditMemeDescriptor copyDescriptor \u003d new EditMemeDescriptor(DESC_CHARMANDER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand commandWithSameValues \u003d new MemeEditCommand(INDEX_FIRST_MEME, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(standardCommand.equals(new MemeClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(standardCommand.equals(new MemeEditCommand(INDEX_SECOND_MEME, DESC_CHARMANDER)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(standardCommand.equals(new MemeEditCommand(INDEX_FIRST_MEME, DESC_JOKER)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 16,
      "jonchan51": 77,
      "-": 84,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/MemeFindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_MEMES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code MemeFindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeFindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeFindCommand findFirstCommand \u003d new MemeFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeFindCommand findSecondCommand \u003d new MemeFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeFindCommand findFirstCommandCopy \u003d new MemeFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // different meme -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_zeroKeywords_noMemeFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEMES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeFindCommand command \u003d new MemeFindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.updateFilteredMemeList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredMemeList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute_multipleKeywords_multipleMemesFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEMES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeFindCommand command \u003d new MemeFindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel.updateFilteredMemeList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredMemeList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private TagContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 11,
      "jonchan51": 23,
      "-": 45,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/commands/memecommand/MemeListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.commands.memecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.showMemeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for MemeListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        model \u003d new ModelManager(getTypicalWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWeme(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(new MemeListCommand(), model, MemeListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        showMemeAtIndex(model, INDEX_FIRST_MEME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertCommandSuccess(new MemeListCommand(), model, MemeListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 13,
      "-": 24,
      "cutieprobe": 4
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 149,
      "cutieprobe": 3
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/MemeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.TabCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeAddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand.EditMemeDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeFindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.MemeParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.WemeParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ModelContext;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.EditMemeDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final WemeParser parser \u003d new MemeParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme meme \u003d new MemeBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeAddCommand command \u003d (MemeAddCommand) parser.parseCommand(MemeUtil.getAddCommand(meme));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(new MemeAddCommand(meme), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(MemeClearCommand.COMMAND_WORD) instanceof MemeClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(MemeClearCommand.COMMAND_WORD + \" 3\") instanceof MemeClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeDeleteCommand command \u003d (MemeDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                MemeDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEME.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(new MemeDeleteCommand(INDEX_FIRST_MEME), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme meme \u003d new MemeBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder(meme).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        descriptor.setFilePath(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand command \u003d (MemeEditCommand) parser.parseCommand(MemeEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                + INDEX_FIRST_MEME.getOneBased() + \" \" + MemeUtil.getEditMemeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(new MemeEditCommand(INDEX_FIRST_MEME, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeFindCommand command \u003d (MemeFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                MemeFindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(new MemeFindCommand(new TagContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(MemeListCommand.COMMAND_WORD) instanceof MemeListCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(MemeListCommand.COMMAND_WORD + \" 3\") instanceof MemeListCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void parseCommand_tab() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            TabCommand.COMMAND_WORD + \" \" + ModelContext.CONTEXT_MEMES.getContextName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertTrue(command instanceof TabCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertEquals(new TabCommand(ModelContext.CONTEXT_MEMES), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "jonchan51": 80,
      "gary-lgy": 10,
      "cutieprobe": 11
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_MEMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.MemeParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.util.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private static final String INVALID_TAB \u003d \"NOT A TAB\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final String INVALID_FILEPATH \u003d \"Hello world\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Sit vitae voluptas sint non voluptates\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final String VALID_FILEPATH \u003d \"src/test/data/memes/charmander_meme.jpg\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void forContext_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(MemeParser.class, ParserUtil.forContext(CONTEXT_MEMES).getClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void parseTab_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTab(INVALID_TAB));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void parseTab_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String contextName \u003d CONTEXT_MEMES.getContextName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertEquals(CONTEXT_MEMES, ParserUtil.parseTab(contextName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // With whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertEquals(CONTEXT_MEMES, ParserUtil.parseTab(\" \" + contextName + \" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(INDEX_FIRST_MEME, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(INDEX_FIRST_MEME, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFilePath((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFilePath(INVALID_FILEPATH));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        ImagePath expectedName \u003d new ImagePath(VALID_FILEPATH);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseFilePath(VALID_FILEPATH));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String urlWithWhitespace \u003d WHITESPACE + VALID_FILEPATH + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        ImagePath expectedName \u003d new ImagePath(VALID_FILEPATH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseFilePath(urlWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 9,
      "moziliar": 10,
      "jonchan51": 22,
      "-": 108,
      "cutieprobe": 3,
      "gary-lgy": 11
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/WemeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.ModelContext.CONTEXT_MEMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.TabCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.generalcommand.UndoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.parser.contextparser.WemeParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class WemeParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final WemeParser parser \u003d new WemeParserStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 2\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 2\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_tab() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(TabCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                + CONTEXT_MEMES.getContextName()) instanceof TabCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    class WemeParserStub extends WemeParser {};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 59,
      "cutieprobe": 6
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/commandparser/importcommandparser/ImportDeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.parser.commandparser.importcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * outside of the ImportDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * same path through the ImportDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private ImportDeleteCommandParser parser \u003d new ImportDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ImportDeleteCommand(INDEX_FIRST_MEME));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 33
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/commandparser/importcommandparser/ImportEditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.logic.parser.commandparser.importcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JOKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.FILEPATH_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.TAG_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.TAG_DESC_JOKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHARMANDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_FILEPATH_CHARMANDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_CHARMANDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_JOKER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_THIRD_MEME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.importcommand.ImportEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand.EditMemeDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.testutil.EditMemeDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class ImportEditCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private ImportEditCommandParser parser \u003d new ImportEditCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, VALID_FILEPATH_CHARMANDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"1\", ImportEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"-5\" + FILEPATH_DESC_CHARMANDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"0\" + FILEPATH_DESC_CHARMANDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Meme} being edited,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHARMANDER + TAG_DESC_JOKER + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHARMANDER + TAG_EMPTY + TAG_DESC_JOKER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_CHARMANDER + TAG_DESC_JOKER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_JOKER"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                + DESCRIPTION_DESC_CHARMANDER + TAG_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHARMANDER)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .withTags(VALID_TAG_CHARMANDER, VALID_TAG_JOKER).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportEditCommand expectedCommand \u003d new ImportEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_JOKER;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JOKER).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportEditCommand expectedCommand \u003d new ImportEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MEME;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHARMANDER).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportEditCommand expectedCommand \u003d new ImportEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        descriptor \u003d new EditMemeDescriptorBuilder().withTags(VALID_TAG_CHARMANDER).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        expectedCommand \u003d new ImportEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_CHARMANDER"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                + TAG_DESC_CHARMANDER + DESCRIPTION_DESC_CHARMANDER + TAG_DESC_CHARMANDER"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                + DESCRIPTION_DESC_JOKER + TAG_DESC_JOKER;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JOKER).withTags(VALID_TAG_JOKER, VALID_TAG_CHARMANDER)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportEditCommand expectedCommand \u003d new ImportEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MEME;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        ImportEditCommand expectedCommand \u003d new ImportEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 146
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeAddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JOKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.FILEPATH_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.FILEPATH_DESC_JOKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.INVALID_FILEPATH_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.TAG_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.TAG_DESC_JOKER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_FILEPATH_JOKER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_CHARMANDER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_JOKER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.CHARMANDER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.JOKER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeAddCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private MemeAddCommandParser parser \u003d new MemeAddCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme expectedMeme \u003d new MemeBuilder(JOKER).withDescription(VALID_DESCRIPTION_JOKER)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withTags(VALID_TAG_JOKER).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // multiple paths - last paths accepted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseSuccess(parser, FILEPATH_DESC_CHARMANDER + FILEPATH_DESC_JOKER"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                + DESCRIPTION_DESC_JOKER + TAG_DESC_JOKER, new MemeAddCommand(expectedMeme));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseSuccess(parser, FILEPATH_DESC_JOKER + DESCRIPTION_DESC_CHARMANDER"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                + DESCRIPTION_DESC_JOKER + TAG_DESC_JOKER, new MemeAddCommand(expectedMeme));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme expectedMemeMultipleTags \u003d new MemeBuilder(JOKER).withTags(VALID_TAG_JOKER, VALID_TAG_CHARMANDER)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseSuccess(parser, FILEPATH_DESC_JOKER + DESCRIPTION_DESC_JOKER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                + TAG_DESC_JOKER + TAG_DESC_CHARMANDER, new MemeAddCommand(expectedMemeMultipleTags));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme expectedMeme \u003d new MemeBuilder(CHARMANDER).withTags().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseSuccess(parser, FILEPATH_DESC_CHARMANDER + DESCRIPTION_DESC_CHARMANDER,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                new MemeAddCommand(expectedMeme));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // Empty Description"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, VALID_FILEPATH_JOKER + DESCRIPTION_DESC_JOKER,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, VALID_FILEPATH_JOKER + VALID_DESCRIPTION_JOKER,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, INVALID_FILEPATH_DESC + DESCRIPTION_DESC_JOKER"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                + TAG_DESC_JOKER + TAG_DESC_CHARMANDER, ImagePath.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, FILEPATH_DESC_JOKER + DESCRIPTION_DESC_JOKER"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_JOKER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + FILEPATH_DESC_JOKER"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                + DESCRIPTION_DESC_JOKER + TAG_DESC_JOKER + TAG_DESC_CHARMANDER,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "moziliar": 30,
      "jonchan51": 18,
      "-": 37,
      "cutieprobe": 2,
      "gary-lgy": 2
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeDeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * outside of the MemeDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * same path through the MemeDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private MemeDeleteCommandParser parser \u003d new MemeDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MemeDeleteCommand(INDEX_FIRST_MEME));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 10,
      "-": 20,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeEditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JOKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.FILEPATH_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.TAG_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.TAG_DESC_JOKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHARMANDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_FILEPATH_CHARMANDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_CHARMANDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_JOKER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalIndexes.INDEX_THIRD_MEME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand.EditMemeDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.EditMemeDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeEditCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private MemeEditCommandParser parser \u003d new MemeEditCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, VALID_FILEPATH_CHARMANDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertParseFailure(parser, \"1\", MemeEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, \"-5\" + FILEPATH_DESC_CHARMANDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, \"0\" + FILEPATH_DESC_CHARMANDER, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Meme} being edited,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHARMANDER + TAG_DESC_JOKER + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHARMANDER + TAG_EMPTY + TAG_DESC_JOKER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_CHARMANDER + TAG_DESC_JOKER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_MEME;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_JOKER"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                + DESCRIPTION_DESC_CHARMANDER + TAG_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHARMANDER)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withTags(VALID_TAG_CHARMANDER, VALID_TAG_JOKER).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand expectedCommand \u003d new MemeEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_JOKER;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand.EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JOKER).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand expectedCommand \u003d new MemeEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MEME;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHARMANDER).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand expectedCommand \u003d new MemeEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CHARMANDER;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        descriptor \u003d new EditMemeDescriptorBuilder().withTags(VALID_TAG_CHARMANDER).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedCommand \u003d new MemeEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEME;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_CHARMANDER"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                + TAG_DESC_CHARMANDER + DESCRIPTION_DESC_CHARMANDER + TAG_DESC_CHARMANDER"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                + DESCRIPTION_DESC_JOKER + TAG_DESC_JOKER;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JOKER).withTags(VALID_TAG_JOKER, VALID_TAG_CHARMANDER)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand expectedCommand \u003d new MemeEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MEME;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        EditMemeDescriptor descriptor \u003d new EditMemeDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeEditCommand expectedCommand \u003d new MemeEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 32,
      "jonchan51": 30,
      "-": 79,
      "cutieprobe": 5
    }
  },
  {
    "path": "src/test/java/seedu/weme/logic/parser/commandparser/memecommandparser/MemeFindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "package seedu.weme.logic.parser.commandparser.memecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private MemeFindCommandParser parser \u003d new MemeFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MemeFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        MemeFindCommand expectedMemeFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                new MemeFindCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedMemeFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedMemeFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 1,
      "jonchan51": 11,
      "-": 21,
      "cutieprobe": 2
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.model.Model.PREDICATE_SHOW_ALL_UNARCHIVED_MEMES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.DOGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.JOKER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.meme.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.Stats;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.StatsManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.WemeBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(new Weme(), new Weme(modelManager.getWeme()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"weme/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"new/weme/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setWemeFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setDataFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setWemeFilePath_validPath_setsWemeFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Path path \u003d Paths.get(\"weme/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        modelManager.setDataFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertEquals(path, modelManager.getDataFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void hasMeme_nullMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasMeme(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void hasMeme_memeNotInWeme_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(modelManager.hasMeme(DOGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void hasMeme_memeInWeme_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        modelManager.addMeme(DOGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(modelManager.hasMeme(DOGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void getFilteredMemeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredMemeList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme weme \u003d new WemeBuilder().withMeme(DOGE).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme differentWeme \u003d new Weme();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Stats stats \u003d new StatsManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        Records records \u003d new RecordsManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        modelManager \u003d new ModelManager(weme, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(weme, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // different Weme -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentWeme, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        modelManager.updateFilteredMemeList(PREDICATE_SHOW_ALL_UNARCHIVED_MEMES);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String[] keywords \u003d JOKER.getImagePath().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        modelManager.updateFilteredMemeList(new TagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(weme, userPrefs)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        differentUserPrefs.setDataFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(weme, differentUserPrefs)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "moziliar": 11,
      "jonchan51": 24,
      "-": 93,
      "gary-lgy": 6,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setDataFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setDataFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setMemeImagePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMemeImagePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void setExportPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setExportPath(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void setTemplateImagePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTemplateImagePath(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 6,
      "jonchan51": 2,
      "-": 17,
      "gary-lgy": 14
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/WemeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_FILEPATH_JOKER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_JOKER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.DOGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.JOKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.exceptions.DuplicateMemeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.Stats;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.StatsManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithCount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import seedu.weme.model.statistics.TagWithLike;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.MemeCreation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class WemeTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final Weme weme \u003d new Weme();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(Collections.emptyList(), weme.getMemeList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e weme.resetData(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void resetData_withValidReadOnlyWeme_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme newData \u003d getTypicalWeme();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(newData, weme);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void resetData_withDuplicateMemes_throwsDuplicateMemeException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // Two memes with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedAlice \u003d new MemeBuilder(JOKER).withDescription(VALID_DESCRIPTION_JOKER)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withFilePath(VALID_FILEPATH_JOKER).withTags(VALID_TAG_JOKER).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cMeme\u003e newMemes \u003d Arrays.asList(JOKER, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        WemeStub newData \u003d new WemeStub();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        newData.setMemes(newMemes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(DuplicateMemeException.class, () -\u003e weme.resetData(newData));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void hasMeme_nullMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e weme.hasMeme(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void hasMeme_memeNotInWeme_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(weme.hasMeme(DOGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void hasMeme_memeInWeme_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme.addMeme(DOGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(weme.hasMeme(DOGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void hasMeme_memeWithSameIdentityFieldsInWeme_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme.addMeme(JOKER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedBob \u003d new MemeBuilder(JOKER).withDescription(VALID_DESCRIPTION_JOKER)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withFilePath(VALID_FILEPATH_JOKER)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withTags(VALID_TAG_JOKER).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(weme.hasMeme(editedBob));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void getMemeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e weme.getMemeList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * A stub ReadOnlyWeme whose memes list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static class WemeStub implements ReadOnlyWeme {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        private final ObservableList\u003cMeme\u003e memes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        private final ObservableList\u003cMeme\u003e stagedMemes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        private final ObservableList\u003cMeme\u003e importList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private final ObservableList\u003cTemplate\u003e templates \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        private final Stats stats \u003d new StatsManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        private final Records records \u003d new RecordsManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        private final MemeCreation memeCreeation \u003d new MemeCreation();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        WemeStub() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        void setMemes(List\u003cMeme\u003e memes) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            this.memes.setAll(memes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public Stats getStats() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return stats;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        public ObservableList\u003cMeme\u003e getMemeList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return memes;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public ObservableList\u003cMeme\u003e getStagedMemeList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return stagedMemes;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        public ObservableList\u003cMeme\u003e getImportList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "            return importList;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public ObservableList\u003cTemplate\u003e getTemplateList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return templates;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public int getCountOfTag(Tag tag) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return stats.getCountOfTag(getMemeList(), tag);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public List\u003cTagWithCount\u003e getTagsWithCountList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return stats.getTagsWithCountList(memes);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        public List\u003cTagWithLike\u003e getTagsWithLikeCountList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            return stats.getTagsWithLikeCountList(memes);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        public Records getRecords() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "            return records;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        public MemeCreation getMemeCreation() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return memeCreeation;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 11,
      "moziliar": 31,
      "jonchan51": 37,
      "-": 56,
      "cutieprobe": 12,
      "gary-lgy": 18
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/meme/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertTrue(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertTrue(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Surprised Pikachu Meme\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertTrue(Description.isValidDescription("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \"Roses are red Violets are blue Every man is cool Until the Cockroach flew\")); // long description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 26,
      "jonchan51": 2
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/meme/ImagePathTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class ImagePathTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ImagePath(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void constructor_invalidFilePath_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String invalidUrl \u003d \"hello\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ImagePath(invalidUrl));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void isValidFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // null file path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ImagePath.isValidFilePath(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // invalid file paths"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(ImagePath.isValidFilePath(\"hello\")); // invalid file path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(ImagePath.isValidFilePath(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        // valid file path"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(ImagePath.isValidFilePath(\"src/test/data/memes/charmander_meme.jpg\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 30,
      "gary-lgy": 6
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/meme/MemeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_FILEPATH_JOKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_CHARMANDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.DOGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.JOKER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Meme meme \u003d new MemeBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e meme.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void isSameUrl() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(DOGE.isSameMeme(DOGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DOGE.isSameMeme(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedAlice \u003d new MemeBuilder(DOGE).withDescription(VALID_DESCRIPTION_JOKER)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                .withTags(VALID_TAG_CHARMANDER).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(DOGE.isSameMeme(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme aliceCopy \u003d new MemeBuilder(DOGE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(DOGE.equals(aliceCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(DOGE.equals(DOGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DOGE.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DOGE.equals(5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        // different meme -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DOGE.equals(JOKER));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // different url -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedAlice \u003d new MemeBuilder(DOGE).withFilePath(VALID_FILEPATH_JOKER).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DOGE.equals(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        editedAlice \u003d new MemeBuilder(DOGE).withTags(VALID_TAG_CHARMANDER).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(DOGE.equals(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 22,
      "jonchan51": 7,
      "-": 34,
      "cutieprobe": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/meme/TagContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "moziliar"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        // different meme -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "moziliar"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 39
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/meme/UniqueMemeListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.meme;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JOKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.logic.commands.CommandTestUtil.VALID_TAG_CHARMANDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.CHARMANDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.DOGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.JOKER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.exceptions.DuplicateMemeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.exceptions.MemeNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.MemeBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class UniqueMemeListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final UniqueMemeList uniqueMemeList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void contains_nullMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemeList.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void contains_memeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertFalse(uniqueMemeList.contains(DOGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void contains_memeInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertTrue(uniqueMemeList.contains(DOGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void contains_memeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedAlice \u003d new MemeBuilder(DOGE).withDescription(VALID_DESCRIPTION_JOKER).withTags(VALID_TAG_CHARMANDER)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertTrue(uniqueMemeList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void add_nullMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemeList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void add_duplicateMeme_throwsDuplicateMemeException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(DuplicateMemeException.class, () -\u003e uniqueMemeList.add(DOGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme_nullTargetMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemeList.setMeme(null, DOGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme_nullEditedMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemeList.setMeme(DOGE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme_targetMemeNotInList_throwsMemeNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(MemeNotFoundException.class, () -\u003e uniqueMemeList.setMeme(DOGE, DOGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme_editedMemeIsSameMeme_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.setMeme(DOGE, DOGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        UniqueMemeList expectedUniqueMemeList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        expectedUniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme_editedMemeHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Meme editedAlice \u003d new MemeBuilder(DOGE).withDescription(VALID_DESCRIPTION_JOKER).withTags(VALID_TAG_CHARMANDER)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.setMeme(DOGE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        UniqueMemeList expectedUniqueMemeList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        expectedUniqueMemeList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme_editedMemeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.setMeme(DOGE, JOKER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        UniqueMemeList expectedUniqueMemeList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        expectedUniqueMemeList.add(JOKER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMeme_editedMemeHasNonUniqueIdentity_throwsDuplicateMemeException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(JOKER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(DuplicateMemeException.class, () -\u003e uniqueMemeList.setMeme(DOGE, JOKER));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void remove_nullMeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemeList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void remove_memeDoesNotExist_throwsMemeNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(MemeNotFoundException.class, () -\u003e uniqueMemeList.remove(DOGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void remove_existingMeme_removesMeme() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.remove(DOGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        UniqueMemeList expectedUniqueMemeList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void empty_pathList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cPath\u003e expectedUniqueMemeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList.asPathList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void convert_toPathList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        uniqueMemeList.add(JOKER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        uniqueMemeList.add(CHARMANDER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        List\u003cPath\u003e expectedUniqueMemeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        expectedUniqueMemeList.add(DOGE.getImagePath().getFilePath());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        expectedUniqueMemeList.add(JOKER.getImagePath().getFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        expectedUniqueMemeList.add(CHARMANDER.getImagePath().getFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList.asPathList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes_nullUniqueMemeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemeList.setMemes((UniqueMemeList) null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes_uniqueMemeList_replacesOwnListWithProvidedUniqueMemeList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        UniqueMemeList expectedUniqueMemeList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        expectedUniqueMemeList.add(JOKER);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        uniqueMemeList.setMemes(expectedUniqueMemeList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMemeList.setMemes((List\u003cMeme\u003e) null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        uniqueMemeList.add(DOGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cMeme\u003e memeList \u003d Collections.singletonList(JOKER);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        uniqueMemeList.setMemes(memeList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        UniqueMemeList expectedUniqueMemeList \u003d new UniqueMemeList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        expectedUniqueMemeList.add(JOKER);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(expectedUniqueMemeList, uniqueMemeList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setMemes_listWithDuplicateMemes_throwsDuplicateMemeException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        List\u003cMeme\u003e listWithDuplicateMemes \u003d Arrays.asList(DOGE, DOGE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(DuplicateMemeException.class, () -\u003e uniqueMemeList.setMemes(listWithDuplicateMemes));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            -\u003e uniqueMemeList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 22,
      "moziliar": 35,
      "jonchan51": 51,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/weme/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/weme/storage/JsonAdaptedMemeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.storage.JsonAdaptedMeme.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.JOKER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class JsonAdaptedMemeTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final String INVALID_URL \u003d \"hello world\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d JOKER.getDescription().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private static final String VALID_URL \u003d JOKER.getImagePath().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d JOKER.getTags().stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void toModelType_validMemeDetails_returnsMeme() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        JsonAdaptedMeme meme \u003d new JsonAdaptedMeme(JOKER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertEquals(JOKER, meme.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void toModelType_nullPath_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonAdaptedMeme meme \u003d new JsonAdaptedMeme(null, VALID_DESCRIPTION, VALID_TAGS, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ImagePath.class.getSimpleName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meme::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public void toModelType_invalidPath_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonAdaptedMeme meme \u003d new JsonAdaptedMeme(INVALID_URL, VALID_DESCRIPTION, VALID_TAGS, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(IllegalValueException.class, meme::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonAdaptedMeme meme \u003d new JsonAdaptedMeme(VALID_URL, null, VALID_TAGS, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, meme::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonAdaptedMeme meme \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                new JsonAdaptedMeme(VALID_URL, VALID_DESCRIPTION, invalidTags, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(IllegalValueException.class, meme::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 4,
      "moziliar": 10,
      "jonchan51": 14,
      "-": 34,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/storage/JsonSerializableWemeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.testutil.TypicalWeme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class JsonSerializableWemeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableWemeTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final Path TYPICAL_WEME_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalWeme.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Path INVALID_MEME_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMemeWeme.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Path DUPLICATE_MEME_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateMemeWeme.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Path INVALID_TEMPLATE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTemplateWeme.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Path DUPLICATE_TEMPLATE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTemplateWeme.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void toModelType_typicalMemesFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonSerializableWeme dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_WEME_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                JsonSerializableWeme.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme wemeFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme typicalWeme \u003d TypicalWeme.getTypicalWeme();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(wemeFromFile, typicalWeme);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void toModelType_invalidMemes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        JsonSerializableWeme dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MEME_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                JsonSerializableWeme.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void toModelType_duplicateMemes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        JsonSerializableWeme dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MEME_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "                JsonSerializableWeme.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableWeme.MESSAGE_DUPLICATE_MEME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void toModelType_invalidTemplates_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        JsonSerializableWeme dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TEMPLATE_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            JsonSerializableWeme.class).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public void toModelType_duplicateTemplates_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        JsonSerializableWeme dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TEMPLATE_FILE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            JsonSerializableWeme.class).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableWeme.MESSAGE_DUPLICATE_TEMPLATE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 17,
      "jonchan51": 13,
      "-": 23,
      "gary-lgy": 11
    }
  },
  {
    "path": "src/test/java/seedu/weme/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setDataFilePath(Paths.get(\"data\", \"weme.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setMemeImagePath(Paths.get(\"data\", \"memes\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        userPrefs.setTemplateImagePath(Paths.get(\"data\", \"templates\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 5,
      "-": 117,
      "gary-lgy": 3
    }
  },
  {
    "path": "src/test/java/seedu/weme/storage/JsonWemeStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "moziliar"
        },
        "content": "import static seedu.weme.testutil.TypicalMemes.DOGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "public class JsonWemeStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonWemeStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void readWeme_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readWeme(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWeme\u003e readWeme(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return new JsonWemeStorage(Paths.get(filePath)).readWeme(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertFalse(readWeme(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWeme(\"notJsonFormatWeme.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void readWeme_invalidMemeWeme_throwDataConversionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWeme(\"invalidMemeWeme.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void readWeme_invalidAndValidMemeWeme_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWeme(\"invalidAndValidMemeWeme.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void readAndSaveWeme_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempWeme.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme original \u003d getTypicalWeme();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonWemeStorage jsonWemeStorage \u003d new JsonWemeStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        jsonWemeStorage.saveWeme(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ReadOnlyWeme readBack \u003d jsonWemeStorage.readWeme(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(original, new Weme(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        original.removeMeme(DOGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        jsonWemeStorage.saveWeme(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        readBack \u003d jsonWemeStorage.readWeme(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(original, new Weme(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        original.addMeme(DOGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        jsonWemeStorage.saveWeme(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        readBack \u003d jsonWemeStorage.readWeme().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(original, new Weme(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void saveWeme_nullWeme_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWeme(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Saves {@code weme} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void saveWeme(ReadOnlyWeme weme, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            new JsonWemeStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    .saveWeme(weme, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void saveWeme_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWeme(new Weme(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 8,
      "jonchan51": 34,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/weme/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.TypicalWeme.getTypicalWeme;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.ReadOnlyWeme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        JsonWemeStorage wemeStorage \u003d new JsonWemeStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        storageManager \u003d new StorageManager(wemeStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void wemeReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "moziliar"
        },
        "content": "         * {@link JsonWemeStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "moziliar"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonWemeStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme original \u003d getTypicalWeme();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        storageManager.saveWeme(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ReadOnlyWeme retrieved \u003d storageManager.readWeme().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(original, new Weme(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void getWemeFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertNotNull(storageManager.getWemeFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 3,
      "jonchan51": 14,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/EditMemeDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand.EditMemeDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A utility class to help with building EditMemeDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class EditMemeDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private MemeEditCommand.EditMemeDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public EditMemeDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        descriptor \u003d new EditMemeDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public EditMemeDescriptorBuilder(MemeEditCommand.EditMemeDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.descriptor \u003d new EditMemeDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns an {@code EditMemeDescriptor} with fields containing {@code meme}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public EditMemeDescriptorBuilder(Meme meme) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        descriptor \u003d new EditMemeDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        descriptor.setFilePath(meme.getImagePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        descriptor.setDescription(meme.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        descriptor.setTags(meme.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Sets the {@code Description} of the {@code EditMemeDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public EditMemeDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Sets the {@code ImageUrl} of the {@code EditMemeDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public EditMemeDescriptorBuilder withFilePath(String filePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        descriptor.setFilePath(new ImagePath(filePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditMemeDescriptor}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public EditMemeDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeEditCommand.EditMemeDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 3,
      "moziliar": 8,
      "jonchan51": 17,
      "-": 39,
      "cutieprobe": 2,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/MemeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "import seedu.weme.model.meme.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A utility class to help with building Meme objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Meme created for testing.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final String DEFAULT_FILEPATH \u003d \"src/test/data/memes/test_meme.jpg\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    private ImagePath filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        filePath \u003d new ImagePath(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Initializes the MemeBuilder with the data of {@code memeToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeBuilder(Meme memeToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        description \u003d memeToCopy.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        filePath \u003d memeToCopy.getImagePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(memeToCopy.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Meme} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public MemeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * Sets the {@code Description} of the {@code Meme} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "    public MemeBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * Sets the {@code ImageUrl} of the {@code Meme} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "moziliar"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public MemeBuilder withFilePath(String filePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        this.filePath \u003d new ImagePath(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "moziliar"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Meme build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return new Meme(filePath, description, tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 9,
      "moziliar": 14,
      "jonchan51": 13,
      "-": 32,
      "gary-lgy": 1
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/MemeUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.commons.util.FileUtil.MESSAGE_READ_FILE_FAILURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_FILEPATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import static seedu.weme.logic.parser.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cutieprobe"
        },
        "content": "import seedu.weme.logic.commands.memecommand.MemeEditCommand.EditMemeDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A utility class for Meme."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MemeUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns an add command string for adding the {@code meme}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static String getAddCommand(Meme meme) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return MemeAddCommand.COMMAND_WORD + \" \" + getMemeDetails(meme);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the part of command string for the given {@code meme}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static String getMemeDetails(Meme meme) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        sb.append(PREFIX_FILEPATH + meme.getImagePath().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + meme.getDescription().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        meme.getTags().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the part of command string for the given {@code EditMemeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static String getEditMemeDescriptorDetails(EditMemeDescriptor descriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        //descriptor.getFilePath().ifPresent(path -\u003e sb.append(PREFIX_FILEPATH).append(path.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the SHA-1 hash of a given file as a String."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static String generateSha1Hash(Path file) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            byte[] content \u003d Files.readAllBytes(file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return StringUtil.byteArrayToHex(digest.digest(content));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (NoSuchAlgorithmException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new IllegalArgumentException(String.format(MESSAGE_READ_FILE_FAILURE, file.toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if {@code firstMeme} and {@code secondMeme} supplied have the same SHA-1 hash,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * and therefore the same contents."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static boolean isSameMemeImage(Meme firstMeme, Meme secondMeme) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        return generateSha1Hash(firstMeme.getImagePath().getFilePath())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "                .equals(generateSha1Hash(secondMeme.getImagePath().getFilePath()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 6,
      "moziliar": 1,
      "jonchan51": 36,
      "-": 34,
      "cutieprobe": 5,
      "gary-lgy": 8
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/TemplateBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.imagePath.ImagePath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * A utility class to help with building Template objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TemplateBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Drake Reaction\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final String DEFAULT_FILEPATH \u003d \"src/test/data/templates/drake_template.jpg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private ImagePath filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        filePath \u003d new ImagePath(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Initializes the MemeBuilder with the data of {@code templateToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateBuilder(Template templateToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        name \u003d templateToCopy.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LivingOnEdge"
        },
        "content": "        filePath \u003d templateToCopy.getImagePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the {@code Name} of the {@code Template} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the {@code ImagePath} of the {@code Template} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public TemplateBuilder withFilePath(String filePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.filePath \u003d new ImagePath(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public Template build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new Template(name, filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LivingOnEdge": 1,
      "gary-lgy": 55
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.io.UncheckedIOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Clears all files and directories in the sandbox folder."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static void clearSandBoxFolder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        if (!Files.exists(SANDBOX_FOLDER)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            Files.walk(SANDBOX_FOLDER)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                .map(Path::toFile)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "                .forEach(File::delete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "            throw new UncheckedIOException(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the middle index of the meme in the {@code model}\u0027s meme list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMemeList().size() / 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the last index of the meme in the {@code model}\u0027s meme list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMemeList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the meme in the {@code model}\u0027s meme list at {@code index}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static Meme getMeme(Model model, Index index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return model.getFilteredMemeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 11,
      "-": 44,
      "gary-lgy": 21
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final Index INDEX_FIRST_MEME \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final Index INDEX_SECOND_MEME \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static final Index INDEX_THIRD_MEME \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/TypicalMemes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A utility class containing a list of {@code Meme} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TypicalMemes {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final Meme CHARMANDER \u003d new MemeBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withFilePath(\"src/test/data/memes/charmander_meme.jpg\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withDescription(\"A meme about Char and charmander.\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withTags(\"charmander\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final Meme DOGE \u003d new MemeBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withFilePath(\"src/test/data/memes/doge_meme.jpg\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withDescription(\"A meme about doge.\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withTags(\"doge\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final Meme JOKER \u003d new MemeBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withFilePath(\"src/test/data/memes/joker_meme.jpg\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withDescription(\"A meme about joker.\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withTags(\"joker\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "moziliar"
        },
        "content": "    public static final Meme TOY \u003d new MemeBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withFilePath(\"src/test/data/memes/toy_meme.jpg\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withDescription(\"A toy story meme.\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "moziliar"
        },
        "content": "            .withTags(\"toy\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private TypicalMemes() {} // prevents instantiation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static List\u003cMeme\u003e getTypicalMemes() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "moziliar"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CHARMANDER, DOGE, JOKER, TOY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "moziliar": 17,
      "jonchan51": 6,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/TypicalTemplates.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.template.Template;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * A utility class containing a list of {@code Template} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class TypicalTemplates {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Template DRAKE \u003d new TemplateBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .withName(\"Drake Reaction\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .withFilePath(\"src/test/data/templates/drake_template.jpg\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Template IS_THIS \u003d new TemplateBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .withName(\"Is This\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .withFilePath(\"src/test/data/templates/is_this_template.jpg\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Template QUIZ_KID \u003d new TemplateBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .withName(\"Quiz Kid\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .withFilePath(\"src/test/data/templates/quiz_kid_template.jpg\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private TypicalTemplates() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static List\u003cTemplate\u003e getTypicalTemplates() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DRAKE, IS_THIS, QUIZ_KID));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 33
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/TypicalWeme.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A utility class for constructing typical {@code Weme} objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TypicalWeme {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private TypicalWeme() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a {@code Weme} with all the typical memes and templates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static Weme getTypicalWeme() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Weme weme \u003d new Weme();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme.setMemes(TypicalMemes.getTypicalMemes());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme.setTemplates(TypicalTemplates.getTypicalTemplates());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return weme;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 23
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/UserPrefsBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "import seedu.weme.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " * A utility class to help with building {@code UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "public class UserPrefsBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final GuiSettings DEFAULT_GUI_SETTINGS \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Path DEFAULT_DATA_FILE_PATH \u003d TestUtil.getFilePathInSandboxFolder(\"data/weme.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Path DEFAULT_MEME_IMAGE_PATH \u003d TestUtil.getFilePathInSandboxFolder(\"data/memes\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public static final Path DEFAULT_TEMPLATE_IMAGE_PATH \u003d TestUtil.getFilePathInSandboxFolder(\"data/templates\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Path dataFilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Path memeImagePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    private Path templateImagePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public UserPrefsBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        guiSettings \u003d DEFAULT_GUI_SETTINGS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        dataFilePath \u003d DEFAULT_DATA_FILE_PATH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeImagePath \u003d DEFAULT_MEME_IMAGE_PATH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templateImagePath \u003d DEFAULT_TEMPLATE_IMAGE_PATH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Initializes the UserPrefsBuilder with the data of {@code userPrefsToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public UserPrefsBuilder(ReadOnlyUserPrefs userPrefsToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        guiSettings \u003d userPrefsToCopy.getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        dataFilePath \u003d userPrefsToCopy.getDataFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        memeImagePath \u003d userPrefsToCopy.getMemeImagePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        templateImagePath \u003d userPrefsToCopy.getTemplateImagePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the {@code GuiSettings} of the {@code UserPrefs} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param guiSettings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public UserPrefsBuilder withGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        double width \u003d guiSettings.getWindowWidth();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        double height \u003d guiSettings.getWindowHeight();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        Point coordinates \u003d guiSettings.getWindowCoordinates();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.guiSettings \u003d new GuiSettings(width, height, coordinates.x, coordinates.y);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the data file path of the {@code UserPrefs} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param dataFilePath"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public UserPrefsBuilder withDataFilePath(Path dataFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.dataFilePath \u003d dataFilePath.toFile().toPath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the meme image path of the {@code UserPrefs} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param memeImagePath"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public UserPrefsBuilder withMemeImagePath(Path memeImagePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.memeImagePath \u003d memeImagePath.toFile().toPath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Sets the template image path of the {@code UserPrefs} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @param templateImagePath"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public UserPrefsBuilder withTemplateImagePath(Path templateImagePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        this.templateImagePath \u003d templateImagePath.toFile().toPath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * Returns the {@code UserPrefs} that we have built."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     * @return the {@code UserPrefs} that we have built"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    public UserPrefs build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        UserPrefs ret \u003d new UserPrefs();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ret.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ret.setDataFilePath(dataFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ret.setMemeImagePath(memeImagePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        ret.setTemplateImagePath(templateImagePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gary-lgy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gary-lgy": 99
    }
  },
  {
    "path": "src/test/java/seedu/weme/testutil/WemeBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.Weme;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.model.meme.Meme;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A utility class to help with building Weme objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " *     {@code Weme mb \u003d new WemeBuilder().withMeme(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class WemeBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Weme weme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public WemeBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme \u003d new Weme();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public WemeBuilder(Weme weme) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.weme \u003d weme;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Adds a new {@code Meme} to the {@code Weme} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public WemeBuilder withMeme(Meme meme) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        weme.addMeme(meme);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Weme build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return weme;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 34
    }
  },
  {
    "path": "src/test/java/seedu/weme/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/weme/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package seedu.weme.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static seedu.weme.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import seedu.weme.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import seedu.weme.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003cfx:root type\u003d\"seedu.weme.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 1,
      "-": 5
    }
  }
]
