[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d ClerkPro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-T09-3/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-T09-3/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T09-3/main?branch\u003dmaster\u0026service\u003dgithub[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T09-3/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/ceb8f1f4a3b2465c973e0ba579f75c78[\"Codacy code quality\", link\u003d\"https://www.codacy.com/manual/SakuraBlossom/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103T-T09-3/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "https://app.netlify.com/sites/clerkpro/deploys[image:https://api.netlify.com/api/v1/badges/7802a5fb-00fd-4e32-869e-6934507679f2/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* ClerkPro is a clinic management application reduces the workload of the clerk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* ClerkPro is a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* ClerkPro is intended for clerks/receptionists at small neighbourhood clinics."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** Manages patient appointments; arrange follow-up appointment dates."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** Assists in the queue management, by allocating patients to available doctors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** Monitors inventory in the clinic (v2)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** Manages patientsâ€™ contact information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** View the summary of ad-hoc and appointment visits; busy hours of the day."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** Be alerted about patients missing their appointments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** Auto suggestion for CLI commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* This project was built off from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org[se-edu]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5], https://github.com/JFXtras/jfxtras[JFXtras]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 16,
      "SakuraBlossom": 2,
      "CarbonGrid": 1,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    String jUnitVersion \u003d \u00275.5.2\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    implementation group: \u0027org.assertj\u0027, name: \u0027assertj-core\u0027, version: \u00273.13.2\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    implementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: \u00274.0.16-alpha\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    implementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit5\u0027, version: \u00274.0.16-alpha\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    archiveName \u003d \u0027ClerkPro_v1.2.1.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u0027site-name\u0027: \u0027ClerkPro\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T09-3/main\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 11,
      "-": 147
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "ClerkPro is developed by a project team of CS2103T in NUS. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "The project is a fork from AddressBook - Level 3 which was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d\u003d SakuraBlossom"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "image::sakurablossom.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "{empty}[http://github.com/SakuraBlossom[github]] [\u003c\u003csakurablossom#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Role: Team Lead"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ". CRUD for patients, doctors and appointment models"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ". Eager Evaluation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ". Undo/Redo functionality"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ". Integration of project items"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d\u003d CarbonGrid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "image::carbongrid.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "{empty}[http://github.com/CarbonGrid[github]] [\u003c\u003ccarbongrid#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ". AutoCompleter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ". History"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ". UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d\u003d woon17"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "image::woon17.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "{empty}[http://github.com/woon17[github]] [\u003c\u003cwoon17#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ". Logic for Appointment models"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ". Scheduling"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ". Code quality, deliverable and deadlines"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d\u003d wongsm7"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "image::wongsm7.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "{empty}[http://github.com/wongsm7[github]] [\u003c\u003cwongsm7#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ". Logic for Queue Management System"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ". Quality of various project documents"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 13,
      "CarbonGrid": 25,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T09-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/AY1920S1-CS2103T-T09-3/main[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "* *Email us* : You can also reach us at `e0318773@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "woon17": 3
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d ClerkPro - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d ClerkPro - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "By: `Team T09-3` Â Â Â Â  Since: `Sep 2019` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    * A `Command` object can be classified as one of two types, a reversible command and a Non-Actionable command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    * Reversible command refers to any action which modifies the data in the system\u0027s model."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    * Conversely, a Non-Actionable command only reads data from the system\u0027s model without modifying it."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    *  If the user intends to execute a reversible command, an ActionPair command is created and pushed into an undo stack."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        The ActionPair command contains a pairing of of the action itself and its inverse."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        (e.g. Pairing \u0027add person A\u0027 and \u0027delete person A\u0027 command)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    *  If the user intends to execute a Non-Actionable command, the command will be directly executed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `next 1` and `enqueue 001A` API call."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ".Interactions inside the Logic Component for the `enqueue 001A` Command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "image::EnqueueSequenceDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ".Interactions inside the Logic Component for the `next 1` Command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "image::NextSequenceDiagram.png[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "woon17"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"cancelappt 1\")` API call."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "woon17"
        },
        "content": ".Interactions Inside the Logic Component for the `cancelappt 1` Command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "woon17"
        },
        "content": "image::CancelAppointmentSequenceDiagram.png[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` and `NextCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "image::ModelOverviewClassDiagramV2.png[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003d\u003d\u003d\u003d Overall Model component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* consists of 3 sub-components: Queue Manager, Address Book and Appointment Book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* stores the details of patients and staff in an Address Book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* stores the Appointment details of patients and staff in an Appointment Book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* improves code reusability, we can reuse the `Person` class to derive classes which can represent patients or staff doctors."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* likewise, we can reuse the `Event` class to derive classes which can represent patient\u0027s appointments and staff duty shifts."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* stores a unique list of `Tags` in the `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "The `QueueManager`,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* stores a `QueueList` object that represents the queue."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* stores a `UniqueElementList\u003cRoom\u003e` which represents a list of consultation rooms where staff doctors are stationed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "image::StorageClassDiagramV2.png[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* can save and read data of the Address Book in json format."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* can save and read data of the Appointment Book data in json format."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* able to reuse `JsonAddressBookStorage` to store the details of doctors and patients."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "* able to reuse `JsonAppointmentBookStorage` to store the details of staff duty shifts and patient\u0027s appointments."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "woon17"
        },
        "content": "// tag::autocomplete[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d\u003d AutoComplete"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "woon17"
        },
        "content": "We are using Prefix Tree which is known as a Trie for AutoComplete. This gives us a worst case time complexity of O(m), where m is length of the search string. While the space complexity is O(bm), where b is number of unique alphabets used, m is length of longest word stored."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "image::AutoCompleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "// end::autocomplete[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d Queue feature"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "The queue feature allows the user to enqueue and dequeue a patient from the queue."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* e.g. `enqueue 003A` - Enqueues the patient with reference id 003A."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* e.g. `next 1` Serves the next patient in queue and allocates him/her to room 1."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "The queue will be displayed in a list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an enqueue command:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "image::EnqueueActivityDiagram.png[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an next command:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "image::NextActivityDiagram.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Below is an example usage of the queue feature."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Step 1: User enters the `enqueue 001A` command."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Step 2: The command then calls Model#enqueuePatient to enqueue the patient into the queue."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Step 3: Patient will then be showed in the queue."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Appointment feature"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "woon17"
        },
        "content": "The Appointment feature provides users the ability to manage appointments for patients. It can help patients to add, change, delete appointments. It also help user to find the missed appointments and settle each missing appointment."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "woon17"
        },
        "content": "* e.g. `addappt i/001A rec/m num/2 str/01/11/19 1800 end/01/11/19 1830` - allows the user to create two monthly appointments to patient whose referenceId is 001A."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "woon17"
        },
        "content": "* e.g. `changeappt 1 str/02/11/19 1800 end/02/11/19 1830` - allows the user to change a patient\u0027s first appointment timing to be the input timing if there is no conflict."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "woon17"
        },
        "content": "The Appointment feature contains multiple operations to indirectly manipulate the UniqueAppointmentList. The implemented operations include:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "woon17"
        },
        "content": "`addappt` Command - Adds appointments to the appointment schedule."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "woon17"
        },
        "content": "`appointments` Command - Lists all upcoming appointment schedule or lists a patient\u0027s upcoming appointments."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "woon17"
        },
        "content": "`changeappt` Command - change a current appointment to a different timing."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "woon17"
        },
        "content": "`cancelappt` Command - Cancels appointments found within the appointment schedule."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "woon17"
        },
        "content": "`missappt` Command - Lists all missing appointment."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "woon17"
        },
        "content": "`settleappt` Command - settle a missing appointment when user contact with patient."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "woon17"
        },
        "content": "`ackappt` Command - acknowledge a appointment once the patient reaches."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "woon17"
        },
        "content": "//todo put class diagram for the appointment"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "woon17"
        },
        "content": "Each Appointment object consists of a ReferenceId, DateTime, Status.The UniqueAppointmentList contains 0 or more Appointments."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "woon17"
        },
        "content": "The current implementation of Appointment will do check with patient object by the unique referenceId. If it exists within the Model#UniquePatientList, then constructing the Appointment object. This ensures that the Patient is registered before making an appointment."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "woon17"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a ChangeAppointment command:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "woon17"
        },
        "content": ".Interactions Inside the Logic Component when a user executes a `changeappt` command"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "woon17"
        },
        "content": "image::ChangeAppointmentActivityDiagram.png[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d `addappt` Command"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "woon17"
        },
        "content": "The addappt command behaves similarly to the add command used for Patient and Doctor. The command takes in the parameters required to construct ReferenceId, DateTime and Status. The image below shows how the Appointment object is constructed."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "woon17"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a AddAppointment command:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "woon17"
        },
        "content": ".Interactions Inside the Logic Component when a user executes a `addappt` command"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "woon17"
        },
        "content": "image::AddAppointmentActivityDiagram.png[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:  How to store Timing fields"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "woon17"
        },
        "content": "* **Alternative 1 (current choice):** Create DateTime and Timing class to store"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "woon17"
        },
        "content": "** Pros: Makes it easier to calculate timings and clashes between multiple appointments with different timing field."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "woon17"
        },
        "content": "** Cons: Requires additional code to implement Timing class and interact with other common methods that rely on DateTime."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "woon17"
        },
        "content": "* **Alternative 2:** Store as Strings"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "woon17"
        },
        "content": "** Pros: Makes it easier to implement."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "woon17"
        },
        "content": "** Cons: Requires additional code to convert into Date class when carrying out calculating methods."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: display appointments"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "woon17"
        },
        "content": "* **Alternative 1 (current choice):** Display appointments in a tab"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "woon17"
        },
        "content": "** Pros: Creates an intuitive and easily navigable screen to display appointments."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "woon17"
        },
        "content": "** Cons: Decreases the efficiency of CLI by having to use GUI inputs."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "woon17"
        },
        "content": "* **Alternative 2:** Keeps the onscreen clutter at a minimum and stays in line with the CLI concept."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "woon17"
        },
        "content": "** Cons: Increases difficulty in freely accessing appointments."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* has a need to manage a significant number of patients and doctors"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* is a clerk/receptionist working at a small clinic"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "*Value proposition*: manage queue and appointments faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|find out the upcoming appointments for given patients |"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|update the doctors\u0027 details by typing commands and user details |"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|add new doctors into system |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|edit patients\u0027 details | keep their particulars up to date"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|register new patients with optional fields |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|add ad-hoc patients to the queue |"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|search for patients using their name or phone number |"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|look up how many patients are in the queue, on a side panel | recommend estimated time that the patient will be attended to"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|look up patient using a reference id |"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|reschedule appointments of patients |"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|search for appointment slots easily | schedule appointments for patients easily"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|assign a queue number to each patient in the queue |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|use the appointment scheduler | schedule appointments for my patients"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "woon17"
        },
        "content": "|`* * *` |clerk |add recursive appointments| schedule new appointments recursively for my patients"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|save time managing the queue | have more time to do my own work"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* * *` |clerk|take note of the doctors that are on-shift | effectively direct patients to available doctors"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|remove a patient from the queue if they leave. |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|view the number of patients who visited the clinic today |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|schedule patient\u0027s follow up appointments |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|find all patients who have missed their appointments | keep track of the list of patients whom I need to inform"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |experienced user|create custom aliases to commands | so that it can save time"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|use auto-complete to predict my commands|save time on verifying its existence and correctness"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|quick-fill the command box with the suggestions of Auto-Complete|so that it reduces typing of the entire command"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|refer to command history|review entered commands that maybe incorrect"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|quick-fill the command box with history commands|inputting last few commands is easier"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |receptionist|use the undo and redo feature | to remedy any mistakes"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|acknowledge appointments if patients are present for their appointments | keep track of patients who came for their appointments"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|tag patient with known allergies | keep track of their allegies"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "|`* *` |clerk|cancel appointments for patients | free up appointment time slots"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "(For all use cases below, the *System* is the `ClerkPro` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d Use case: Add patient into queue (UC1)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "1.  New patient arrives at the clinic"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "2.  User wants to add new patient into the queue"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "3.  System adds the patient into the queue"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* 2a. User inputs invalid format"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** 2a1. System requests for correct input format. +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Use case: Remove person from queue (UC2)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "1.  Patient wants to leave"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "2.  User requests to remove patient from the queue"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "3.  System removes the patient from queue"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "woon17"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 2a. Person is not in queue"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d Use case: Serve next patient (UC3)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "1.  Patient exits from room 1"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "2.  User requests to allocate patient into room 1"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "3.  System removes the patient from queue and allocates him/her to room 1"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* 2a. Doctor is resting"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d Use case: Doctor takes a break (UC4)"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "1.  User requests to avoid directing patients to the doctor in room 1"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "2.  System sets the doctor to be on break"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* 1a. Doctor is already on break"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d Use case: Doctor resumes his/her duty (UC5)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Pre-condition: Doctor is on break"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "1.  User requests to start directing patients to the doctor in room 1"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "2.  System sets the doctor to be on duty"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* 1a. Doctor is already on duty"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "** 2a1. System shows an error message."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Use case: Change appointment date (UC6)"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "woon17"
        },
        "content": "Pre-condition: Patient exists in the system"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "woon17"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "woon17"
        },
        "content": "1.  Patient wants to have new appointments"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "woon17"
        },
        "content": "2.  User wants to add appointments for patient"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "woon17"
        },
        "content": "3.  ClerkPro adds this appointment"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 2a. User inputs invalid format"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 2a1. ClerkPro requests for correct input format +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 2a2. User inputs correct format +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "woon17"
        },
        "content": "Steps 2a1-2a2 are repeated until the appointment has the correct format +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 2b. User inputs a appointment which is conflicted with other appointments"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 2b1. User ask patient to make provide a new appointment date  +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 2b2. patient give a new appointment date +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "woon17"
        },
        "content": "Steps 2b1-2b2 are repeated until the appointment is not conflicted"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "woon17"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Use case: Change appointment date (UC7)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "woon17"
        },
        "content": "Pre-condition: Patientâ€™s appointment exists and Application is displaying the patient\u0027s list of appointments"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "woon17"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "woon17"
        },
        "content": "1.  User checks whether the current appointment can be changed."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "woon17"
        },
        "content": "2.  User checks and updates appointment\u0027s appointment time slots."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "woon17"
        },
        "content": "3.  ClerkPro updates the appointment date of the patient."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 3a. Current appointment date is invalid format +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 3a1. ClerkPro requests for correct input format +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 3a2. User inputs correct format +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "woon17"
        },
        "content": "Steps 2a1-2a2 are repeated until the appointment has the correct format +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 3b. Appointment date is conflict with other appointments +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 3b1. User ask patient to make a new appointment  +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 3b2. patient change appointment to another date +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "woon17"
        },
        "content": "Steps 3b1-3b2 are repeated until the appointment is not conflicted"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case resumes at step 3"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d Use case: Find patients appointment (UC8)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "woon17"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "woon17"
        },
        "content": "1.  User requests to find patient\u0027s appointment list"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "woon17"
        },
        "content": "2.  System retrieve and display patient\u0027s appointments"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 2a. patient is not exist +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "woon17"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "woon17"
        },
        "content": "** System displays an error message \"No such patient\""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Use case: cancel patient\u0027s appointment (UC9)"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "woon17"
        },
        "content": "Pre-condition: Patientâ€™s record exists"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "woon17"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "woon17"
        },
        "content": "1.  User requests to retrieve patient\u0027s appointment list"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "woon17"
        },
        "content": "2.  System finds and display patient\u0027s appointments"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "woon17"
        },
        "content": "3.  User request to cancel patientâ€™s appointment\u0027s timing."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "woon17"
        },
        "content": "4.  System updates patientâ€™s appointments and patient\u0027s appointment list"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "woon17"
        },
        "content": "5.  System displays success message of cancelling appointment\u0027s timing"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 2a. The system cannot find the requested patientâ€™s record +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 2a1. System displays an error message. \"No such appointment\""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Use case: Indicate that a doctor is on-duty and able to tend to patients (UC10)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Pre-condition: Details of the doctor is already registered in system."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "woon17"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "woon17"
        },
        "content": "1.  User finds the doctor using either his/her name or staff id."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "woon17"
        },
        "content": "2.  User assigns the on-duty doctor to a consultation room."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "woon17"
        },
        "content": "3.  System updates the ui to display the available consultation rooms and doctors."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "woon17"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 2a. Consultation room has already been taken."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "woon17"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 2a1. System shows an error message. Informing the user that the room has already been assigned to another doctor."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "woon17"
        },
        "content": "* Use case ends."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "woon17"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "woon17"
        },
        "content": "* 2b. Doctor has already been assigned to a consultation room."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "woon17"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "woon17"
        },
        "content": "** 2b1. System shows an error message. Informing the user that the doctor has already been assigned to a room."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "woon17"
        },
        "content": "* Use case ends."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Use case: AutoCompleter (UC11)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Actor:* Clerk"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Guarantees:*"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "woon17"
        },
        "content": "1. Display suggestions of commands available from whatever has been typed."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "woon17"
        },
        "content": "2. Autofill of commands selected from AutoCompleter into Command Box."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "woon17"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "woon17"
        },
        "content": "1. Clerk types \"a\" into the Command Box."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "woon17"
        },
        "content": "2. ClerkPro shows suggestions of commands available for \"a\"."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "woon17"
        },
        "content": "3. Clerk selects a command from AutoCompleter."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "woon17"
        },
        "content": "4. ClerkPro auto-fills the selected command into Command Box."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "woon17"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Use case: History (UC12)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Actor:* Clerk"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "woon17"
        },
        "content": "*Guarantees:*"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "woon17"
        },
        "content": "1. Autofill of commands while traversing History."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "woon17"
        },
        "content": "*MSS:*"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "woon17"
        },
        "content": "1. If AutoCompleter is not suggesting, Clerk can traverse history commands."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "woon17"
        },
        "content": "2. While traversing, the command box is auto-filled with the history command."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "woon17"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "woon17"
        },
        "content": ".  Should be able to hold up to 10000 persons and 10000 events without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "woon17"
        },
        "content": ".  No internet required."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "woon17"
        },
        "content": ".  System allows user to undo incorrect or accidental destructive actions"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "woon17"
        },
        "content": ".  App can be downloaded and run via a jar file"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 30,
      "wongsm7": 181,
      "CarbonGrid": 21,
      "woon17": 220,
      "-": 412
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d ClerkPro - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 122
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d ClerkPro - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 83
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d ClerkPro - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 51
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d ClerkPro - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "By: `T09-3`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "This program is targeted at clerks working in small clinics. It is designed for those who prefer to work with a Command Line Interface (CLI). It allows clerks to manage queues, set appointments and manage the inventory. Typing fast allows you to complete your tasks much faster than GUI apps."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ".  Download the latest `clerkPro.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "* **`add`**`i/001A n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "* Words in `\u003cUPPER_CASE\u003e` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `â€¦`â€‹ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/\u003cNAME\u003e p/\u003cPHONE_NUMBER\u003e`, `p/\u003cPHONE_NUMBER\u003e n/\u003cNAME\u003e` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003d\u003d\u003d Queue Management"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Add a patient to the queue: `enqueue` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Adds a patient to the queue +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `enqueue \u003cPATIENT_REFERENCE_ID\u003e`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Remove a patient from the queue: `dequeue` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": "Removes a patient from the queue based on their queue position +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `dequeue \u003cQUEUE_NUMBER\u003e`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Assign next patient to an available doctor : `next` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "Assigns next patient to an available doctor based on the room number. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `next \u003cROOM_NUMBER\u003e`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Doctor takes a break: `break`  \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": "Avoids directing patients to a given Doctor based on the room number. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `break \u003cROOM_NUMBER\u003e`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Doctor resumes his/her duty: `resume` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "Allows patients to be directed to a given Doctor based on the room number. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `resume \u003cROOM_NUMBER\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Add a new room: `addRoom` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Adds a new room with a doctor to the list. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `addRoom \u003cDOCTOR_REFERENCE_ID\u003e`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Removes a room: `removeRoom` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Removes a room in the list. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `removeRoom \u003cROOM_NUMBER\u003e`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Patient Management"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Searches patient by arguments: `patient` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woon17"
        },
        "content": "Finds patients whose reference ids, names or phone numbers containing any of the given keywords. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woon17"
        },
        "content": "If search keywords are empty, all registered patients will be displayed. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woon17"
        },
        "content": "Note: Requires at least 4 characters to search by a reference id or phone numbers. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `patient [\u003cPATIENT_REFERENCE_ID | PATIENT_NAME | PHONE_NUM\u003e]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Registers a new patient: `register` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woon17"
        },
        "content": "Registers a new patient +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format:  `register  i/\u003cPATIENT_REFERENCE_ID\u003e n/\u003cPATIENT_NAME\u003e [p/\u003cPHONE_NUM\u003e]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " [e/\u003cEMAIL\u003e] [a/\u003cADDRESS\u003e] [r/\u003cREMARK\u003e] [t/Allergies]...`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003d\u003d\u003d\u003d Unregisters an existing patient: `unregister` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "If user is in the patients listing screen,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Unregisters an existing patient +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format:  `unregister \u003cENTRY_ID\u003e`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Updates patientsâ€™ profiles: `update` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "woon17"
        },
        "content": "If user is in the patients listing screen,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "woon17"
        },
        "content": "Updates any change for patientsâ€™ profiles +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `update \u003cENTRY_ID\u003e [n/\u003cPATIENT_NAME\u003e] [i/\u003cPATIENT_REFERENCE_ID\u003e] [p/\u003cPHONE_NUM\u003e]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " [e/\u003cEMAIL\u003e] [a/\u003cADDRESS\u003e] [r/\u003cREMARK\u003e] [t/Allergies]...`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d On-Duty Doctors Management \u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Views doctors: `doctors` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "woon17"
        },
        "content": "Finds doctors whose names contains any of the given keywords. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "woon17"
        },
        "content": "If search keywords are empty, all registered doctors will be displayed. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `doctors [\u003cDOCTOR_NAME\u003e]`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Register a new doctor: `newdoctor` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "woon17"
        },
        "content": "Registers a new doctor. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "If the Staff reference identifier is not specified, a unique identifier will be assigned by the system."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `newdoctor n/\u003cSTAFF_NAME\u003e [i/\u003cSTAFF_REFERENCE_ID\u003e] [p/\u003cPHONE_NUM\u003e] [e/\u003cEMAIL\u003e] [a/\u003cADDRESS\u003e] [r/\u003cREMARK\u003e]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Update a doctor\u0027s profile: `update` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "woon17"
        },
        "content": "If user is in the doctors listing screen, updates any change for doctorâ€™s profiles. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `updatedoctor \u003cENTRY_ID\u003e [n/\u003cSTAFF_NAME\u003e]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "[i/\u003cSTAFF_REFERENCE_ID\u003e] [p/\u003cPHONE_NUM\u003e] [e/\u003cEMAIL\u003e] [a/\u003cADDRESS\u003e] [r/\u003cREMARK\u003e]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Unregister a doctor\u0027s profile: `resign` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "woon17"
        },
        "content": "If user is in the doctors listing screen, removes a doctorâ€™s profile. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `resigndoctor \u003cENTRY_ID\u003e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Updates a doctor\u0027s profiles: `onduty` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Marks the doctor as on-duty and stationed in the given room number. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Patients can be directed to the specified doctor. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `onduty \u003cENTRY_ID\u003e r/\u003cROOM_NUMBER\u003e`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Updates doctor\u0027s profiles: `offduty` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "woon17"
        },
        "content": "Marks the doctor as off-duty. Patients can not be directed to the specified doctor. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `offduty \u003cROOM_NUMBER\u003e`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d Appointment Management"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Adds all appointments: `addappt` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "woon17"
        },
        "content": "Adds a new appointment for a patient +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "woon17"
        },
        "content": "If optional field for recursive is empty, then only add the event that is given. Otherwise recursive appointments will be added. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `appointments [i/REFERENCE_ID] [rec/recursively] [num/recursiveTimes] str/\u003cSTART_DATE\u003e end/\u003cEND_DATE\u003e`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Displays all appointments: `appointments` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "woon17"
        },
        "content": "Displays a sorted list of upcoming appointments whose appointment is within +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "woon17"
        },
        "content": "If search keywords are empty, all upcoming appointments will be displayed. +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `appointments [p/\u003cPATIENT_NAME | PATIENT_IC\u003e] [s/\u003cSTART_DATE\u003e] [e/\u003cEND_DATE\u003e]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Cancels an appointment: `cancel` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "woon17"
        },
        "content": "Cancels the specified appointment. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `cancelappt \u003cENTRY_ID\u003e`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Changes the appointment date: `change` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "woon17"
        },
        "content": "Changes and updates to a new appointment detail in the appointment listing screen +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `changeappt \u003cENTRY_ID\u003e [i/\u003cPATIENT_IC\u003e] [s/\u003cSTART_DATE_TIME\u003e] [e/\u003cEND_DATE_TIME\u003e]`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Shows the empty slots: `slot` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "woon17"
        },
        "content": "List all the available empty slots for patients to make appointments +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `slot s/\u003cSTART_DATE\u003e e/\u003cEND_DATE\u003e`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Displays patients who have missed their appointments and have yet to be notified: `missed` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "woon17"
        },
        "content": "Displays all appointments that are missed and not yet settled. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `missappt`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003d\u003d\u003d\u003d Sets missed appointments as settled/notified: `settle` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "woon17"
        },
        "content": "Settles the missed appointments for respective patients. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "woon17"
        },
        "content": "Format: `settle \u003cENTRY_ID\u003e`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003d\u003d\u003d\u003d Changes the max number of concurrent consultation: `maxconcurrentappt` (v2.0) \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Changes the maximum number of concurrent patient appointments +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `maxconcurrentappt \u003cTOTAL_NUMBER_OF_CONCURRENT_APPOINTMENTS\u003e`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d Inventory commands (v2.0) \u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Views the inventory: `inventory` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Displays the medicine inventory +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `inventory`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Views the inventory: `prescription` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Displays the prescription. A prescription is a list of medications prescribed by the doctor. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `prescription \u003cPRESCRIPTION_ID | PRESCRIPTION_NAME\u003e`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d User Accounts (v2.0) \u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Login: `login` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Login with your username and password. The user will then be prompted to enter their password. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `login \u003cUSER_NAME\u003e`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Logout: `logout` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Logout from your account +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d General commands \u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Lists all the useful commands +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Exits program: `exit` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Exits the program +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Undo action: `undo` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Undo a destructive action +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003d\u003d\u003d\u003d Redo action: `redo` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Redo a destructive action +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u003d\u003d\u003d\u003d Creates, updates or removes an alias command: `alias` \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Tags an alias name to a reserved command. More specifically,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "one of the following will happen depending on the parameters of the function."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Please note that the user can not remap a reserved command."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "A new alias command is created if the alias does not exist."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Remaps an existing alias command to a reserved command if the alias exist."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "If the reserved command is not specified, the alias is unregistered if it exists."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Format: `alias \u003cAlias_Name\u003e [\u003cReserved_Command\u003e]`"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 53,
      "SakuraBlossom": 26,
      "woon17": 87,
      "-": 93
    }
  },
  {
    "path": "docs/diagrams/AddAppointmentActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "-Entered add appointment command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "if () then ([valid command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "    if () then ([valid reference id])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u0027    Appointments does not exist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if () then ([Appointments does not exist])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if() then ([Valid idx and timing format])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "                if() then([not conflict])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "                -Appointment\u0027s timing changed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "                -Display patient\u0027s all upcoming appointments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "                else([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "                -Display error message\\n to input a non-conflict-timing appointment"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "                endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "            else ([Not valid])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "            -Display error message\\n to input valid appointment\u0027s idx and timing format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "        else([else])"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "        -Display duplicate error message\\n"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    -Display error message\\n"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "else ([Invalid command])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "-Invalid command \\n message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "stop"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "woon17": 35
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/globe_internet\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Concepts/documents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "!include \u003coffice/Users/user\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package \" \"\u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    Class UI UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Storage STORAGE_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Main MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Commons LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Class \"Log Center\" as Logs UI_COLOR_T2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Class Hidden #FFFFFF"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$user\u003e\" as User MODEL_COLOR_T2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"\u003c$documents\u003e\" as File UI_COLOR_T1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Main -up-\u003e UI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Main -left-\u003e Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "UI -\u003e Logic"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "UI -right-\u003e Model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Logic -down-\u003e Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Logic --\u003e Storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Logs -right- Commons"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Hidden .[hidden].\u003e Commons"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Model --\u003e Commons"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Storage ..\u003eFile"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "User --\u003e UI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Main -[Hidden]-\u003e Hidden"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Logic --\u003e Commons"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Storage --\u003e Commons"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 9,
      "-": 27
    }
  },
  {
    "path": "docs/diagrams/AutoCompleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "participant \":CommandBox\" as CommandBox UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "participant \":AutoCompleteOverlay\" as AutoCompleteOverlay UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "participant \":AutoCompleter\" as AutoCompleter UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "participant \":Trie\" as Trie UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "participant \":TrieNode\" as TrieNode UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "[-\u003e CommandBox : handleTextChanged()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "activate CommandBox"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "CommandBox -\u003e MainWindow : updateCommandAutoComplete(\"a\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "MainWindow -\u003e AutoCompleter : update(\"a\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "activate AutoCompleter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "AutoCompleter -\u003e MainWindow : this"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "deactivate AutoCompleter"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "MainWindow -\u003e AutoCompleter : getSuggestions()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "activate AutoCompleter"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "AutoCompleter -\u003e Trie : find(\"a\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "activate Trie"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Trie -\u003e AutoCompleter : TrieNode"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "deactivate Trie"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "AutoCompleter -\u003e TrieNode : getPossibilities()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "activate TrieNode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "TrieNode -\u003e AutoCompleter : List\u003cString\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "deactivate TrieNode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "AutoCompleter -\u003e MainWindow : List\u003cString\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "deactivate AutoCompleter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "MainWindow -\u003e AutoCompleteOverlay : showSuggestions(\"a\", List\u003cString\u003e)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "activate AutoCompleteOverlay"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "AutoCompleteOverlay -\u003e MainWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "deactivate AutoCompleteOverlay"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "MainWindow -\u003e CommandBox"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "[\u003c--CommandBox"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "deactivate CommandBox"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 54
    }
  },
  {
    "path": "docs/diagrams/CancelAppointmentSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "participant \":CancelAppCommandParser\" as CancelAppCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "participant \"d:CancelAppCommand\" as CancelAppCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "[-\u003e LogicManager : execute(\"cancelappt 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"cancelappt 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "create CancelAppCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "AddressBookParser -\u003e CancelAppCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate CancelAppCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate CancelAppCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "AddressBookParser -\u003e CancelAppCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate CancelAppCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "create CancelAppCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommandParser -\u003e CancelAppCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate CancelAppCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommand --\u003e CancelAppCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate CancelAppCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate CancelAppCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "destroy CancelAppCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "LogicManager -\u003e CancelAppCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate CancelAppCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommand -\u003e Model : deleteEvent(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "Model --\u003e CancelAppCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "CommandResult --\u003e CancelAppCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "CancelAppCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate CancelAppCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "@enduml"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "woon17": 70
    }
  },
  {
    "path": "docs/diagrams/ChangeAppointmentActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "-Display the list of patient\u0027s appointments"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "-Enter change appointment command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if() then ([Valid index])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "        -find the target appointment"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if() then ([Not conflict with other appointments])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "            -Appointment\u0027s timing changed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "            -Display the patient\u0027s all upcoming appointments"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "            -Display error message\\n to input valid appointment\u0027s timing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "        else ([Not valid])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "        -Display error message\\n to input valid appointment\u0027s index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "woon17": 20
    }
  },
  {
    "path": "docs/diagrams/EnqueueActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "-Entered enqueue command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "if () then ([valid command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    if () then ([Patient not in queue])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if() then ([Patient is registered])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        -Add patient to queue"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        -Display in queue"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        else ([Patient is not registered])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        -ReferenceId \\n not found message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    else ([Patient in queue])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    -Display error message\\n \"person already in queue\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "else ([Invalid command])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "-Invalid command \\n message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "stop"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 25
    }
  },
  {
    "path": "docs/diagrams/EnqueueSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "participant \":CommandHistory\" as CommandHistory LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":EnqueueCommandParser\" as EnqueueCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "participant \"refId : ReferenceId\" as ReferenceId LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "participant \"command : ReversibleActionPairCommand\" as ReversibleActionPairCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "participant \"addCmd : EnqueueCommand\" as EnqueueCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "participant \"deleteCmd : DequeueCommand\" as DequeueCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "participant \"result : CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[-\u003e LogicManager : execute(\"enqueue 001A\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"enqueue 001A\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create EnqueueCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser -\u003e EnqueueCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate EnqueueCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "EnqueueCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate EnqueueCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser -\u003e EnqueueCommandParser : parse(\"001A\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate EnqueueCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "create ReferenceId"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommandParser -\u003e ReferenceId"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "activate ReferenceId"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId --\u003e EnqueueCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deactivate ReferenceId"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "create EnqueueCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommandParser -\u003e EnqueueCommand : EnqueueCommand(refId)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate EnqueueCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommand --\u003e EnqueueCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate EnqueueCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "create DequeueCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommandParser -\u003e DequeueCommand : DequeueCommand(refId)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate DequeueCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "DequeueCommand --\u003e EnqueueCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate DequeueCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "create ReversibleActionPairCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommandParser -\u003e ReversibleActionPairCommand : ReversibleActionPair(addCmd, deleteCmd)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "activate ReversibleActionPairCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReversibleActionPairCommand --\u003e EnqueueCommandParser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deactivate ReversibleActionPairCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommandParser --\u003e AddressBookParser : command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deactivate EnqueueCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBookParser --\u003e CommandHistory : addToCommandHistory(command)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "activate CommandHistory"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deactivate CommandHistory"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate EnqueueCommandParser"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "EnqueueCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "destroy EnqueueCommandParser"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBookParser --\u003e LogicManager : command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "LogicManager -\u003e ReversibleActionPairCommand : execute()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "activate ReversibleActionPairCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReversibleActionPairCommand -\u003e EnqueueCommand : execute()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate EnqueueCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommand -\u003e Model : execute()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Model --\u003e EnqueueCommand"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "EnqueueCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "CommandResult --\u003e EnqueueCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "EnqueueCommand --\u003e ReversibleActionPairCommand : result"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate EnqueueCommand"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReversibleActionPairCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deactivate ReversibleActionPairCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 62,
      "SakuraBlossom": 41
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagramV2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AddressBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class \"{abstract}\\nReversibleCommand\" as ReversibleCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class \"{abstract}\\nNonActionableCommand\" as NonActionableCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class \"{abstract}\\nNonActionPairCommand\" as ActionPairCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 65
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagramV1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HashSet"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReferenceId \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Identical \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AppointmentBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UserPrefs {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UniqueList {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTreeList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueElementList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PersonReferenceId"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PatientReferenceId"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class StaffReferenceId"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Events {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DutyShift"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Event"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Timing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DateTime"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Status"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook .up.|\u003e ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Model .up.\u003e ObservableList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook *.right.\u003e \"1\" UniqueElementList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList .up.-|\u003e Identical"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueElementList *.up-\u003e \"1\" UniqueTreeList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList *.up-\u003e \"1\" UniqueElementList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList o.down-\u003e \"1\" HashSet"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId .up|\u003e Identical"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PersonReferenceId .up.|\u003e ReferenceId"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PatientReferenceId *.up-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StaffReferenceId *.left-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person .up.-|\u003e Identical"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-\u003e ReferenceId"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-down-\u003e Name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Name -[hidden]down-\u003e Tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *-\u003e Event"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *-\u003e \"1\" ReferenceId : Doctor"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "DutyShift *-\u003e Event"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing *--\u003e DateTime"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing -[hidden]right-\u003e Status"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event .up.|\u003e Identical"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *---\u003e ReferenceId"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Timing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Status"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager o.left.--\u003e \"1\" AddressBook : staff"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager o.left.--\u003e \"1\" AddressBook : patients"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager o.down.--\u003e \"1\" AppointmentBook : Appointments"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager o.down.--\u003e \"1\" AppointmentBook : DutyRoster"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager o.-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 118
    }
  },
  {
    "path": "docs/diagrams/ModelOverviewClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Identical \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AppointmentBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UserPrefs {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package ReferenceId {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UniqueList {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class \"{abstract}\\AbstractList\" as AbstractList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HashSet"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTreeList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueElementList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Events {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package QueueManager {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "HiddenOutside .down-\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook -\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook .right.--|\u003e ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook -down--\u003e \"1\" UniqueElementList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList -up-\u003e \"*\" Identical"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList *-left-\u003e AbstractList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueElementList *-up-\u003e UniqueTreeList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList -right-\u003e \"*\" Person"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList *-up-\u003e UniqueElementList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList -down-\u003e \"1\" HashSet"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId .-|\u003e Identical"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person .up.-|\u003e Identical"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-\u003e \"1\" ReferenceId"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Events .down.-|\u003e Identical"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Events -\u003e \"1\" ReferenceId : Doctor \u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Events -\u003e \"1\" ReferenceId : Patient \u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager ---\u003e \"*\" ReferenceId : Doctors \u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager ---\u003e \"*\" ReferenceId : Patients \u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager .up.-|\u003e Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left-\u003e \"1\" AddressBook : staff \u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left-\u003e \"1\" AddressBook : patients \u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : Appointments \u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : StaffDutyRoster \u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -right--\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -right-\u003e \"1\" QueueManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueList -[hidden]up-\u003e Identical"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Identical -[hidden]down-\u003e ReferenceId"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId -[hidden]right-\u003e Events"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 95
    }
  },
  {
    "path": "docs/diagrams/ModelOverviewClassDiagramV2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Identical \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReferenceId \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AppointmentBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTagList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UserPrefs {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UniqueList {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTreeList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueElementList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PersonReferenceId"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PatientReferenceId"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class StaffReferenceId"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Events {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DutyShift"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Event"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Timing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DateTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Status"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Queue {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class QueueManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class QueueList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Room"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "HiddenOutside .down-\u003e Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook .up.|\u003e ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager .up.-|\u003e Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook *-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook *-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTagList --\u003e \"*\" Tag"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook *--down-\u003e \"1\" UniqueElementList : UniqueElementList\u003cAppointment\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook *-down-\u003e Appointment"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList *-\u003e Identical"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueElementList *-down\u003e UniqueTreeList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList -down-\u003e \"*\" Person"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList *-up\u003e \"1\" UniqueElementList : UniqueElementList\u003cPerson\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId .-|\u003e Identical"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PersonReferenceId .up.|\u003e ReferenceId"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PatientReferenceId *.up-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StaffReferenceId *.left-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person .up.-|\u003e Identical"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *.-|\u003e ReferenceId"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-down-\u003e Name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-left-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *-down-\u003e Event"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *.-right|\u003e \"1\" ReferenceId : Doctor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "DutyShift *-\u003e Event"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing *--\u003e DateTime"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing -[hidden]right-\u003e Status"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event .up.|\u003e Identical"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *.--|\u003e ReferenceId"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Timing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Status"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Room .-|\u003e Identical"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Room *.---|\u003e ReferenceId"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager -up-\u003e UniqueElementList : UniqueElementList\u003cRoom\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager *-down-\u003e QueueList"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager *-down-\u003e Room"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueList *.---|\u003e ReferenceId"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left--\u003e \"1\" AddressBook : staff"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left--\u003e \"1\" AddressBook : patients"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : Appointments"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : StaffDutyRoster"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -right--\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person -[hidden]up----\u003e Identical"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Identical -[hidden]right----\u003e ReferenceId"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId -[hidden]right-\u003e Events"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueList -[hidden]down----\u003e Identical"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 135
    }
  },
  {
    "path": "docs/diagrams/ModelOverviewClassDiagramV3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Identical \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReferenceId \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AppointmentBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTagList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UserPrefs {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UniqueList {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTreeList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueElementList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Events {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Queue {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "HiddenOutside .down-\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook .up.|\u003e ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager .up.-|\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook *-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook *-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTagList --\u003e \"*\" Tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook *--down-\u003e \"1\" UniqueElementList : UniqueElementList\u003cAppointment\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook *-down-\u003e \"*\" Events"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList *-\u003e Identical"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueElementList *-down\u003e UniqueTreeList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList -down-\u003e \"*\" Person"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList *-up\u003e \"1\" UniqueElementList : UniqueElementList\u003cPerson\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId .-|\u003e Identical"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person .up.-|\u003e Identical"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *.-|\u003e ReferenceId"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *.-|\u003e Tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Events *.left.|\u003e Identical"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Events .--|\u003e ReferenceId"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Queue -up-\u003e UniqueElementList : UniqueElementList\u003cRoom\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Queue *.---|\u003e ReferenceId"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left--\u003e \"1\" AddressBook : staff"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left--\u003e \"1\" AddressBook : patients"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : Appointments"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : StaffDutyRoster"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -right--\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Queue -[hidden]up-\u003e Events"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueList -[hidden]down----\u003e Identical"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 91
    }
  },
  {
    "path": "docs/diagrams/ModelPersonClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Identical \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package ReferenceId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReferenceId \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PersonReferenceId"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PatientReferenceId"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class StaffReferenceId"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UniqueList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class \"{abstract}\\AbstractList\" as AbstractList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HashSet"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTreeList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueElementList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Events {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DutyShift"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Event"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Timing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DateTime"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Status"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList -\u003e Identical"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList *-\u003e AbstractList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueElementList *.up-\u003e \"1\" UniqueTreeList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList o.down-\u003e \"*\" Person"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList *.up-\u003e \"1\" UniqueElementList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList o.down-\u003e \"1\" HashSet"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId .-|\u003e Identical"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PersonReferenceId .up.|\u003e ReferenceId"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PatientReferenceId *.up-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StaffReferenceId *.left-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person .up.-|\u003e Identical"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-\u003e ReferenceId"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-down-\u003e Name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Name -[hidden]down-\u003e Tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *-down-\u003e Event"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *-\u003e \"1\" ReferenceId : Doctor"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "DutyShift *-\u003e Event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing *--\u003e DateTime"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing -[hidden]right-\u003e Status"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event .up.|\u003e Identical"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *---\u003e ReferenceId"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Timing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Status"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Identical -[hidden]down----\u003e ReferenceId"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId -[hidden]right-\u003e Events"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueList -[hidden]down----\u003e Identical"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 89
    }
  },
  {
    "path": "docs/diagrams/ModelQueueManagerClassDiagramV1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Identical \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface ReferenceId \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class AppointmentBook"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTagList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UserPrefs {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UniqueList {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueTreeList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniqueElementList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PersonReferenceId"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class PatientReferenceId"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class StaffReferenceId"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Events {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Appointment"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DutyShift"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Event"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Timing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class DateTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Status"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Queue {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class QueueManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class QueueList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class Room"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "HiddenOutside .down-\u003e Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook .up.|\u003e ReadOnlyAppointmentBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager .up.-|\u003e Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook *-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AddressBook *-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTagList --\u003e \"*\" Tag"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook *--down-\u003e \"1\" UniqueElementList : UniqueElementList\u003cAppointment\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "AppointmentBook *-down-\u003e Appointment"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueTreeList *-\u003e Identical"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueElementList *-down\u003e UniqueTreeList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList -down-\u003e \"*\" Person"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniquePersonList *-up\u003e \"1\" UniqueElementList : UniqueElementList\u003cPerson\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId .-|\u003e Identical"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PersonReferenceId .up.|\u003e ReferenceId"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "PatientReferenceId *.up-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StaffReferenceId *.left-\u003e PersonReferenceId"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person .up.-|\u003e Identical"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *.-|\u003e ReferenceId"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-down-\u003e Name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person *-left-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *-down-\u003e Event"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Appointment *.-right|\u003e \"1\" ReferenceId : Doctor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "DutyShift *-\u003e Event"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing *--\u003e DateTime"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Timing -[hidden]right-\u003e Status"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event .up.|\u003e Identical"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *.--|\u003e ReferenceId"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Timing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Event *--\u003e Status"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Room .-|\u003e Identical"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Room *.---|\u003e ReferenceId"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager -up-\u003e UniqueElementList : UniqueElementList\u003cRoom\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager *-down-\u003e QueueList"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueManager *-down-\u003e Room"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "QueueList *.---|\u003e ReferenceId"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left--\u003e \"1\" AddressBook : staff"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -left--\u003e \"1\" AddressBook : patients"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : Appointments"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -down--\u003e \"1\" AppointmentBook : StaffDutyRoster"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ModelManager -right--\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Person -[hidden]up----\u003e Identical"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Identical -[hidden]right----\u003e ReferenceId"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId -[hidden]right-\u003e Events"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UniqueList -[hidden]down----\u003e Identical"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 135
    }
  },
  {
    "path": "docs/diagrams/NextActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "-Entered next command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "if () then ([valid command])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    if () then ([At least 1 patient in queue])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if() then ([Valid room index])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            if() then ([Doctor is not resting])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            -Allocate patient to room"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            -Display room"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            else ([Doctor is resting])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            -Display error message\\n \"Doctor xx is resting\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        else ([Invalid room index])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        -Display error message\\n \"invalid index given\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    else ([[No patient in queue])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    -Display error message\\n \"There are no patients in the queue\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "else ([Invalid command])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "-Invalid command \\n message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "endif"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "stop"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 30
    }
  },
  {
    "path": "docs/diagrams/NextSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":NextCommandParser\" as NextCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "participant \"refId : ReferenceId\" as ReferenceId LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \"n:NextCommand\" as NextCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[-\u003e LogicManager : execute(\"next 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"next 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create NextCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser -\u003e NextCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate NextCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate NextCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser -\u003e NextCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate NextCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "create ReferenceId"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "NextCommandParser -\u003e ReferenceId"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "activate ReferenceId"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId -\u003e NextCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deactivate ReferenceId"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create NextCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommandParser -\u003e NextCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate NextCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "create ReferenceId"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "NextCommandParser -\u003e ReferenceId"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "activate ReferenceId"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "ReferenceId -\u003e NextCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deactivate ReferenceId"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommand --\u003e NextCommandParser : n"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate NextCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommandParser --\u003e AddressBookParser : n"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate NextCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "destroy NextCommandParser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser --\u003e LogicManager : n"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "LogicManager -\u003e NextCommand : execute()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate NextCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommand -\u003e Model : removeFromQueue(001A)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Model --\u003e NextCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommand -\u003e Model : removeRoom(1)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Model --\u003e NextCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommand -\u003e Model : addRoomToIndex(0)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Model --\u003e NextCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "CommandResult --\u003e NextCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "NextCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate NextCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 77,
      "SakuraBlossom": 14
    }
  },
  {
    "path": "docs/diagrams/QueueManagerClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Package Model {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    Interface ReferenceId \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    Package Queue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Class QueueManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Class QueueList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Class Room"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Class \"UniqueElementList\u003cRoom\u003e\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Class ReferenceId"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    Package common {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            Class UniqueElementList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            Class UniqueTreeList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            Interface Identical \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    QueueManager -down-\u003e QueueList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    \"UniqueElementList\u003cRoom\u003e\" *--\u003e UniqueElementList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    QueueManager --\u003e \"UniqueElementList\u003cRoom\u003e\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    \"UniqueElementList\u003cRoom\u003e\" *--\u003e Room"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    UniqueElementList *-down-\u003e UniqueTreeList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    UniqueTreeList *-down-\u003e Identical"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    QueueList *---\u003e ReferenceId"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 33
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classAttributeIconSize 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam lines ortho"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Logger \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside2 #FFFFFF"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package Storage \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package UserPrefsStorage \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package AddressBookStorage \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonSerializableAddressBook"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonAdaptedPerson"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonAdaptedTag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonAddressBookStorage .up-\u003e JsonSerializableAddressBook"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonSerializableAddressBook .-\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonAdaptedPerson .-\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonAddressBookStorage .up.|\u003e  AddressBookStorage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Package AppointmentBookStorage \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface AppointmentBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonAdaptedEvent"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonAppointmentBookStorage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonSerializableAppointmentBook"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonAppointmentBookStorage .up.|\u003e  AppointmentBookStorage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonAppointmentBookStorage .-\u003e JsonSerializableAppointmentBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonSerializableAppointmentBook .-\u003e JsonAdaptedEvent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "UserPrefs .up|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager -up--\u003e UserPrefs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager .up.-\u003e Logger"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager -down--\u003e \"1\" UserPrefsStorage : prefsStorage \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager -down-\u003e \"1\" AddressBookStorage : patientDataStorage \u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager -down--\u003e \"1\" AddressBookStorage : staffDataStorage \u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager -right-\u003e \"1\" AppointmentBookStorage : AppointmentsInfoStorage \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager -right-\u003e \"1\" AppointmentBookStorage : DutyRosterInfoStorage \u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class HiddenOutside2 #FFFFFF"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "HiddenOutside .down.--\u003e StorageManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 62,
      "-": 13
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Class AutoCompleteOverlay"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "Class TabBar"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "UiManager .|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "UiManager --\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "MainWindow *-down-\u003e AutoCompleteOverlay"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "MainWindow *-down-\u003e TabBar"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "PersonCard -right-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "AutoCompleteOverlay --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "TabBar -right-|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 12,
      "-": 55
    }
  },
  {
    "path": "docs/diagrams/UnregisterPatientSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":UnregisterPatientCommandParser\" as UnregisterPatientCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \"u:UnregisterPatientCommand\" as UnregisterPatientCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[-\u003e LogicManager : execute(\"\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create UnregisterPatientCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser -\u003e UnregisterPatientCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate UnregisterPatientCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "UnregisterPatientCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate UnregisterPatientCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser -\u003e UnregisterPatientCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate UnregisterPatientCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create UnregisterPatientCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "UnregisterPatientCommandParser -\u003e UnregisterPatientCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate UnregisterPatientCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "UnregisterPatientCommand --\u003e UnregisterPatientCommandParser : u"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate UnregisterPatientCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "UnregisterPatientCommandParser --\u003e AddressBookParser : u"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate UnregisterPatientCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "destroy UnregisterPatientCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "LogicManager -\u003e UnregisterPatientCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate UnregisterPatientCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "UnregisterPatientCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "Model --\u003e UnregisterPatientCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "UnregisterPatientCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "CommandResult --\u003e UnregisterPatientCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "UnregisterPatientCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate UnregisterPatientCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 69
    }
  },
  {
    "path": "docs/diagrams/original/OriginalStorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Interface AddressBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Class JsonAddressBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "StorageManager o--\u003e AddressBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonAddressBookStorage .left.|\u003e AddressBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonAddressBookStorage .down.\u003e JsonSerializableAddressBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonSerializableAddressBookStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 24
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam MinClassWidth 100"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "skinparam ParticipantPadding 20"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 2,
      "-": 73
    }
  },
  {
    "path": "docs/team/carbongrid.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d CarbonGrid - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d PROJECT: ClerkPro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "ClerkPro is a desktop application used for managing clinic\u0027s appointments, queue and scheduling. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "* *Major enhancement*: *Major Rework on User Interface (UI) to be capable of full traversal with just keyboard while supporting AutoComplete for the Command Line Interface (CLI), and OmniPanel.*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "** What it does: reduces the mental workload of the user from having to carefully type commands and double checking the typed command or the user guide for supported commands and parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "** Justification: This feature enhances the user experience significantly because it provides optimal focus on primary tasks at hand to reduce visual and cognitive expenditure."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "** Highlights: This enhancement affects interaction against existing UI components as the traversal have to be critically handled from component to component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "** Credits: None"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "* *Minor enhancement*: added history for the CLI that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com/AY1920S1-CS2103T-T09-3/main/blob/master/src/test/java/seedu/address/MainAppTest.java[MainAppTest.java]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** Gradle updating \u0026 Config for Headed UI Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** Dependencies management and version bumping after compatibility checks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** Implemented TestFX for minimalistic GUI testing to increase coverage from 56.193% to 73.193% (Pull requests https://github.com/AY1920S1-CS2103T-T09-3/main/pull/71[#71])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** [TODO] Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** [TODO] PRs reviewed (with non-trivial review comments): https://github.com[#12]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** [TODO] Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** [TODO] Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** [TODO] Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "*** Integrated a third party library (TestFX) to the project (https://github.com/AY1920S1-CS2103T-T09-3/main/pull/71[#71])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "// include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dautocomplete]"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 21,
      "-": 39
    }
  },
  {
    "path": "docs/team/sakurablossom.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003d Shawn Lum - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d PROJECT: ClerkPro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "ClerkPro is a desktop application used for managing clinic\u0027s appointments, queue and scheduling. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "CarbonGrid": 2,
      "-": 62
    }
  },
  {
    "path": "docs/team/wongsm7.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d \u003cNAME\u003e - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d PROJECT: ClerkPro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "ClerkPro is a desktop application used for managing clinic\u0027s appointments, queue and scheduling. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 3,
      "-": 62
    }
  },
  {
    "path": "docs/team/woon17.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d \u003cNAME\u003e - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003d\u003d PROJECT: ClerkPro"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "ClerkPro is a desktop application used for managing clinic\u0027s appointments, queue and scheduling. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 3,
      "-": 62
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            || (other instanceof AppParameters // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u0026\u0026 Objects.equals(getConfigPath(), ((AppParameters) other).getConfigPath())); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.storage.AppointmentBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.storage.JsonAppointmentBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AppointmentBookStorage appointmentBookStorage \u003d new JsonAppointmentBookStorage("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            userPrefs.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        QueueManager queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, queueManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, QueueManager queueManager) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Optional\u003cReadOnlyAddressBook\u003e addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ReadOnlyAppointmentBook initialAppointmentData;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Optional\u003cReadOnlyAppointmentBook\u003e appointmentBookOptional \u003d storage.readAppointmentBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!appointmentBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AppointmentBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            initialAppointmentData \u003d appointmentBookOptional.orElseGet(SampleDataUtil::getSampleAppointmentBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AppointmentBook\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            initialAppointmentData \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AppointmentBook\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            initialAppointmentData \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new ModelManager(initialAddressData, userPrefs, queueManager, initialAppointmentData);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 27,
      "wongsm7": 7,
      "CarbonGrid": 3,
      "-": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMING \u003d \"appointment\u0027s timing should be after current time \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The person \u0027%1$s\u0027 is not registered\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_INVALID_REFERENCEID \u003d \"the reference id is not belong to any patient\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_INVALID_ROOM \u003d \"the room does not exist\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_INVAILD_REFERENCE_ID \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \"The reference ID \u0027%1$s\u0027 does not belong to any registered person!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_DATE_TIME \u003d \"The appointment dateTime provided is invalid!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_ALL_EVENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_MISSED_EVENT_LISTED_OVERVIEW \u003d \"%1$d missed appointmennt need to settle!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_MISSED_EVENTS_LISTED_OVERVIEW \u003d \"%1$d missed appointmennts need to settle!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_INVALID_ROOM_INDEX \u003d \"Invalid room index provided!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"The appointment index provided is not correct\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_NOT_PATIENTLIST \u003d \"displaying appointment are not belong to the same patient\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_NOT_MISSEDLIST \u003d \"current displaying appointment are not \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"belong to missed appointment list\\n\" + \"please type command: missedappt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_NOTHING_SETTLE \u003d \"no missed appointment needs to settle\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_EVENT_NOT_FOUND \u003d \"The appointment \u0027%1$s\u0027 is not registered\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 4,
      "wongsm7": 2,
      "-": 12,
      "woon17": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/OmniPanelTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * Enum for OmniPanel\u0027s Tab."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public enum OmniPanelTab {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    PATIENTS_TAB(\"patientsTab\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    APPOINTMENTS_TAB(\"appointmentsTab\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    DOCTORS_TAB(\"doctorsTab\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private static final Map\u003cString, OmniPanelTab\u003e BY_ID \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        for (OmniPanelTab omniPanelTab: values()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            BY_ID.put(omniPanelTab.id, omniPanelTab);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    OmniPanelTab(String id) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public static OmniPanelTab valueOfId(String id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        return BY_ID.get(id);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if {@code substring} is blank or the {@code sentence} contains the {@code substring}, ignores case."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param sentence  cannot be null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param substring cannot be null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static boolean containsIgnoreCase(String sentence, String substring) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(substring);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return substring.isBlank() || sentence.toUpperCase().contains(substring.toUpperCase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 13,
      "CarbonGrid": 2,
      "-": 68,
      "woon17": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.commons.core.OmniPanelTab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceIdResolver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    CommandResult execute(String commandText, Consumer\u003cOmniPanelTab\u003e omniPanelTabConsumer) throws CommandException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of events"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @see Model#getAddressBook()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the a resolver class for mapping {@code ReferenceId} to {@code Person}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ReferenceIdResolver getReferenceIdResolver();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns an unmodifiable view of the list of available consultation rooms."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cRoom\u003e getConsultationRoomList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns an unmodifiable view of the queue list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cReferenceId\u003e getQueueList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the Appointment Book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @see Model#getAppointmentBook()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ReadOnlyAppointmentBook getAppointmentBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the user prefs\u0027 appointment book file path."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 25,
      "wongsm7": 7,
      "CarbonGrid": 14,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.commons.core.OmniPanelTab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.NonActionableCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceIdResolver;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final QueueManager queueManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.addressBookParser \u003d new AddressBookParser(commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public CommandResult execute(String commandText, Consumer\u003cOmniPanelTab\u003e omniPanelTabConsumer)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        throws CommandException, ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (command instanceof ReversibleCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(\"Reversible Commands should be contained in a ReversibleActionPairCommand\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (command instanceof ReversibleActionPairCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            commandHistory.addToCommandHistory((ReversibleActionPairCommand) command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!(command instanceof NonActionableCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                storage.saveAppointmentBook(model.getAppointmentBook());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cReferenceId\u003e getQueueList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return model.getQueueList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cRoom\u003e getConsultationRoomList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return model.getConsultationRoomList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return model.getAppointmentBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReferenceIdResolver getReferenceIdResolver() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return model.getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 48,
      "wongsm7": 14,
      "CarbonGrid": 4,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AckAppCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Acknowledge a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class AckAppCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ackappt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Ack a appointment to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Parameters: KEYWORD \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 001A\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"this appointmeent has been acked: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"this appointmeent has been unacked: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACKED \u003d \"the upcoming appointment has been acked already.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event eventToEdit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event editedEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Creates an AckAppCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AckAppCommand(Event eventToEdit, Event editedEvent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(eventToEdit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.eventToEdit \u003d eventToEdit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.editedEvent \u003d editedEvent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.deleteEvent(eventToEdit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (model.hasExactEvent(editedEvent)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACKED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.addEvent(editedEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.displayApprovedAndAckedPatientEvent(editedEvent.getPersonId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "                || (other instanceof AckAppCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 editedEvent.equals(((AckAppCommand) other).editedEvent));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAppCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURSIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURSIVE_TIMES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class AddAppCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addappt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a appointment to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_ID + \"REFERENCE ID \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_START + \"PREFIX_EVENT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_END + \"PREFIX_EVENT \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_ID + \"001A \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_START + \"01/11/19 1800 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_END + \"01/11/19 1900\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_USAGE_RECURSIVELY \u003d COMMAND_WORD + \": Adds recursively appointment\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \" to the address book. \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_ID + \"REFERENCE ID \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"[\" + PREFIX_RECURSIVE + \"PREFIX_RECURSIVE w/m/y] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"[\" + PREFIX_RECURSIVE_TIMES + \"PREFIX_RECURSIVE_TIMES] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_START + \"PREFIX_EVENT \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_END + \"PREFIX_EVENT \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_ID + \"001A \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_RECURSIVE + \"m \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_RECURSIVE_TIMES + \"2 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_START + \"01/11/19 1800 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_END + \"01/11/19 1900\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Appointment added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_SUCCESS_RECURSIVE \u003d \" recusive Appointments were added\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This appointment is already scheduled.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_CLASH_APPOINTMENT \u003d \"This appointment clashes with a pre-existing appointment.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final List\u003cEvent\u003e eventList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Creates an AddAppCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AddAppCommand(Event toAdd) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.eventList \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AddAppCommand(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(eventList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.toAdd \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (eventList \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woon17"
        },
        "content": "            addOneEvent(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateFilteredEventList(toAdd.getPersonId());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woon17"
        },
        "content": "            for (Event e : eventList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woon17"
        },
        "content": "                if (model.hasEvent(e)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woon17"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woon17"
        },
        "content": "                model.addEvent(e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateFilteredEventList(eventList.get(0).getPersonId());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, eventList.size() + MESSAGE_SUCCESS_RECURSIVE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Adds a new event to the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private void addOneEvent(Model model) throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "woon17"
        },
        "content": "                || (other instanceof AddAppCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAppCommand) other).toAdd));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddConsultationRoomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class AddConsultationRoomCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New room added : %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This room already exists in the list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addRoom\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new room. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"REFERENCE_ID \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 001A\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room roomToAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Creates an EnqueueCommand to add the specified {@code PatientReferenceId}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public AddConsultationRoomCommand(Room roomToAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(roomToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomToAdd \u003d roomToAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.hasRoom(roomToAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } else if (!model.hasPerson(roomToAdd.getDoctor())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVAILD_REFERENCE_ID, roomToAdd));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.addRoom(roomToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, roomToAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof AddConsultationRoomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 roomToAdd.equals(((AddConsultationRoomCommand) other).roomToAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AppointmentsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.NonActionableCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Finds and lists all events in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class AppointmentsCommand extends NonActionableCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"appointments\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose reference Id contain any of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + \"Optional parameters: KEYWORD \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 001A\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final ReferenceId referenceId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AppointmentsCommand(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.referenceId \u003d referenceId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AppointmentsCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.referenceId \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        autoMissEvent(model.getFilteredEventList(), model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (referenceId \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateFilteredEventList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateFilteredEventList(referenceId);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "                String.format(Messages.MESSAGE_ALL_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * checks all the appointments that before the current time and then make them as missed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param filteredEventList which is the eventList contains the referenceId"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private void autoMissEvent(ObservableList\u003cEvent\u003e filteredEventList, Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "        for (Event ev : filteredEventList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Timing evTiming \u003d ev.getEventTiming();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Date current \u003d new Date();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (!ev.getStatus().equals(new Status(Status.AppointmentStatuses.SETTLED))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    \u0026\u0026 evTiming.getEndTime().getTime().before(current)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": "                Event newAppt \u003d new Appointment(ev.getPersonId(), ev.getEventTiming(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "                        new Status(Status.AppointmentStatuses.MISSED));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "                model.setEvent(ev, newAppt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 4,
      "woon17": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BreakCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class BreakCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"break\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \": Doctor goes for a break\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Doctor %s is on break\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_ALREADY_ON_BREAK \u003d \"Doctor is already resting\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in the list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room roomToEdit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room editedRoom;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public BreakCommand(Room roomToEdit, Room editedRoom, Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.editedRoom \u003d editedRoom;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomToEdit \u003d roomToEdit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!roomToEdit.isReadyToServe()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ON_BREAK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.removeRoom(roomToEdit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.hasRoom(editedRoom)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.addRoomToIndex(editedRoom, index.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.resolve(editedRoom.getDoctor()).getName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof BreakCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 editedRoom.equals(((BreakCommand) other).editedRoom)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 roomToEdit.equals(((BreakCommand) other).roomToEdit)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 index.equals(((BreakCommand) other).index)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CancelAppCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": " * cancel a appointments for a patient."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class CancelAppCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancelappt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels appointment from the schedule. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Parameters: INDEX (positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"need to go to patient\u0027s appointment list first\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_CANCEL_APPOINTMENT_SUCCESS \u003d \"Appointment cancelled: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event toDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final List\u003cEvent\u003e eventList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CancelAppCommand(Event toDelete) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.toDelete \u003d toDelete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.eventList \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CancelAppCommand(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(eventList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.toDelete \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (eventList \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "            deleteOneEvent(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateFilteredEventList(toDelete.getPersonId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CANCEL_APPOINTMENT_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "            for (Event e : eventList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "                if (!model.hasExactEvent(e)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    throw new CommandException(String.format(Messages.MESSAGE_EVENT_NOT_FOUND, e));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "                model.deleteEvent(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateFilteredEventList(eventList.get(0).getPersonId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CANCEL_APPOINTMENT_SUCCESS, eventList));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * delete a exist event from the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private void deleteOneEvent(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!model.hasExactEvent(toDelete)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_EVENT_NOT_FOUND, toDelete));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.deleteEvent(toDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": "                || (other instanceof CancelAppCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 toDelete.equals(((CancelAppCommand) other).toDelete));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangeAppCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Chnageing the timing of the appointment."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class ChangeAppCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"changeappt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": change the appointment date \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"by the index number used in the displayed patient\u0027s list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_START + \"PREFIX_EVENT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_END + \"PREFIX_EVENT \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_START + \"01/11/19 1800 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + PREFIX_END + \"01/11/19 1900\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"this appointmeent\u0027s timing has been changed: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_TIMING_EXIST \u003d \"please give a new valid timing for the appointment to change.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event eventToEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event editedEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Creates an ChangeAppCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ChangeAppCommand(Event eventToEdit, Event editedEvent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(eventToEdit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.eventToEdit \u003d eventToEdit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.editedEvent \u003d editedEvent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (model.hasExactEvent(editedEvent)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new CommandException(MESSAGE_TIMING_EXIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.setEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.updateFilteredEventList(editedEvent.getPersonId());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "                || (other instanceof ChangeAppCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 editedEvent.equals(((ChangeAppCommand) other).editedEvent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DequeueCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class DequeueCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"dequeue\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \": Dequeues the person identified by the index number used in the displayed queue.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_DEQUEUE_SUCCESS \u003d \"Dequeued patient: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_DEQUEUE_PERSON_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Messages.MESSAGE_INVAILD_REFERENCE_ID + \". \u0027%1$s\u0027 patient has been removed from queue\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_QUEUE \u003d \"This person \u0027%1$s\u0027 is not in the queue\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ReferenceId patientReferenceId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DequeueCommand(ReferenceId patientReferenceId) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(patientReferenceId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.patientReferenceId \u003d patientReferenceId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!model.isPatientInQueue(patientReferenceId)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_NOT_IN_QUEUE, patientReferenceId));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.removeFromQueue(patientReferenceId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DEQUEUE_SUCCESS, patientReferenceId));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof DequeueCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 patientReferenceId.equals(((DequeueCommand) other).patientReferenceId)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 42,
      "SakuraBlossom": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EnqueueCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class EnqueueCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added to the queue: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the queue\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enqueue\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enqueues a patient to the queue. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"REFERENCE_ID \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 001A\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ReferenceId patientReferenceId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Creates an EnqueueCommand to add the specified {@code PatientReferenceId}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public EnqueueCommand(ReferenceId patientReferenceId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(patientReferenceId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.patientReferenceId \u003d patientReferenceId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (model.isPatientInQueue(patientReferenceId)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else if (!model.hasPerson(patientReferenceId)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVAILD_REFERENCE_ID, patientReferenceId));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model.enqueuePatient(patientReferenceId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, patientReferenceId));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof EnqueueCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 patientReferenceId.equals(((EnqueueCommand) other).patientReferenceId));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 43,
      "SakuraBlossom": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.NonActionableCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.predicates.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class FindCommand extends NonActionableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public FindCommand(ContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 6,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.NonActionableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class HelpCommand extends NonActionableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.NonActionableCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ListCommand extends NonActionableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MissAppCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.NonActionableCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": " * mark a appointment\u0027s status as MISSED for a patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class MissAppCommand extends NonActionableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"missappt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all the missed appointment \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Parameters: KEYWORD \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public MissAppCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.updateToMissedEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "        int size \u003d model.getFilteredEventList().size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "        String displayMess \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (size \u003c\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "            displayMess \u003d Messages.MESSAGE_MISSED_EVENT_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "            displayMess \u003d Messages.MESSAGE_MISSED_EVENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "                String.format(displayMess, size));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NextCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Serves the next patient in queue."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class NextCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"next\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Next patient has been allocated to room \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DOCTOR_ON_BREAK \u003d \"Doctor is currently on break\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_QUEUE \u003d \"This person \u0027%1$s\u0027 is not in the queue\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in the list.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allocates next patient in queue to a room. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room roomToEdit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room editedRoom;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final ReferenceId patientReferenceId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public NextCommand(Room roomToEdit, Room editedRoom, Index index, ReferenceId patientReferenceId) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.editedRoom \u003d editedRoom;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomToEdit \u003d roomToEdit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.patientReferenceId \u003d patientReferenceId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!model.isPatientInQueue(patientReferenceId)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_NOT_IN_QUEUE, patientReferenceId));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } else if (!roomToEdit.isReadyToServe()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DOCTOR_ON_BREAK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.removeFromQueue(patientReferenceId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.removeRoom(roomToEdit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.hasRoom(editedRoom)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.addRoomToIndex(editedRoom, index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + editedRoom);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof NextCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 editedRoom.equals(((NextCommand) other).editedRoom))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 roomToEdit.equals(((NextCommand) other).roomToEdit)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 index.equals(((NextCommand) other).index)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 patientReferenceId.equals(((NextCommand) other).patientReferenceId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Redoes the action of an {@code UndoableCommand} command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class RedoCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public RedoCommand(CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return history.performRedo(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                || other instanceof RedoCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveRoomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class RemoveRoomCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removeRoom\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \": Removes the room identified by the index number used in the displayed rooms.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DEQUEUE_SUCCESS \u003d \"Removed room: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DEQUEUE_PERSON_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            Messages.MESSAGE_INVAILD_REFERENCE_ID + \". \u0027%1$s\u0027 has been removed from list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_IN_QUEUE \u003d \"This room \u0027%1$s\u0027 is not in the list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room roomToRemove;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public RemoveRoomCommand(Room roomToRemove) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(roomToRemove);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomToRemove \u003d roomToRemove;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!model.hasRoom(roomToRemove)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_NOT_IN_QUEUE, roomToRemove));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.removeRoom(roomToRemove);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DEQUEUE_SUCCESS, roomToRemove));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof RemoveRoomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 roomToRemove.equals(((RemoveRoomCommand) other).roomToRemove)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResumeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class ResumeCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resume\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \": Doctor is back from his/her break\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Doctor %s resumes his/her duty\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in the list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_ALREADY_BACK_FROM_BREAK \u003d \"Doctor is already back from his/her break\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room roomToEdit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room editedRoom;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ResumeCommand(Room roomToEdit, Room editedRoom, Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.editedRoom \u003d editedRoom;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomToEdit \u003d roomToEdit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (roomToEdit.isReadyToServe()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_BACK_FROM_BREAK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.removeRoom(roomToEdit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.hasRoom(editedRoom)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.addRoomToIndex(editedRoom, index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.resolve(editedRoom.getDoctor()).getName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof ResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 editedRoom.equals(((ResumeCommand) other).editedRoom)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 roomToEdit.equals(((ResumeCommand) other).roomToEdit)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 index.equals(((ResumeCommand) other).index)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SettleAppCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": " * mark a appointment\u0027s status as SETTLED for a patient."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class SettleAppCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"settleappt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": settle a missed appointment. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"by the index number used in the displayed missed appointment\u0027s list. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SETTLE \u003d \"you have settled this missed appointment already\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"this missed appointmeent has been settled: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_SUCCESS_UNDO \u003d \"this missed appointmeent has been unsettled: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event eventToEdit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event editedEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Creates an SettleAppCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public SettleAppCommand(Event eventToEdit, Event editedEvent) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(eventToEdit);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.eventToEdit \u003d eventToEdit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.editedEvent \u003d editedEvent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (eventToEdit \u003d\u003d null \u0026 editedEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateToSettleEventList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (model.hasExactEvent(editedEvent)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_SETTLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.deleteEvent(eventToEdit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.addEvent(editedEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "            model.updateToMissedEventList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "            //or model.updateToSettledEventList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (eventToEdit.getStatus().isMissed()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, editedEvent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_UNDO, editedEvent));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "                || (other instanceof SettleAppCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 editedEvent.equals(((SettleAppCommand) other).editedEvent));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Undoes the action of an {@code UndoableCommand} command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UndoCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public UndoCommand(CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return history.performUndo(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                || other instanceof UndoCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoDequeueCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class UndoDequeueCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Person added back to the queue: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the queue\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enqueue\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enqueues a patient to the queue. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            + \"REFERENCE_ID \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final ReferenceId patientReferenceId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final int indexOfPatientInQueue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Creates an EnqueueCommand to add the specified {@code PatientReferenceId}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public UndoDequeueCommand(ReferenceId patientReferenceId, int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(patientReferenceId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.patientReferenceId \u003d patientReferenceId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.indexOfPatientInQueue \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.isPatientInQueue(patientReferenceId)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } else if (!model.hasPerson(patientReferenceId)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVAILD_REFERENCE_ID, patientReferenceId));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.enqueuePatientToIndex(patientReferenceId, indexOfPatientInQueue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, patientReferenceId));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof UndoDequeueCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 patientReferenceId.equals(((UndoDequeueCommand) other).patientReferenceId));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoNextCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Serves the next patient in queue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class UndoNextCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"next\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Next patient has been unallocated from room \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROOM \u003d \"This room already exists in the list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room roomToEdit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room editedRoom;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final ReferenceId patientReferenceId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public UndoNextCommand(Room roomToEdit, Room editedRoom, Index index, ReferenceId patientReferenceId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.editedRoom \u003d editedRoom;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomToEdit \u003d roomToEdit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.patientReferenceId \u003d patientReferenceId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.isPatientInQueue(patientReferenceId)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.enqueuePatientToIndex(patientReferenceId, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.removeRoom(roomToEdit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.hasRoom(editedRoom)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROOM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.addRoomToIndex(editedRoom, index.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + editedRoom);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoRemoveRoomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class UndoRemoveRoomCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Room added back to the list: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This room already exists in the list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final Room roomToAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final int indexOfPatientInQueue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Creates an EnqueueCommand to add the specified {@code PatientReferenceId}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public UndoRemoveRoomCommand(Room room, int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomToAdd \u003d room;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.indexOfPatientInQueue \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (model.hasRoom(roomToAdd)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.addRoomToIndex(roomToAdd, indexOfPatientInQueue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, roomToAdd));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof UndoRemoveRoomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 roomToAdd.equals(((UndoRemoveRoomCommand) other).roomToAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Keeps track of the execution of {@code ReversibleActionPairCommand} commands that alters one or more entries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_NO_UNDO_HISTORY_ERROR \u003d \"Nothing to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_NO_REDO_HISTORY_ERROR \u003d \"Nothing to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Stack\u003cReversibleActionPairCommand\u003e commandHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Stack\u003cReversibleActionPairCommand\u003e commandRedoHistory \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Checks if an undo operation is available."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return {@code True} if an undo operation is available, otherwise {@code False}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return commandHistory.size() \u003e 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Checks if a redo operation is available."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return {@code True} if an undo operation is available, otherwise {@code False}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return commandRedoHistory.size() \u003e 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Adds an {@code ReversibleActionPairCommand} to the command history."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param command to be added to the command history."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void addToCommandHistory(ReversibleActionPairCommand command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        commandHistory.add(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        commandRedoHistory.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Undoes the previous {@code ReversibleActionPairCommand} command and returns the result message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The command history cannot be empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult performUndo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(MESSAGE_NO_UNDO_HISTORY_ERROR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandResult commandResult \u003d commandHistory.peek().undo(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        commandRedoHistory.add(commandHistory.pop());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Redoes the previous {@code UndoableCommand} command and returns the result message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The command redo history cannot be empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult performRedo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(MESSAGE_NO_REDO_HISTORY_ERROR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandResult commandResult \u003d commandRedoHistory.peek().redo(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        commandHistory.add(commandRedoHistory.pop());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 6,
      "CarbonGrid": 6,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/NonActionableCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a command which does not modify the models or data base."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public abstract class NonActionableCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/ReversibleActionPairCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a reversible command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ReversibleActionPairCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo successful!\\r\\n%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_REDO_SUCCESS \u003d \"Redo successful!\\r\\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_UNDO_ERROR \u003d \"Failed to undo command.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_REDO_ERROR \u003d \"Failed to redo command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_FIRST_EXECUTION_ERROR \u003d \"Command has already been executed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ReversibleCommand primaryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ReversibleCommand reverseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Represents the execution phase of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private enum ExecutionPhase {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        FIRSTEXECUTION,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EXECUTED,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UNDONE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ExecutionPhase executionPhase;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReversibleActionPairCommand(ReversibleCommand primaryCommand, ReversibleCommand reverseCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(primaryCommand, reverseCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.primaryCommand \u003d primaryCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.reverseCommand \u003d reverseCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.executionPhase \u003d ExecutionPhase.FIRSTEXECUTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (executionPhase !\u003d ExecutionPhase.FIRSTEXECUTION) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(MESSAGE_FIRST_EXECUTION_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        executionPhase \u003d ExecutionPhase.EXECUTED;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return primaryCommand.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Undoes the command and returns the result message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (executionPhase !\u003d ExecutionPhase.EXECUTED) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(MESSAGE_UNDO_ERROR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        executionPhase \u003d ExecutionPhase.UNDONE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandResult reverseCommandResult \u003d reverseCommand.execute(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDO_SUCCESS, reverseCommandResult.getFeedbackToUser()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Re-execute the command and returns the result message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (executionPhase !\u003d ExecutionPhase.UNDONE) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(MESSAGE_REDO_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        executionPhase \u003d ExecutionPhase.EXECUTED;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandResult commandResult \u003d primaryCommand.execute(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REDO_SUCCESS, commandResult.getFeedbackToUser()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            || (other instanceof ReversibleActionPairCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u0026\u0026 primaryCommand.equals(((ReversibleActionPairCommand) other).primaryCommand)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u0026\u0026 reverseCommand.equals(((ReversibleActionPairCommand) other).reverseCommand)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u0026\u0026 executionPhase.equals(((ReversibleActionPairCommand) other).executionPhase));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/ReversibleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a reversible command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public abstract class ReversibleCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patients/EditPatientDetailsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class EditPatientDetailsCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Person personToEdit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Person editedPerson;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param personToEdit person to be edited details"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param editedPerson person with edited details"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public EditPatientDetailsCommand(Person personToEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.personToEdit \u003d personToEdit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.editedPerson \u003d editedPerson;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (personToEdit.equals(editedPerson)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (personToEdit \u003d\u003d null || editedPerson \u003d\u003d null || !model.hasExactPerson(personToEdit)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (model.hasPerson(editedPerson) \u0026\u0026 !personToEdit.isSameAs(editedPerson)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!(other instanceof EditPatientDetailsCommand)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand e \u003d (EditPatientDetailsCommand) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return personToEdit.equals(e.personToEdit)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 editedPerson.equals(e.editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 28,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patients/RegisterPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class RegisterPatientCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + PREFIX_ID + \"REFERENCE ID \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + PREFIX_ID + \"001A \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public RegisterPatientCommand(Person person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                || (other instanceof RegisterPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RegisterPatientCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 14,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/patients/UnregisterPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Deletes a patient identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UnregisterPatientCommand extends ReversibleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Person toDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public UnregisterPatientCommand(Person toDelete) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.toDelete \u003d toDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!model.hasExactPerson(toDelete)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_PERSON_NOT_FOUND, toDelete));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (model.isPatientInQueue(toDelete.getReferenceId())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            model.removeFromQueue(toDelete.getReferenceId());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model.deletePerson(toDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                || (other instanceof UnregisterPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 toDelete.equals(((UnregisterPatientCommand) other).toDelete)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 17,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/utils/EditPersonDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * corresponding field value of the person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class EditPersonDescriptor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ReferenceId referenceId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        setReferenceId(toCopy.referenceId);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        setEmail(toCopy.email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        setAddress(toCopy.address);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return CollectionUtil.isAnyNonNull(referenceId, name, phone, email, address, tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setReferenceId(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.referenceId \u003d referenceId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cReferenceId\u003e getReferenceId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Optional.ofNullable(referenceId);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAddress(Address address) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return getReferenceId().equals(getReferenceId())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AckAppCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REFERENCEID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.AckAppCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class AckAppCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_NOTING_ACK \u003d \"there is no appointment under this patient.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private ObservableList\u003cEvent\u003e filterEventList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AckAppCommandParser(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(AckAppCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "            ReferenceId referenceId \u003d ParserUtil.parsePatientReferenceId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (!model.hasPerson(referenceId)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_REFERENCEID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "            updateToPatientList(referenceId);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (filterEventList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(MESSAGE_NOTING_ACK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "            } else if (filterEventList.get(0).getStatus().isAcked()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(AckAppCommand.MESSAGE_DUPLICATE_ACKED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "                Event unAck \u003d filterEventList.get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "                Timing timing \u003d unAck.getEventTiming();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "                Status status \u003d new Status(Status.AppointmentStatuses.ACKNOWLEDGED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "                Event toAck \u003d new Appointment(referenceId, timing, status);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "                return new ReversibleActionPairCommand(new AckAppCommand(unAck, toAck),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "                        new AckAppCommand(toAck, unAck));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private void updateToPatientList(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.updateFilteredEventList(referenceId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "        filterEventList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAppCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REFERENCEID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TIMING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURSIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURSIVE_TIMES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.AddAppCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.CancelAppCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Appointment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class AddAppCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AddAppCommandParser(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_RECURSIVE, PREFIX_RECURSIVE_TIMES,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "                        PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ID, PREFIX_START, PREFIX_END)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    AddAppCommand.MESSAGE_USAGE_RECURSIVELY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ReferenceId referenceId \u003d ParserUtil.parsePatientReferenceId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!model.hasPerson(referenceId)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_REFERENCEID, AddAppCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "        String startString \u003d argMultimap.getValue(PREFIX_START).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "        String endString \u003d argMultimap.getValue(PREFIX_END).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Timing timing \u003d ParserUtil.parseTiming(startString, endString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!timing.isValidTimingFromCurrentTime(timing.getStartTime(), timing.getEndTime())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_TIMING, AddAppCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Optional\u003cString\u003e recursiveStringOptional \u003d argMultimap.getValue(PREFIX_RECURSIVE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Optional\u003cString\u003e recursiveStringTimesOptional \u003d argMultimap.getValue(PREFIX_RECURSIVE_TIMES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (recursiveStringOptional.isPresent() \u0026\u0026 recursiveStringTimesOptional.isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": "            String recursiveString \u003d recursiveStringOptional.get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (!recursiveString.equals(\"w\") \u0026\u0026 !recursiveString.equals(\"m\") \u0026\u0026 !recursiveString.equals(\"y\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": "                        AddAppCommand.MESSAGE_USAGE_RECURSIVELY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Index rescursiveTimes \u003d ParserUtil.parseTimes(recursiveStringTimesOptional.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woon17"
        },
        "content": "            int times \u003d rescursiveTimes.getZeroBased() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Appointment event \u003d new Appointment(referenceId, timing, new Status());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woon17"
        },
        "content": "            List\u003cEvent\u003e eventList \u003d getRecEvents(event, recursiveString, times);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new ReversibleActionPairCommand(new AddAppCommand(eventList),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    new CancelAppCommand(eventList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Appointment event \u003d new Appointment(referenceId, timing, new Status());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new ReversibleActionPairCommand(new AddAppCommand(event),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    new CancelAppCommand(event));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private List\u003cEvent\u003e getRecEvents(Appointment event, String recursiveString, int times) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Timing timing \u003d event.getEventTiming();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Function\u003cTiming, Timing\u003e func \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woon17"
        },
        "content": "        switch (recursiveString) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case \"w\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woon17"
        },
        "content": "            func \u003d Timing::getOneWeekLaterTiming;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woon17"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case \"m\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woon17"
        },
        "content": "            func \u003d Timing::getOneMonthLaterTiming;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "woon17"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case \"d\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "woon17"
        },
        "content": "            func \u003d Timing::getOneDayLaterTiming;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "woon17"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woon17"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woon17"
        },
        "content": "            func \u003d Timing::getOneYearLaterTiming;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "woon17"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "woon17"
        },
        "content": "        for (int i \u003d 0; i \u003c times; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "woon17"
        },
        "content": "            eventList.add(new Appointment(event.getPersonId(), timing, new Status()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "woon17"
        },
        "content": "            timing \u003d func.apply(timing);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddConsultationRoomCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.AddConsultationRoomCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.RemoveRoomCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Parses input arguments and creates a new AddConsultationRoomCommandParser object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class AddConsultationRoomCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    AddConsultationRoomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ReferenceId referenceId \u003d ParserUtil.parsePatientReferenceId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Room room \u003d new Room(referenceId);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new ReversibleActionPairCommand(new AddConsultationRoomCommand(room),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new RemoveRoomCommand(room));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.AckAppCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.AddAppCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.AddConsultationRoomCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.AppointmentsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.BreakCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.CancelAppCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.ChangeAppCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.DequeueCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.EnqueueCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.MissAppCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.RemoveRoomCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.ResumeCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.SettleAppCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.EditPatientDetailsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.UnregisterPatientCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.patients.EditPatientDetailsCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.patients.RegisterPatientCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.patients.UnregisterPatientCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public AddressBookParser(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.commandHistory \u003d commandHistory;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Command parseCommand(String userInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case RegisterPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new RegisterPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case EditPatientDetailsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new EditPatientDetailsCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case UnregisterPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new UnregisterPatientCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new UndoCommand(commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new RedoCommand(commandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        case EnqueueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new EnqueueCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        case DequeueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new DequeueCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case AddAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new AddAppCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case AppointmentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new AppointmentsCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case AckAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new AckAppCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case CancelAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new CancelAppCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case ChangeAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new ChangeAppCommandTimingParser(model).parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case MissAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new MissAppCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case SettleAppCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new SettleAppCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        case AddConsultationRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new AddConsultationRoomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        case RemoveRoomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new RemoveRoomCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        case NextCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new NextCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        case BreakCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new BreakCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        case ResumeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new ResumeCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 26,
      "SakuraBlossom": 29,
      "-": 61,
      "woon17": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AppointmentsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_REFERENCEID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.AppointmentsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class AppointmentsCommandParser implements Parser\u003cAppointmentsCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AppointmentsCommandParser(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AppointmentsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "        model.updateFilteredEventList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new AppointmentsCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "            ReferenceId referenceId \u003d ParserUtil.parsePatientReferenceId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (!model.hasPerson(referenceId)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_REFERENCEID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new AppointmentsCommand(referenceId);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        prefixPositions.sort(Comparator.comparingInt(PrefixPosition::getStartPosition));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 2,
      "CarbonGrid": 1,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BreakCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.BreakCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.ResumeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class BreakCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index given\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private ObservableList\u003cRoom\u003e filteredRoomList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public BreakCommandParser(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NextCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        filteredRoomList \u003d model.getConsultationRoomList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (filteredRoomList.size() \u003c index.getOneBased()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Room roomToEdit \u003d filteredRoomList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Room editedRoom \u003d new Room(roomToEdit.getDoctor(), roomToEdit.getCurrentPatient(), true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new ReversibleActionPairCommand(new BreakCommand(roomToEdit, editedRoom, index),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new ResumeCommand(editedRoom, roomToEdit, index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wongsm7": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CancelAppCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.AddAppCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.CancelAppCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new CancelAppCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class CancelAppCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private List\u003cEvent\u003e lastShownList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public CancelAppCommandParser(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CancelApptCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * and returns an CancelApptCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!model.isPatientList()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_NOT_PATIENTLIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CancelAppCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Event eventToDelete \u003d ParserUtil.getEntryFromList(lastShownList, index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new ReversibleActionPairCommand(new CancelAppCommand(eventToDelete),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "                new AddAppCommand(eventToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ChangeAppCommandTimingParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.ChangeAppCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new ChangeAppCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class ChangeAppCommandTimingParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private List\u003cEvent\u003e lastShownList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ChangeAppCommandTimingParser(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReversibleActionPairCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * and returns a ReversibleActionPairCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!model.isPatientList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_NOT_PATIENTLIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START, PREFIX_END) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeAppCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "            int idx \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (idx \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "            String startString \u003d argMultimap.getValue(PREFIX_START).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "            String endString \u003d argMultimap.getValue(PREFIX_END).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Timing timing \u003d ParserUtil.parseTiming(startString, endString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Event eventToEdit \u003d lastShownList.get(idx);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Event editedEvent \u003d new Appointment(eventToEdit.getPersonId(), timing, new Status());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new ReversibleActionPairCommand(new ChangeAppCommand(eventToEdit, editedEvent),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    new ChangeAppCommand(editedEvent, eventToEdit));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Prefix PREFIX_ID \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"str/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"end/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final Prefix PREFIX_RECURSIVE \u003d new Prefix(\"rec/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final Prefix PREFIX_RECURSIVE_TIMES \u003d new Prefix(\"num/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 14,
      "woon17": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DequeueCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.DequeueCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.UndoDequeueCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class DequeueCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index given\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private List\u003cReferenceId\u003e lastShownList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DequeueCommandParser(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.lastShownList \u003d model.getQueueList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            if (lastShownList.size() \u003c index.getOneBased()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ReferenceId personToDequeue \u003d ParserUtil.getEntryFromList(lastShownList, index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            DequeueCommand dequeueCommand \u003d new DequeueCommand(personToDequeue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new ReversibleActionPairCommand(dequeueCommand,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    new UndoDequeueCommand(personToDequeue, index.getZeroBased()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DequeueCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 38,
      "SakuraBlossom": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EnqueueCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.DequeueCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.EnqueueCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Parses input arguments and creates a new EnqueueCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class EnqueueCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnqueueCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ReferenceId referenceId \u003d ParserUtil.parsePatientReferenceId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new ReversibleActionPairCommand(new EnqueueCommand(referenceId), new DequeueCommand(referenceId));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 38,
      "woon17": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.predicates.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new FindCommand(new ContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 2,
      "CarbonGrid": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MissAppCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.MissAppCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new MissAppCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class MissAppCommandParser implements Parser\u003cMissAppCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MissAppCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * and returns a MissAppCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public MissAppCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MissAppCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new MissAppCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NextCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.UndoNextCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class NextCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index given\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_NO_PATIENT \u003d \"There are no patients in the queue\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private ObservableList\u003cRoom\u003e filteredRoomList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private ObservableList\u003cReferenceId\u003e queueList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public NextCommandParser(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.queueList \u003d model.getQueueList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NextCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        filteredRoomList \u003d model.getConsultationRoomList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (filteredRoomList.size() \u003c index.getOneBased()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } else if (queueList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException(MESSAGE_NO_PATIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ReferenceId patientBeingServed \u003d queueList.get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Room roomToEdit \u003d filteredRoomList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Room editedRoom \u003d new Room(roomToEdit.getDoctor(), Optional.of(patientBeingServed));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new ReversibleActionPairCommand(new NextCommand(roomToEdit, editedRoom, index, patientBeingServed),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new UndoNextCommand(editedRoom, roomToEdit, index, patientBeingServed));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wongsm7": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "CarbonGrid": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PersonReferenceId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.StaffReferenceId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMES \u003d \"Recusive times should be a positive number\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the element at the {@code oneBasedIndex} index of a given {@code listofEntries}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws ParseException if the specified index is out of bounds of the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static \u003cT\u003e T getEntryFromList(List\u003cT\u003e listOfEntries, Index oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (oneBasedIndex.getZeroBased() \u003e\u003d listOfEntries.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return listOfEntries.get(oneBasedIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses a {@code String refId} into an {@code StaffReferenceId}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws ParseException if the given {@code StaffReferenceId} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static StaffReferenceId parseStaffReferenceId(String staffRefId) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(staffRefId);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String trimmedRefId \u003d staffRefId.trim().toUpperCase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!PersonReferenceId.isValidId(trimmedRefId)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(PersonReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else if (!StaffReferenceId.isValidStaffId(trimmedRefId)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(StaffReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new StaffReferenceId(trimmedRefId);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses a {@code String refId} into an {@code PatientReferenceId}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws ParseException if the given {@code PatientReferenceId} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static PatientReferenceId parsePatientReferenceId(String patientRefId) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(patientRefId);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String trimmedRefId \u003d patientRefId.trim().toUpperCase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!PersonReferenceId.isValidId(trimmedRefId)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(PersonReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else if (!PatientReferenceId.isValidPatientId(trimmedRefId)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(PatientReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new PatientReferenceId(trimmedRefId);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * checks the starting and ending time of the appointment is a valid time."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param start which the string startTime of the appointment."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param end   which the string endTime of the appointment."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return the valid Appointment object."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException If an error occurs during command parsering."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static Timing parseTiming(String start, String end) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(start, end);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime startTiming \u003d DateTime.tryParseSimpleDateFormat(start);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (startTiming \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(\"The start \" + DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime endTiming \u003d DateTime.tryParseSimpleDateFormat(end);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (endTiming \u003d\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(\"The end \" + DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!Timing.isValidTiming(startTiming, endTiming)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(Timing.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new Timing(startTiming, endTiming);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static Index parseTimes(String recTimes) throws ParseException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "woon17"
        },
        "content": "        String trimmedtimes \u003d recTimes.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedtimes)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIMES);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedtimes));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 58,
      "CarbonGrid": 1,
      "-": 119,
      "woon17": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveRoomCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.RemoveRoomCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.UndoRemoveRoomCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class RemoveRoomCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private List\u003cRoom\u003e lastShownList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public RemoveRoomCommandParser(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.lastShownList \u003d model.getConsultationRoomList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            Room roomToRemove \u003d ParserUtil.getEntryFromList(lastShownList, index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            return new ReversibleActionPairCommand(new RemoveRoomCommand(roomToRemove),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    new UndoRemoveRoomCommand(roomToRemove, index.getZeroBased()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveRoomCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResumeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.BreakCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.ResumeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Parses input arguments and creates a new EnqueueCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class ResumeCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index given\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private ObservableList\u003cRoom\u003e filteredRoomList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ResumeCommandParser(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NextCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        filteredRoomList \u003d model.getConsultationRoomList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (filteredRoomList.size() \u003c index.getOneBased()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Room roomToEdit \u003d filteredRoomList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Room editedRoom \u003d new Room(roomToEdit.getDoctor(), roomToEdit.getCurrentPatient(), false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new ReversibleActionPairCommand(new ResumeCommand(roomToEdit, editedRoom, index),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new BreakCommand(editedRoom, roomToEdit, index));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SettleAppCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.SettleAppCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new SettleAppCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class SettleAppCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private List\u003cEvent\u003e lastShownList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public SettleAppCommandParser(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.lastShownList \u003d model.getFilteredEventList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReversibleActionPairCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * and returns a ReversibleActionPairCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!model.isMissedList()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_NOT_MISSEDLIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (lastShownList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_NOTHING_SETTLE + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "                        + \"No need: \" + \"settleappt \" + args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "            int idx \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (idx \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Event eventToEdit \u003d lastShownList.get(idx);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "            Event editedEvent \u003d new Appointment(eventToEdit.getPersonId(), eventToEdit.getEventTiming(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    new Status(Status.AppointmentStatuses.SETTLED));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return new ReversibleActionPairCommand(new SettleAppCommand(eventToEdit, editedEvent),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    new SettleAppCommand(editedEvent, eventToEdit));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patients/EditPatientDetailsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.parser.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.EditPatientDetailsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class EditPatientDetailsCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private List\u003cPerson\u003e lastShownList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public EditPatientDetailsCommandParser(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * and returns an ReversibleActionPairCommand object containing an EditCommand for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                EditPatientDetailsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d createEditedPersonDescriptor(argMultimap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person personToEdit \u003d ParserUtil.getEntryFromList(lastShownList, index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new EditPatientDetailsCommand(personToEdit, editedPerson),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new EditPatientDetailsCommand(editedPerson, personToEdit));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Creates and returns a {@code editPersonDescriptor} based on a given {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private EditPersonDescriptor createEditedPersonDescriptor(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ID).isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            editPersonDescriptor.setReferenceId("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                ParserUtil.parsePatientReferenceId(argMultimap.getValue(PREFIX_ID).get()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(EditPatientDetailsCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return editPersonDescriptor;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ReferenceId updatedRefId \u003d editPersonDescriptor.getReferenceId().orElse(personToEdit.getReferenceId());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Person(updatedRefId, updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 82,
      "CarbonGrid": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patients/RegisterPatientCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.parser.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.UnregisterPatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class RegisterPatientCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * and returns an ReversibleActionPairCommand object containing an AddCommand for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ID, PREFIX_NAME,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ID, PREFIX_NAME, PREFIX_PHONE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                PREFIX_EMAIL, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                RegisterPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ReferenceId referenceId \u003d ParserUtil.parsePatientReferenceId(argMultimap.getValue(PREFIX_ID).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person person \u003d new Person(referenceId, name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new ReversibleActionPairCommand(new RegisterPatientCommand(person),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new UnregisterPatientCommand(person));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 29,
      "CarbonGrid": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/patients/UnregisterPatientCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.parser.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.UnregisterPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Parses input arguments and creates a new DeleteAppCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UnregisterPatientCommandParser implements Parser\u003cReversibleActionPairCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private List\u003cPerson\u003e lastShownList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public UnregisterPatientCommandParser(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * and returns an ReversibleActionPairCommand object containing an DeleteCommand for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReversibleActionPairCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnregisterPatientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person personToDelete \u003d ParserUtil.getEntryFromList(lastShownList, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new UnregisterPatientCommand(personToDelete),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new RegisterPatientCommand(personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 27,
      "CarbonGrid": 1,
      "-": 20,
      "woon17": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public AddressBook() { }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.persons.setAll(persons);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if a person with the same identity as {@code ReferenceId} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasPerson(ReferenceId id) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return persons.contains(id);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if an exact {@code person} exists in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasExactPerson(Person person) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return persons.containsExact(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        persons.set(target, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns a person with the same identity as {@code ReferenceId} who exists in the address book, otherwise null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Person resolve(ReferenceId id) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return persons.getPerson(id);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 26,
      "CarbonGrid": 2,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AppointmentBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.UniqueElementList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Wraps all data at the appointment-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Duplicates are not allowed (by .isSameEvent comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class AppointmentBook implements ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final UniqueElementList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        events \u003d new UniqueElementList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AppointmentBook() { }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Creates an PatientSchedule using the Events in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public AppointmentBook(ReadOnlyAppointmentBook toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.events.setAll(events);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Resets the existing data of this {@code PatientSchedule} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void resetData(ReadOnlyAppointmentBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if a event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if an exact {@code event} exists in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasExactEvent(Event event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return events.containsExact(event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Adds a event to the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The event must not already exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void addEvent(Event p) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        events.add(p);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        events.set(target, editedEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Removes {@code key} from this {@code PatientSchedule}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                || (other instanceof AppointmentBook // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 events.equals(((AppointmentBook) other).events));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return events.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 125,
      "woon17": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceIdResolver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface Model extends ReferenceIdResolver {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    Predicate\u003cReferenceId\u003e PREDICATE_SHOW_ALL_ID \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    Predicate\u003cRoom\u003e PREDICATE_SHOW_ALL_ROOMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the user prefs\u0027 appointment book file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Sets the user prefs\u0027 appointment book file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void setAppointmentBookFilePath(Path appointmentBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if an exact {@code person} exists in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    boolean hasExactPerson(Person person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Queue Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns the QueueManager"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    QueueManager getQueueManager();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Removes a patient from the queue with the ReferenceId given"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void removeFromQueue(ReferenceId target);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Enqueues a patient to the queue"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void enqueuePatient(ReferenceId id);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Enqueues a patient to the queue based on the index given"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void enqueuePatientToIndex(ReferenceId id, int index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Checks if the patient is in queue"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean isPatientInQueue(ReferenceId id);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns the queueList"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cReferenceId\u003e getQueueList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a new room to the list of rooms"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void addRoom(Room room);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a new room to the list of rooms based on the index"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void addRoomToIndex(Room room, int indexOfRoom);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Removes a room"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void removeRoom(Room target);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Checks if the room exists"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean hasRoom(Room room);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cRoom\u003e getConsultationRoomList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Scheduler \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Replaces schedule data with the data in {@code schedule}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void setSchedule(ReadOnlyAppointmentBook schedule);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the schedule of appointments."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ReadOnlyAppointmentBook getAppointmentBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the schedule."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if an exact {@code event} exists in the schedule."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    boolean hasExactEvent(Event event);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The event must exist in the schedule."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void deleteEvent(Event event);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code person} must not already exist in the schedule."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void setEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Returns an unmodifiable view of the filtered event list"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "woon17"
        },
        "content": "    void updateFilteredEventList(ReferenceId referenceId);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "woon17"
        },
        "content": "    void updateFilteredEventList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "woon17"
        },
        "content": "    void updateToMissedEventList();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "woon17"
        },
        "content": "    void updateToSettleEventList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "woon17"
        },
        "content": "    void displayApprovedAndAckedPatientEvent(ReferenceId referenceId);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Boolean isPatientList();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Boolean isMissedList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 57,
      "SakuraBlossom": 86,
      "CarbonGrid": 7,
      "-": 83,
      "woon17": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final AppointmentBook appointmentBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final QueueManager queueManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final FilteredList\u003cRoom\u003e filteredRooms;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final FilteredList\u003cReferenceId\u003e filteredReferenceIds;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs, QueueManager queueManager,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        ReadOnlyAppointmentBook patientSchedule) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.queueManager \u003d new QueueManager(queueManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.appointmentBook \u003d new AppointmentBook(patientSchedule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        filteredRooms \u003d new FilteredList\u003c\u003e(this.queueManager.getRoomList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(this.appointmentBook.getEventList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        filteredReferenceIds \u003d new FilteredList\u003c\u003e(this.queueManager.getReferenceIdList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new QueueManager(), new AppointmentBook());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d QueueManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public QueueManager getQueueManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return queueManager;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeFromQueue(ReferenceId target) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.removePatient(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void enqueuePatient(ReferenceId id) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(id);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void enqueuePatientToIndex(ReferenceId id, int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(index, id);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean isPatientInQueue(ReferenceId id) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return queueManager.hasId(id);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoom(Room room) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoom(room);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoomToIndex(Room room, int indexOfRoom) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoomToIndex(room, indexOfRoom);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeRoom(Room target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.removeRoom(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return queueManager.hasRoom(room);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return userPrefs.getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(appointmentBookFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        userPrefs.setAppointmentBookFilePath(appointmentBookFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasPerson(ReferenceId id) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return addressBook.hasPerson(id);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasExactPerson(Person person) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return addressBook.hasExactPerson(person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Person resolve(ReferenceId id) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return addressBook.resolve(id);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Reference id List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cReferenceId\u003e getQueueList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return filteredReferenceIds;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Room List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cRoom\u003e getConsultationRoomList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return filteredRooms;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setSchedule(ReadOnlyAppointmentBook schedule) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return appointmentBook.hasEvent(event);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasExactEvent(Event event) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return appointmentBook.hasExactEvent(event);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        appointmentBook.removeEvent(event);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "woon17"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        appointmentBook.addEvent(event);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        appointmentBook.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateFilteredEventList(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "woon17"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Predicate\u003cEvent\u003e byApproved \u003d Event -\u003e (Event.getStatus().isApproved()"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 Event.getPersonId().equals(referenceId));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "woon17"
        },
        "content": "        filteredEvents.setPredicate(byApproved);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateFilteredEventList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "woon17"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Predicate\u003cEvent\u003e byApproved \u003d Event -\u003e Event.getStatus().isApproved();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "woon17"
        },
        "content": "        filteredEvents.setPredicate(byApproved);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void displayApprovedAndAckedPatientEvent(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "woon17"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Predicate\u003cEvent\u003e byApproved \u003d Event -\u003e ((Event.getStatus().isApproved() || Event.getStatus().isAcked())"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 Event.getPersonId().equals(referenceId));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "woon17"
        },
        "content": "        filteredEvents.setPredicate(byApproved);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Returns an boolean, check whether current displaying appointments are belong to the same patient."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Boolean isPatientList() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(filteredEvents);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "woon17"
        },
        "content": "        boolean res \u003d true;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ReferenceId id \u003d filteredEvents.get(0).getPersonId();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "woon17"
        },
        "content": "        for (Event e : filteredEvents) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (!id.equals(e.getPersonId())) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "woon17"
        },
        "content": "                res \u003d false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "woon17"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateToMissedEventList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "woon17"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Date current \u003d new Date();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Predicate\u003cEvent\u003e byMissed \u003d Event -\u003e (Event.getStatus().isMissed())"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "woon17"
        },
        "content": "                || (!Event.getStatus().isSettled() \u0026\u0026 (Event.getEventTiming().getEndTime().getTime().before(current)));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "woon17"
        },
        "content": "        filteredEvents.setPredicate(byMissed);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateToSettleEventList() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "woon17"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Predicate\u003cEvent\u003e bySettled \u003d Event -\u003e (Event.getStatus().isSettled());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "woon17"
        },
        "content": "        filteredEvents.setPredicate(bySettled);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Boolean isMissedList() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(filteredEvents);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "woon17"
        },
        "content": "        boolean res \u003d true;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "woon17"
        },
        "content": "        for (Event e : filteredEvents) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (!e.getStatus().isMissed()) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "woon17"
        },
        "content": "                res \u003d false;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "woon17"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Misc \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 filteredReferenceIds.equals(other.filteredReferenceIds)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 filteredRooms.equals(other.filteredRooms)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 queueManager.equals(other.queueManager)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 appointmentBook.equals(other.appointmentBook);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 101,
      "wongsm7": 72,
      "-": 149,
      "woon17": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/QueueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.person.UniqueReferenceIdList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class QueueList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final UniqueReferenceIdList ids;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ids \u003d new UniqueReferenceIdList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public QueueList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public QueueList(QueueList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Resets the existing data of this {@code QueueList} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void resetData(QueueList newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        setIds(newData.getReferenceIdList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean hasId(ReferenceId id) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return ids.contains(id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a person to the queue"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The person must not already exist in the queue."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addPatient(ReferenceId id) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ids.add(id);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addPatient(int index, ReferenceId id) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ids.add(index, id);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setIds(List\u003cReferenceId\u003e ids) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.ids.setIds(ids);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removePatient(ReferenceId id) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ids.remove(id);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removePatient(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ids.remove(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReferenceId getFirst() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return ids.getFirst();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void poll() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ids.remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return ids.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return ids.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return ids.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof QueueList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 ids.equals(((QueueList) other).ids));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ObservableList\u003cReferenceId\u003e getReferenceIdList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return ids.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAppointmentBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Unmodifiable view of a roster schedule"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface ReadOnlyAppointmentBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns an unmodifiable view of the event list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RoomList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class RoomList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final UniqueRoomList listOfRooms;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        listOfRooms \u003d new UniqueRoomList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public RoomList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public RoomList(RoomList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Resets the existing data of this {@code RoomList} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void resetData(RoomList newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        setRooms(newData.getRoomList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a room."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoom(Room room) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        listOfRooms.add(room);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoom(Room room, int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        listOfRooms.add(room, index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Removes a room."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeRoom(Room target) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        listOfRooms.remove(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns the reference id of the current patient"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReferenceId getCurrentlyServed(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return listOfRooms.get(index).getCurrentPatient().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Removes the current patient"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeCurrentPatient(int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        listOfRooms.get(index).removeCurrentPatient();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Serves the next patient"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void serve(int index, ReferenceId id) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        listOfRooms.get(index).serve(id);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Replaces the data of {@code listOfRooms}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setRooms(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.listOfRooms.setPersons(listOfRooms);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return listOfRooms.contains(room);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The identity of {@code editedRoom} must not be the same as another existing room in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void set(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        listOfRooms.set(target, editedRoom);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return listOfRooms.asUnmodifiableObservableList().size() + \" rooms\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return listOfRooms.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return listOfRooms.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof RoomList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 listOfRooms.equals(((RoomList) other).listOfRooms));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueRoomList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * A list of rooms that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class UniqueRoomList implements Iterable\u003cRoom\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final ObservableList\u003cRoom\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean contains(Room toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a room to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void add(Room toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a room to the list based on the index given."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The room must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void add(Room toAdd, int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.add(index, toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public Room get(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setPerson(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!target.equals(editedRoom) \u0026\u0026 contains(editedRoom)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.set(index, editedRoom);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void remove(Room toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.remove(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setPersons(UniqueRoomList replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setPersons(List\u003cRoom\u003e persons) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!roomsAreUnique(persons)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Replaces the room {@code target} in the list with {@code editedRoom}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The identity of {@code editedRoom} must not be the same as another existing room in the list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void set(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireAllNonNull(target, editedRoom);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!internalList.remove(target)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.add(index, editedRoom);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ObservableList\u003cRoom\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public Iterator\u003cRoom\u003e iterator() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof UniqueRoomList // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRoomList) other).internalList));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private boolean roomsAreUnique(List\u003cRoom\u003e rooms) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        for (int i \u003d 0; i \u003c rooms.size() - 1; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rooms.size(); j++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                if (rooms.get(i).equals(rooms.get(j))) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 157,
      "SakuraBlossom": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Identical.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A weaker notion of equality between two instances."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface Identical\u003cT\u003e extends Comparable\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if {@code other} is similar to current instance."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This defines a weaker notion of equality between two instances."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    boolean isSameAs(T other);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/ReferenceId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Unmodifiable reference ID for a person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface ReferenceId extends Identical\u003cReferenceId\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Checks whether the person is a doctor working as part of the staff."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    boolean isStaffDoctor();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Checks whether the person is a patient."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    boolean isPatient();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/ReferenceIdResolver.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * API of the Reference Id Resolver component."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface ReferenceIdResolver {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Gets a person whose {@code ReferenceId} matches the given id."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Person resolve(ReferenceId id) throws EntryNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Checks whether a person whose {@code ReferenceId} matches the given id."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    boolean hasPerson(ReferenceId id);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a remark to an event or person."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/UniqueElementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A list of elements that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A element is considered unique by comparing using {@code Element#isSameAs(Element)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * elements uses Element#isSameElement(Element) for equality so as to ensure that the element being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * unique in terms of identity in the UniqueElementList. However, the removal of a element uses Element#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * so as to ensure that the element with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UniqueElementList\u003cT extends Identical\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableList(new UniqueTreeList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if the list contains an element who equals to the given argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean containsExact(T toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return internalList.stream().filter(toCheck::isSameAs).anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Adds a element to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The element must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Replaces the element {@code target} in the list with {@code editedElement}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The identity of {@code editedElement} must not be the same as another existing element in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set(T target, T editedElement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(target, editedElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (target.compareTo(editedElement) !\u003d 0 \u0026\u0026 contains(editedElement)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!internalList.remove(target)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        internalList.add(editedElement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The element must exist in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAll(UniqueElementList replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        internalList.addAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Replaces the contents of this list with {@code elements}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * {@code elements} must not contain duplicate elements."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAll(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(elements);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!elementsAreUnique(elements)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        internalList.addAll(elements);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                || (other instanceof UniqueElementList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueElementList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if {@code elements} contains only unique elements."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private boolean elementsAreUnique(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UniqueTreeList\u003cT\u003e treeList \u003d new UniqueTreeList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        for (T element : elements) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!treeList.add(element)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/UniqueTreeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.AbstractList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.ConcurrentModificationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@@author sakurablossom-reused"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "Reused from \u003ca href\u003d\"https://github.com/apache/commons-collections/blob/master/src/main/java/org/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "apache/commons/collections4/list/TreeList.java\"/\u003e with several modifications."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A {@code java.util.List} implementation that is optimised for fast insertions and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * removals of unique elements in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UniqueTreeList\u003cE extends Identical\u003e extends AbstractList\u003cE\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** The root node in the AVL tree */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private AvlNode\u003cE\u003e root;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** The current size of the list */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //-----------------------------------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a new empty list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public UniqueTreeList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Shallow-copies the specified treeList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setRoot(UniqueTreeList\u003cE\u003e uniqueTreeList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(uniqueTreeList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        root \u003d uniqueTreeList.root;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        size \u003d uniqueTreeList.size;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public E get(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        checkInterval(index, 0, size() - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return root.get(index).getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Iterator\u003cE\u003e iterator() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return listIterator(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ListIterator\u003cE\u003e listIterator() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return listIterator(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ListIterator\u003cE\u003e listIterator(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        checkInterval(index, 0, size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new TreeListIterator\u003c\u003e(this, index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int indexOf(Object o) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (root \u003d\u003d null || !(o instanceof Identical)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return root.indexOf((Identical) o, root.relativePosition);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean contains(Object o) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return indexOf(o) \u003e\u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Object[] toArray() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final Object[] array \u003d new Object[size()];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (root !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            root.toArray(array, root.relativePosition);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return array;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean add(final E obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        modCount++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (root \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            root \u003d new AvlNode\u003c\u003e(0, obj, null, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            AvlNode\u003cE\u003e rootNode \u003d root.insert(obj);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (rootNode \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            root \u003d rootNode;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        size++;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean addAll(final Collection\u003c? extends E\u003e c) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (c.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        for (E element : c) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!add(element)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public E set(int index, E element) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        checkInterval(index, 0, size() - 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final AvlNode\u003cE\u003e node \u003d root.get(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final E result \u003d node.value;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        node.setValue(element);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public E remove(final int index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        modCount++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        checkInterval(index, 0, size() - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        E result \u003d get(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        root \u003d root.remove(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        size--;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        modCount++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        root \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        size \u003d 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //-----------------------------------------------------------------------"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Checks whether the index is valid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param index  the index to check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param startIndex  the first allowed index"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param endIndex  the last allowed index"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is invalid"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private void checkInterval(final int index, final int startIndex, final int endIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (index \u003c startIndex || index \u003e endIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Invalid index:\" + index + \", size\u003d\" + size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //-----------------------------------------------------------------------"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Implements an AVLNode which keeps the offset updated."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This node contains the real work."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * TreeList is just there to implement {@link java.util.List}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The nodes don\u0027t know the index of the object they are holding.  They"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * do know however their position relative to their parent node."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This allows to calculate the index of a node while traversing the tree."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The Faedelung calculation stores a flag for both the left and right child"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * to indicate if they are a child (false) or a link as in linked list (true)."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    static class AvlNode\u003cE extends Identical\u003e {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** The left child node or the predecessor if {@link #leftIsPrevious}.*/"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e left;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** Flag indicating that left reference is not a subtree but the predecessor. */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private boolean leftIsPrevious;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** The right child node or the successor if {@link #rightIsNext}. */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e right;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** Flag indicating that right reference is not a subtree but the successor. */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private boolean rightIsNext;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** How many levels of left/right are below this one. */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int height;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** The relative position, root holds absolute position. */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int relativePosition;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** The stored element. */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private E value;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Constructs a new node with a relative position."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param relativePosition  the relative position of the node"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param obj  the value for the node"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param rightFollower the node with the value following this one"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param leftFollower the node with the value leading this one"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode(final int relativePosition, final E obj,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        final AvlNode\u003cE\u003e rightFollower, final AvlNode\u003cE\u003e leftFollower) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.relativePosition \u003d relativePosition;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            value \u003d obj;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            rightIsNext \u003d true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            leftIsPrevious \u003d true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            right \u003d rightFollower;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            left \u003d leftFollower;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the value."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @return the value of this node"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        E getValue() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Sets the value."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param obj  the value to store"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        void setValue(final E obj) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.value \u003d obj;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Locate the element with the given index relative to the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * offset of the parent of this node."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AvlNode\u003cE\u003e get(final int index) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int indexRelativeToMe \u003d index - relativePosition;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (indexRelativeToMe \u003d\u003d 0) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return this;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final AvlNode\u003cE\u003e nextNode \u003d indexRelativeToMe \u003c 0 ? getLeftSubTree() : getRightSubTree();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (nextNode \u003d\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return nextNode.get(indexRelativeToMe);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Locate the index that contains the specified object."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        int indexOf(Identical\u003cE\u003e element, final int index) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            int cmp \u003d value.compareTo(element);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (cmp \u003c 0) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (getLeftSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return left.indexOf(element, index + left.relativePosition);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else if (cmp \u003e 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (getRightSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return right.indexOf(element, index + right.relativePosition);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Stores the node and its children into the array specified."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param array the array to be filled"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param index the index of this node"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        void toArray(final Object[] array, final int index) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            array[index] \u003d value;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getLeftSubTree() !\u003d null) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                left.toArray(array, index + left.relativePosition);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getRightSubTree() !\u003d null) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                right.toArray(array, index + right.relativePosition);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the next node in the list after this one."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @return the next node"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AvlNode\u003cE\u003e next() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (rightIsNext || right \u003d\u003d null) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return right;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return right.min();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the node in the list before this one."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @return the previous node"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AvlNode\u003cE\u003e previous() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (leftIsPrevious || left \u003d\u003d null) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return left;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return left.max();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Inserts a node at the position index."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param obj is the object to be stored in the position."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AvlNode\u003cE\u003e insert(final E obj) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            int cmp \u003d value.compareTo(obj);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (cmp \u003c 0) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return insertOnLeft(obj);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else if (cmp \u003e 0) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return insertOnRight(obj);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Inserts a node into the left sub-tree."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param obj is the object to be stored."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e insertOnLeft(final E obj) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getLeftSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setLeft(new AvlNode\u003c\u003e(-1, obj, this, left), null);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setLeft(left.insert(obj), null);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (relativePosition \u003e\u003d 0) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                relativePosition++;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final AvlNode\u003cE\u003e ret \u003d balance();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Inserts a node into the right sub-tree."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param obj is the object to be stored."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e insertOnRight(final E obj) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getRightSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setRight(new AvlNode\u003c\u003e(+1, obj, right, this), null);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setRight(right.insert(obj), null);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (relativePosition \u003c 0) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                relativePosition--;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final AvlNode\u003cE\u003e ret \u003d balance();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //-----------------------------------------------------------------------"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the left node, returning null if its a faedelung."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e getLeftSubTree() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return leftIsPrevious ? null : left;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the right node, returning null if its a faedelung."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e getRightSubTree() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return rightIsNext ? null : right;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the rightmost child of this node."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e max() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return getRightSubTree() \u003d\u003d null ? this : right.max();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the leftmost child of this node."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e min() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return getLeftSubTree() \u003d\u003d null ? this : left.min();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Removes the node at a given position."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param index is the index of the element to be removed relative to the position of"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * the parent node of the current node."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AvlNode\u003cE\u003e remove(int index) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int indexRelativeToMe \u003d index - relativePosition;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (indexRelativeToMe \u003d\u003d 0) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return removeSelf();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (indexRelativeToMe \u003e 0) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setRight(right.remove(indexRelativeToMe), right.right);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (relativePosition \u003c 0) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    relativePosition++;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setLeft(left.remove(indexRelativeToMe), left.left);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (relativePosition \u003e 0) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    relativePosition--;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return balance();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Removes the rightmost child."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e removeMax() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getRightSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return removeSelf();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setRight(right.removeMax(), right.right);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (relativePosition \u003c 0) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                relativePosition++;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return balance();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Removes the rightmost child."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e removeMin() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getLeftSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return removeSelf();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setLeft(left.removeMin(), left.left);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (relativePosition \u003e 0) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                relativePosition--;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return balance();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Removes this node from the tree."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e removeSelf() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getRightSubTree() \u003d\u003d null \u0026\u0026 getLeftSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getRightSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (relativePosition \u003e 0) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    left.relativePosition +\u003d relativePosition;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                left.max().setRight(null, right);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return left;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (getLeftSubTree() \u003d\u003d null) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                right.relativePosition +\u003d relativePosition - (relativePosition \u003c 0 ? 0 : 1);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                right.min().setLeft(null, left);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return right;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (heightRightMinusLeft() \u003e 0) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                // more on the right, so delete from the right"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                final AvlNode\u003cE\u003e rightMin \u003d right.min();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                value \u003d rightMin.value;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (leftIsPrevious) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    left \u003d rightMin.left;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                right \u003d right.removeMin();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (relativePosition \u003c 0) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    relativePosition++;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                // more on the left or equal, so delete from the left"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                final AvlNode\u003cE\u003e leftMax \u003d left.max();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                value \u003d leftMax.value;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (rightIsNext) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    right \u003d leftMax.right;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                final AvlNode\u003cE\u003e leftPrevious \u003d left.left;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                left \u003d left.removeMax();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (left \u003d\u003d null) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    // special case where left that was deleted was a double link"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    // only occurs when height difference is equal"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    left \u003d leftPrevious;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    leftIsPrevious \u003d true;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (relativePosition \u003e 0) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    relativePosition--;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //-----------------------------------------------------------------------"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Balances according to the AVL algorithm."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e balance() {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            switch (heightRightMinusLeft()) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case 1 :"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case 0 :"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case -1 :"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return this;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case -2 :"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (left.heightRightMinusLeft() \u003e 0) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    setLeft(left.rotateLeft(), null);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return rotateRight();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case 2 :"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (right.heightRightMinusLeft() \u003c 0) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    setRight(right.rotateRight(), null);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return rotateLeft();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new IllegalStateException(\"tree inconsistent!\");"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Gets the relative position."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int getOffset(final AvlNode\u003cE\u003e node) {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (node \u003d\u003d null) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return node.relativePosition;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Sets the relative position."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int setOffset(final AvlNode\u003cE\u003e node, final int newOffest) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (node \u003d\u003d null) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int oldOffset \u003d getOffset(node);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            node.relativePosition \u003d newOffest;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return oldOffset;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Sets the height by calculation."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private void recalcHeight() {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            height \u003d Math.max("
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                getLeftSubTree() \u003d\u003d null ? -1 : getLeftSubTree().height,"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                getRightSubTree() \u003d\u003d null ? -1 : getRightSubTree().height) + 1;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Returns the height of the node or -1 if the node is null."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int getHeight(AvlNode\u003cE\u003e node) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return node \u003d\u003d null ? -1 : node.height;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Returns the height difference right - left"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int heightRightMinusLeft() {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return getHeight(getRightSubTree()) - getHeight(getLeftSubTree());"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Rotates the tree to the left."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e rotateLeft() {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final AvlNode\u003cE\u003e newTop \u003d right;"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final AvlNode\u003cE\u003e movedNode \u003d getRightSubTree().getLeftSubTree();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int newTopPosition \u003d relativePosition + getOffset(newTop);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int myNewPosition \u003d -newTop.relativePosition;"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int movedPosition \u003d getOffset(newTop) + getOffset(movedNode);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setRight(movedNode, newTop);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            newTop.setLeft(this, null);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setOffset(newTop, newTopPosition);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setOffset(this, myNewPosition);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setOffset(movedNode, movedPosition);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return newTop;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Rotates the tree to the right."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e rotateRight() {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final AvlNode\u003cE\u003e newTop \u003d left; // can\u0027t be faedelung"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final AvlNode\u003cE\u003e movedNode \u003d getLeftSubTree().getRightSubTree();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int newTopPosition \u003d relativePosition + getOffset(newTop);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int myNewPosition \u003d -newTop.relativePosition;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final int movedPosition \u003d getOffset(newTop) + getOffset(movedNode);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setLeft(movedNode, newTop);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            newTop.setRight(this, null);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setOffset(newTop, newTopPosition);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setOffset(this, myNewPosition);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            setOffset(movedNode, movedPosition);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return newTop;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Sets the left field to the node, or the previous node if that is null"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param node  the new left subtree node"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param previous  the previous node in the linked list"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private void setLeft(final AvlNode\u003cE\u003e node, final AvlNode\u003cE\u003e previous) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            leftIsPrevious \u003d (node \u003d\u003d null);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            left \u003d leftIsPrevious ? previous : node;"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Sets the right field to the node, or the next node if that is null"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param node  the new left subtree node"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param next  the next node in the linked list"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private void setRight(final AvlNode\u003cE\u003e node, final AvlNode\u003cE\u003e next) {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            rightIsNext \u003d (node \u003d\u003d null);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            right \u003d rightIsNext ? next : node;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            recalcHeight();"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Used for debugging."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new StringBuilder()"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\"AVLNode(\")"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(relativePosition)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\u0027,\u0027)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(left !\u003d null)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\u0027,\u0027)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(value)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\u0027,\u0027)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(getRightSubTree() !\u003d null)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\", faedelung \")"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(rightIsNext)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\" )\")"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * A list iterator over the linked list."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    static class TreeListIterator\u003cE extends Identical\u003e implements ListIterator\u003cE\u003e {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /** The parent list */"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private final UniqueTreeList\u003cE\u003e parent;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Cache of the next node that will be returned by {@link #next()}."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e next;"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * The index of the next node to be returned."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int nextIndex;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Cache of the last node that was returned by {@link #next()}"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * or {@link #previous()}."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private AvlNode\u003cE\u003e current;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * The index of the last node that was returned."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int currentIndex;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * The modification count that the list is expected to have. If the list"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * doesn\u0027t have this count, then a"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * {@link java.util.ConcurrentModificationException} may be thrown by"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * the operations."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private int expectedModCount;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Create a ListIterator for a list."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param parent  the parent list"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @param fromIndex  the index to start at"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        protected TreeListIterator(final UniqueTreeList\u003cE\u003e parent, final int fromIndex)"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.parent \u003d parent;"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.expectedModCount \u003d parent.modCount;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.next \u003d parent.root \u003d\u003d null ? null : parent.root.get(fromIndex);"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.nextIndex \u003d fromIndex;"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.currentIndex \u003d -1;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * Checks the modification count of the list is the value that this"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * object expects."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         *"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * @throws ConcurrentModificationException If the list\u0027s modification"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         * count isn\u0027t the value that was expected."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "         */"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        protected void checkModCount() {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (parent.modCount !\u003d expectedModCount) {"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new ConcurrentModificationException();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public boolean hasNext() {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return nextIndex \u003c parent.size();"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public E next() {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            checkModCount();"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!hasNext()) {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new NoSuchElementException(\"No element at index \" + nextIndex + \".\");"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (next \u003d\u003d null) {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                next \u003d parent.root.get(nextIndex);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final E value \u003d next.getValue();"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            current \u003d next;"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            currentIndex \u003d nextIndex++;"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            next \u003d next.next();"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public boolean hasPrevious() {"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return nextIndex \u003e 0;"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public E previous() {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            checkModCount();"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!hasPrevious()) {"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new NoSuchElementException(\"Already at start of list.\");"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (next \u003d\u003d null) {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                next \u003d parent.root.get(nextIndex - 1);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                next \u003d next.previous();"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            final E value \u003d next.getValue();"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            current \u003d next;"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            currentIndex \u003d --nextIndex;"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public int nextIndex() {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return nextIndex;"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public int previousIndex() {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return nextIndex() - 1;"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public void remove() {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            checkModCount();"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (currentIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new IllegalStateException();"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            parent.remove(currentIndex);"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (nextIndex !\u003d currentIndex) {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                // remove() following next()"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                nextIndex--;"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            // the AVL node referenced by next may have become stale after a remove"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            // reset it now: will be retrieved by next call to next()/previous() via nextIndex"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            next \u003d null;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            current \u003d null;"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            currentIndex \u003d -1;"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            expectedModCount++;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public void set(final E obj) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            checkModCount();"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (current \u003d\u003d null) {"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new IllegalStateException();"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            current.setValue(obj);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public void add(final E obj) {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            checkModCount();"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            parent.add(obj);"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            current \u003d null;"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            currentIndex \u003d -1;"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            nextIndex++;"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            expectedModCount++;"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 815,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/Appointment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": " * new Appoint with timing and status and personId"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": " * no need to relate to personName, instead of playing with personId"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class Appointment extends Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param personId"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param timing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Appointment(ReferenceId personId, Timing timing, Status status) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "        super(personId, timing, status);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/ContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code ReferenceId}, {@code Name} or {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class ContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ContainsKeywordsPredicate(Event appointment) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ReferenceId referenceId \u003d appointment.getPersonId();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "        keywords \u003d Arrays.asList((referenceId.toString().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ContainsKeywordsPredicate(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "        keywords \u003d Arrays.asList((referenceId.toString().split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getPersonId().toString(), keyword));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "                || (other instanceof ContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "woon17": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/DateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a Date Time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Guarantees: Date time is validate and immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String DATETIME_FORMAT \u003d \"dd/MM/yy HHmm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \"date time must be follow the format of \u0027\" + DATETIME_FORMAT + \"\u0027.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATETIME_FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Date time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DateTime(Date date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        time \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses a simple date format as described by {@code DATETIME_FORMAT}, else returns null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param dateString a simple date format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return a {@code DateTime} if valid, otherwise, returns null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static DateTime tryParseSimpleDateFormat(String dateString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(dateString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        DateTime parsedDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            if (dateString.length() !\u003d DATETIME_FORMAT.length()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "                throw new ParseException(\"invalid date format\", -1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            DATE_FORMATTER.setLenient(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Date parseDate \u003d DATE_FORMATTER.parse(dateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            parsedDateTime \u003d new DateTime(parseDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            parsedDateTime \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return parsedDateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another DateTime object which is one day later from current one."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given DateTime object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code DateTime} new object which is one day later from given one."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static DateTime plusOneDay(DateTime current) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "        LocalDateTime currenLocalDateTime \u003d LocalDateTime.ofInstant(current.getTime().toInstant(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "                ZoneId.systemDefault());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Date currentDate \u003d Date.from(currenLocalDateTime.plusDays(1).atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new DateTime(currentDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another DateTime object which is one week later from current one."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given DateTime object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code DateTime} new object which is one week later from given one."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static DateTime plusOneWeek(DateTime current) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": "        LocalDateTime currenLocalDateTime \u003d LocalDateTime.ofInstant(current.getTime().toInstant(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woon17"
        },
        "content": "                ZoneId.systemDefault());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Date currentDate \u003d Date.from(currenLocalDateTime.plusWeeks(1).atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new DateTime(currentDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another DateTime object which is one month later from current one."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given DateTime object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code DateTime} new object which is one month later from given one."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static DateTime plusOneMonth(DateTime current) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woon17"
        },
        "content": "        LocalDateTime currenLocalDateTime \u003d LocalDateTime.ofInstant(current.getTime().toInstant(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woon17"
        },
        "content": "                ZoneId.systemDefault());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Date currentDate \u003d Date.from(currenLocalDateTime.plusMonths(1).atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new DateTime(currentDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another DateTime object which is one year later from current one."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given DateTime object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code DateTime} new object which is one year later from given one."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static DateTime plusOneYear(DateTime current) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woon17"
        },
        "content": "        LocalDateTime currenLocalDateTime \u003d LocalDateTime.ofInstant(current.getTime().toInstant(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woon17"
        },
        "content": "                ZoneId.systemDefault());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Date currentDate \u003d Date.from(currenLocalDateTime.plusYears(1).atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new DateTime(currentDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean before(DateTime other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return compareTo(other) \u003c 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean beforeOrEqual(DateTime other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return compareTo(other) \u003c\u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int compareTo(DateTime d) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(d);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return getTime().compareTo(d.getTime());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!(other instanceof DateTime)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        DateTime otherTiming \u003d (DateTime) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return getTime().equals(otherTiming.getTime());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return DATE_FORMATTER.format(time);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 84,
      "CarbonGrid": 1,
      "woon17": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Identical;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents an event involving a single Person."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Guarantees: Reference Id to a patient, the event timing and status are present, validated and immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Event implements Identical\u003cEvent\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ReferenceId personId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Timing timing;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Event(ReferenceId personId, Timing timing, Status status) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(personId, timing, status);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!status.equals(new Status(Status.AppointmentStatuses.SETTLED)) \u0026\u0026 timing.hasMissedTiming()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "            this.status \u003d new Status(Status.AppointmentStatuses.MISSED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReferenceId getPersonId() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Timing getEventTiming() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean conflictsWith(Event otherEvent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return getEventTiming().conflictsWith(otherEvent.getEventTiming());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if both Event of the same patient and timing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isSameAs(Event otherEvent) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 otherEvent.getPersonId().equals(getPersonId())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 otherEvent.getEventTiming().equals(getEventTiming())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 otherEvent.getStatus().equals(status);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return otherEvent.getPersonId().equals(getPersonId())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 otherEvent.getEventTiming().equals(getEventTiming());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(o);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        int cmpTimingResult \u003d getEventTiming().compareTo(o.getEventTiming());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (cmpTimingResult !\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return cmpTimingResult;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return getPersonId().compareTo(o.getPersonId());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Objects.hash(personId, timing, status);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        builder.append(\"Event - Person ID: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(getPersonId())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\" Timing: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(getEventTiming())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\" status: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(getStatus());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 105,
      "woon17": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/Status.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Describes the status of an appointment"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class Status {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String APPROVED_MESS \u003d \"patient appointment was made\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String ACK_MESS \u003d \"patient has arrived\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String MISSED_MESS \u003d \"patient missed appointment, need to settle\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String SETTLE_MESS \u003d \"this missed appointment have been settled\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String CANCEL_MESS \u003d \"this appointment have been cancelled\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"A status can only be one of the following: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + Arrays.stream(AppointmentStatuses.values()).map(v -\u003e v.toString()).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * enum AppointmentStatuses to have the different status for appointments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public enum AppointmentStatuses {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "        APPROVED,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "        CANCELLED,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "        ACKNOWLEDGED,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "        MISSED,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "        SETTLED"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final AppointmentStatuses status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Status(String status) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.status \u003d AppointmentStatuses.valueOf(status.trim().toUpperCase());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Status(AppointmentStatuses status) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Status() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.status \u003d AppointmentStatuses.APPROVED;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * checks if the string status is the valid one."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param test which the string status."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return true if string status is the valid one."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "        String toMatch \u003d test.trim().toUpperCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "        for (AppointmentStatuses state : AppointmentStatuses.values()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (state.toString().equals(toMatch)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public String getStatusMess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case APPROVED:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return APPROVED_MESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case ACKNOWLEDGED:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return ACK_MESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case MISSED:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return MISSED_MESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "        case SETTLED:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return SETTLE_MESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return \"status is wrong\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public AppointmentStatuses getSta() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!(o instanceof Status)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Status otherStatus \u003d (Status) o;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return otherStatus.getSta().equals(this.getSta());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * checks if the current status is ACKNOWLEDGED."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return true if status is ACKNOWLEDGED."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean isAcked() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return status.equals(AppointmentStatuses.ACKNOWLEDGED);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean isMissed() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return status.equals(AppointmentStatuses.MISSED);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean isSettled() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return status.equals(AppointmentStatuses.SETTLED);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean isApproved() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return status.equals(AppointmentStatuses.APPROVED);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return this.status.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 11,
      "woon17": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/Timing.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a Date time in the schedule."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTimingFromCurrentTime(DateTime, DateTime)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Timing implements Comparable\u003cTiming\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"The event start timing must be before the end timing and after current dateTime.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final DateTime startTiming;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final DateTime endTiming;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a {@code Timing}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param startTiming A valid dateTime describing the start of event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param endTiming   A valid dateTime describing the end of event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Timing(DateTime startTiming, DateTime endTiming) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(startTiming, endTiming);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        checkArgument(isValidTiming(startTiming, endTiming), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.startTiming \u003d startTiming;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.endTiming \u003d endTiming;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if the start dateTime is before the end dateTime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static boolean isValidTiming(DateTime testStart, DateTime testEnd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(testStart, testEnd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return testStart.getTime().before(testEnd.getTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Returns true if the start dateTime is before the end dateTime."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static boolean isValidTimingFromCurrentTime(DateTime testStart, DateTime testEnd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Date current \u003d new Date();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return isValidTiming(testStart, testEnd) \u0026\u0026 testStart.getTime().after(current);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DateTime getStartTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return startTiming;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DateTime getEndTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return endTiming;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Returns true if the endtime is before current time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Boolean hasMissedTiming() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Date current \u003d new Date();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return getEndTime().getTime().before(current);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if the another timing is staggering within the start or end dateTime."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean conflictsWith(Timing other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other !\u003d this"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 getStartTime().before(other.getEndTime())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 other.getStartTime().before(getEndTime());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another Timing object which is one day later from current one."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given Timing object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code Timing} new object which is one day later from given one."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static Timing getOneDayLaterTiming(Timing current) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime start \u003d DateTime.plusOneDay(current.getStartTime());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime end \u003d DateTime.plusOneDay(current.getEndTime());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new Timing(start, end);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another Timing object which is one week later from current one."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given Timing object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code Timing} new object which is one month later from given one."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static Timing getOneWeekLaterTiming(Timing current) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime start \u003d DateTime.plusOneWeek(current.getStartTime());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime end \u003d DateTime.plusOneWeek(current.getEndTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new Timing(start, end);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another Timing object which is one month later from current one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given Timing object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code Timing} new object which is one month later from given one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static Timing getOneMonthLaterTiming(Timing current) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime start \u003d DateTime.plusOneMonth(current.getStartTime());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime end \u003d DateTime.plusOneMonth(current.getEndTime());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new Timing(start, end);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * gets another Timing object which is one year later from current one."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @param current a given Timing object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @return a {@code Timing} new object which is one year later from given one."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static Timing getOneYearLaterTiming(Timing current) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime start \u003d DateTime.plusOneYear(current.getStartTime());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "woon17"
        },
        "content": "        DateTime end \u003d DateTime.plusOneYear(current.getEndTime());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new Timing(start, end);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"%s - %s\", startTiming.toString(), endTiming.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int compareTo(Timing t) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "woon17"
        },
        "content": "        int cmpStartTimingResult \u003d t.getStartTime().compareTo(getStartTime());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (cmpStartTimingResult !\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return cmpStartTimingResult;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return t.getEndTime().compareTo(getEndTime());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!(other instanceof Timing)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Timing otherTiming \u003d (Timing) other;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return otherTiming.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 otherTiming.getEndTime().equals(getEndTime());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Objects.hash(startTiming, endTiming);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 85,
      "woon17": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/exceptions/DuplicateEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Signals that the operation will result in duplicate events (Events are considered duplicates if they involve the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * same person at the same timing)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/exceptions/EventNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class EventNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/events/exceptions/InvalidEventStatusException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.model.events.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Signals that the operation is unable to recognise the specified event status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class InvalidEventStatusException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "woon17": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateEntryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/EntryNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Identical;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a Person who can be either a patient or staff doctor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Person implements Identical\u003cPerson\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ReferenceId referenceId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Person(ReferenceId referenceId, Name name, Phone phone, Email email,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                  Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireAllNonNull(referenceId, name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.referenceId \u003d referenceId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReferenceId getReferenceId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return referenceId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if both persons of the same reference id and name."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isSameAs(ReferenceId id) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return getReferenceId().equals(id);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if both persons of the same reference id and name."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isSameAs(Person otherPerson) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return otherPerson \u003d\u003d this || (otherPerson !\u003d null \u0026\u0026 isSameAs(otherPerson.getReferenceId()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int compareTo(Person o) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(o);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return getReferenceId().compareTo(o.getReferenceId());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return otherPerson.getReferenceId().equals(getReferenceId())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        builder.append(getReferenceId())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 37,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.UniqueElementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * @see Person#isSameAs(Person)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UniquePersonList extends UniqueElementList\u003cPerson\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if the list contains an  person whose reference id is equivalent to the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean contains(ReferenceId toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return internalList.stream().anyMatch(p -\u003e p.isSameAs(toCheck));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns a person with the same identity as {@code ReferenceId} who exists in the address book, otherwise null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Person getPerson(ReferenceId id) throws EntryNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Optional\u003cPerson\u003e result \u003d internalList.stream().filter(p -\u003e p.isSameAs(id)).findFirst();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return result.get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 16,
      "CarbonGrid": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniqueReferenceIdList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * A list of reference ids that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class UniqueReferenceIdList implements Iterable\u003cReferenceId\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final ObservableList\u003cReferenceId\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private final ObservableList\u003cReferenceId\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean contains(ReferenceId toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void add(ReferenceId toAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Adds a person to the list at the specified index."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void add(int index, ReferenceId toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.add(index, toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReferenceId get(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setPerson(ReferenceId target, ReferenceId editedId) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireAllNonNull(target, editedId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!target.equals(editedId) \u0026\u0026 contains(editedId)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.set(index, editedId);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void remove(ReferenceId toRemove) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.remove(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setPersons(UniqueReferenceIdList replacement) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setIds(List\u003cReferenceId\u003e ids) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireAllNonNull(ids);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        if (!personsAreUnique(ids)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        internalList.setAll(ids);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ObservableList\u003cReferenceId\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public Iterator\u003cReferenceId\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof UniqueReferenceIdList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueReferenceIdList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private boolean personsAreUnique(List\u003cReferenceId\u003e ids) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        for (int i \u003d 0; i \u003c ids.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ids.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                if (ids.get(i).equals(ids.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReferenceId getFirst() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.get(0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 151,
      "SakuraBlossom": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/parameters/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/parameters/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/parameters/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/parameters/PatientReferenceId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a Reference ID for Patient."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Guarantees: Reference Id is present, validated and immutable."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class PatientReferenceId extends PersonReferenceId {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d StaffReferenceId.MESSAGE_CONSTRAINTS_NONSTAFF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a {@code PatientReferenceId}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param referenceId A valid identifier."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public PatientReferenceId(String referenceId) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(referenceId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if a given string is a valid reference id for patient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static boolean isValidPatientId(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return isValidId(test) \u0026\u0026 !test.toUpperCase().contains(\"STAFF\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isStaffDoctor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isPatient() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/parameters/PersonReferenceId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a Reference ID for Person."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Guarantees: Reference Id is present, validated and immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public abstract class PersonReferenceId implements ReferenceId {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \"Reference Id should only contain alphanumeric characters and it should be atleast 3 characters long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The reference ID should only contain alphanumeric characters."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9]{3,}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public final String referenceId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a {@code PersonReferenceId}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param referenceId A valid identifier."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public PersonReferenceId(String referenceId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(referenceId);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        checkArgument(isValidId(referenceId), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.referenceId \u003d referenceId.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if a given string is a valid id."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static boolean isValidId(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isSameAs(ReferenceId other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return equals(other);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int compareTo(ReferenceId o) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(o);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return o.toString().compareTo(toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            || (other instanceof PersonReferenceId // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 toString().equals(other.toString())); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return referenceId;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return referenceId.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/parameters/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/parameters/StaffReferenceId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a Reference ID for Patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Guarantees: Reference Id is present, validated and immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class StaffReferenceId extends PersonReferenceId {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \"Reference Id for staff doctors should start with \u0027STAFF\u0027 and followed by atleast 1 Alphanumeric characters.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_NONSTAFF \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \"Reference Id for patients should not contain \u0027STAFF\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * The reference ID should only contain alphanumeric characters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"STAFF[a-zA-Z0-9]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a {@code DoctorReferenceId}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param referenceId A valid identifier."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public StaffReferenceId(String referenceId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(referenceId);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if a given string is a valid reference id for staff."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static boolean isValidStaffId(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isStaffDoctor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isPatient() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/predicates/ContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code ReferenceId}, {@code Name} or {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    StringUtil.containsIgnoreCase(person.getName().fullName, keyword)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    || StringUtil.containsIgnoreCase(person.getReferenceId().toString(), keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    || StringUtil.containsIgnoreCase(person.getPhone().toString(), keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                || (other instanceof ContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 11,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/queue/QueueManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.model.queue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.QueueList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.RoomList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Manages the queue and rooms."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class QueueManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private QueueList queueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private RoomList roomList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public QueueManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.queueList \u003d new QueueList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.roomList \u003d new RoomList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public QueueManager(QueueManager toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Resets the existing data of this {@code QueueManager} with {@code newData}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void resetData(QueueManager newData) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.setIds(newData.getReferenceIdList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        roomList.setRooms(newData.getRoomList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Serve the next patient in queue when a patient leaves a room"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @param index of the room which a patient left"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void serveNext(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ReferenceId id \u003d queueList.getFirst();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.poll();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        roomList.serve(index, id);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * Enqueue back the patient which was allocated to a room"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     * @param index of the room which a patient was allocated"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void undoServeNext(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ReferenceId id \u003d roomList.getCurrentlyServed(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.addPatient(0, id);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        roomList.removeCurrentPatient(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addPatient(ReferenceId id) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.addPatient(id);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addPatient(int index, ReferenceId id) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.addPatient(index, id);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removePatient(ReferenceId id) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.removePatient(id);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removePatient(int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.removePatient(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void poll() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueList.removePatient(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoom(Room room) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        roomList.addRoom(room);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoomToIndex(Room room, int indexOfRoom) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        roomList.addRoom(room, indexOfRoom);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean hasId(ReferenceId id) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return queueList.hasId(id);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeRoom(Room target) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        roomList.removeRoom(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return roomList.hasRoom(room);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ReferenceId getCurrentlyServed(int index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return roomList.getCurrentlyServed(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void setRoom(Room target, Room editedRoom) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        requireNonNull(editedRoom);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        roomList.set(target, editedRoom);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ObservableList\u003cReferenceId\u003e getReferenceIdList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return queueList.getReferenceIdList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public ObservableList\u003cRoom\u003e getRoomList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return roomList.getRoomList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public int getSizeOfQueue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return queueList.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                || (other instanceof QueueManager // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 queueList.equals(((QueueManager) other).queueList)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 roomList.equals(((QueueManager) other).roomList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/queue/Room.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.model.queue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a consultation room involving a single doctor and an optional patient."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Guarantees: Reference Id to a doctor is immutable and validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final ReferenceId doctor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private Optional\u003cReferenceId\u003e patientCurrentlyBeingServed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private boolean isResting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public Room(ReferenceId doctor, Optional\u003cReferenceId\u003e patient, boolean isResting) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.patientCurrentlyBeingServed \u003d patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.isResting \u003d isResting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Room(ReferenceId doctor, Optional\u003cReferenceId\u003e patient) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.patientCurrentlyBeingServed \u003d patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.isResting \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public Room(ReferenceId doctor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.patientCurrentlyBeingServed \u003d Optional.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        this.isResting \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean isReadyToServe() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return !isResting;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReferenceId getDoctor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return doctor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cReferenceId\u003e getCurrentPatient() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return patientCurrentlyBeingServed;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeCurrentPatient() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        patientCurrentlyBeingServed \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if both rooms are occupied by the same staff."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This defines a weaker notion of equality between two consultation rooms."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isSameRoom(Room other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            || doctor.equals(((Room) other).doctor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void serve(ReferenceId id) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        patientCurrentlyBeingServed \u003d Optional.of(id);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns true if both rooms occupied by the same staff and patient."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * This defines a stronger notion of equality between two consultation rooms."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        if (!(other instanceof Room)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Room o \u003d (Room) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return getDoctor().equals(o.getDoctor())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                \u0026\u0026 getCurrentPatient().isPresent() \u003d\u003d o.getCurrentPatient().isPresent()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u0026\u0026 getCurrentPatient().equals(o.getCurrentPatient());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        builder.append(doctor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 53,
      "SakuraBlossom": 35,
      "CarbonGrid": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/userprefs/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/userprefs/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.userprefs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Path appointmentBookFilePath \u003d Paths.get(\"data\" , \"appointments.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return appointmentBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(appointmentBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.appointmentBookFilePath \u003d appointmentBookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \u0026\u0026 appointmentBookFilePath.equals(o.appointmentBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, appointmentBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sb.append(\"\\nLocal patient data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sb.append(\"\\nLocal appointment data file location : \" + appointmentBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 16,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static DateTime toDateTime(String dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return DateTime.tryParseSimpleDateFormat(dateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new Person(new PatientReferenceId(\"001A\"), new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new Person(new PatientReferenceId(\"002B\"), new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new Person(new PatientReferenceId(\"003C\"), new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new Person(new PatientReferenceId(\"004D\"), new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new Person(new PatientReferenceId(\"005E\"), new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new Person(new PatientReferenceId(\"006F\"), new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new Event(new PatientReferenceId(\"001A\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "                new Timing(toDateTime(\"20/01/20 1200\"), toDateTime(\"20/01/20 1230\")), new Status())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static ReadOnlyAppointmentBook getSampleAppointmentBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AppointmentBook sampleAp \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            sampleAp.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return sampleAp;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 42,
      "-": 49,
      "woon17": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AppointmentBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a storage for {@link AppointmentBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface AppointmentBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns AppointmentBook data as a {@link ReadOnlyAppointmentBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @see #getAppointmentBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Saves the given {@link ReadOnlyAppointmentBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param appointmentBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @see #saveAppointmentBook(ReadOnlyAppointmentBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void saveAppointmentBook(ReadOnlyAppointmentBook appointmentBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PersonReferenceId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Jackson-friendly version of {@link Event}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String patientId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"patientId\") String patientId, @JsonProperty(\"start\") String start,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                            @JsonProperty(\"end\") String end, @JsonProperty(\"status\") String status) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.patientId \u003d patientId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.startTime \u003d start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.endTime \u003d end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        patientId \u003d source.getPersonId().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        startTime \u003d source.getEventTiming().getStartTime().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        endTime \u003d source.getEventTiming().getEndTime().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (patientId \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    PatientReferenceId.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!PersonReferenceId.isValidId(patientId)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(PersonReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else if (!PatientReferenceId.isValidPatientId(patientId)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(PatientReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final PatientReferenceId patientReferenceId \u003d new PatientReferenceId(patientId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Date\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final DateTime startDateTime \u003d DateTime.tryParseSimpleDateFormat(startTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(\"The start \" + DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End Date\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final DateTime endDateTime \u003d DateTime.tryParseSimpleDateFormat(endTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(\"The end \" + DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!Timing.isValidTiming(startDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new IllegalValueException(Timing.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final Timing eventTiming \u003d new Timing(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Status\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woon17"
        },
        "content": "        final Status eventStatus \u003d new Status(status);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Event(patientReferenceId, eventTiming, eventStatus);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 95,
      "woon17": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PersonReferenceId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"id\") String id, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        id \u003d source.getReferenceId().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                PatientReferenceId.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!PersonReferenceId.isValidId(id)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(PersonReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else if (!PatientReferenceId.isValidPatientId(id)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new ParseException(PatientReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final PatientReferenceId modelReferenceId \u003d new PatientReferenceId(id);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Person(modelReferenceId, modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 26,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAppointmentBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A class to access AppointmentBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class JsonAppointmentBookStorage implements AppointmentBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppointmentBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public JsonAppointmentBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return readAppointmentBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Similar to {@link #readAppointmentBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Optional\u003cJsonSerializableAppointmentBook\u003e jsonAppointmentBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                filePath, JsonSerializableAppointmentBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!jsonAppointmentBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return Optional.of(jsonAppointmentBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        saveAppointmentBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Similar to {@link #saveAppointmentBook(ReadOnlyAppointmentBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAppointmentBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAppointmentBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An Immutable AppointmentBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@JsonRootName(value \u003d \"appointmentbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class JsonSerializableAppointmentBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a {@code JsonSerializableAppointmentBook} with the given events."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public JsonSerializableAppointmentBook(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Converts a given {@code ReadOnlyAppointmentBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAppointmentBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public JsonSerializableAppointmentBook(ReadOnlyAppointmentBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Converts this appointment book into the model\u0027s {@code AppointmentBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public AppointmentBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (appointmentBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            appointmentBook.addEvent(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return appointmentBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 2,
      "CarbonGrid": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public interface Storage extends AddressBookStorage, AppointmentBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Path getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void saveAppointmentBook(ReadOnlyAppointmentBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 13,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private AppointmentBookStorage appointmentBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                          AppointmentBookStorage appointmentBookStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.appointmentBookStorage \u003d appointmentBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return appointmentBookStorage.getAppointmentBookFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return readAppointmentBook(appointmentBookStorage.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Optional\u003cReadOnlyAppointmentBook\u003e readAppointmentBook(Path filePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return appointmentBookStorage.readAppointmentBook(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentsBook) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        saveAppointmentBook(appointmentsBook, appointmentBookStorage.getAppointmentBookFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void saveAppointmentBook(ReadOnlyAppointmentBook appointmentsBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        appointmentBookStorage.saveAppointmentBook(appointmentsBook, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 38,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "CarbonGrid": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoComplete.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * Manages AutoComplete of MainWindow."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public interface AutoComplete {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Updates AutoComplete with commandText."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    void updateCommandAutoComplete(String commandText);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Called whenever keyPressed on AutoComplete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    void updateSelectionKeyPressedCommandBox(KeyCode keycode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteOverlay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.control.MultipleSelectionModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * The Ui component for AutoComplete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class AutoCompleteOverlay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private static final int CELL_HEIGHT \u003d 20;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private static final int NUM_IN_VIEW \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private static final int MAX_HEIGHT \u003d CELL_HEIGHT * NUM_IN_VIEW;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private SelectionNotifier selectionNotifier;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private ListView\u003cTextFlow\u003e autoCompleteOverlay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public AutoCompleteOverlay(SelectionNotifier selectionNotifier) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        super(\"AutoCompleteOverlay.fxml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.selectionNotifier \u003d selectionNotifier;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.autoCompleteOverlay.setVisible(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.autoCompleteOverlay.setMaxHeight(MAX_HEIGHT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Updates the display of suggestions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void showSuggestions(String prefix, List\u003cString\u003e listOfSuggestions) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        autoCompleteOverlay.setVisible(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        if (prefix.isBlank() || listOfSuggestions.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            autoCompleteOverlay.getItems().setAll(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ObservableList\u003cTextFlow\u003e ols \u003d autoCompleteOverlay.getItems();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ArrayList\u003cTextFlow\u003e arrls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        listOfSuggestions.sort(String::compareTo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        for (String suggestion : listOfSuggestions) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            if (suggestion.isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            Text prefixText \u003d new Text(prefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            prefixText.setFill(Paint.valueOf(\"#0FF\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            Text suggestionText \u003d new Text(suggestion);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            suggestionText.setFill(Paint.valueOf(\"#FFF\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            arrls.add(new TextFlow(prefixText, suggestionText));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ols.setAll(arrls);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        autoCompleteOverlay.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        autoCompleteOverlay.setPrefHeight(1 + listOfSuggestions.size() * CELL_HEIGHT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        if (!arrls.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            autoCompleteOverlay.setVisible(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Traverses the AutoCompleteOverlay."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @param traverseUp true if UP, false if DOWN"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void traverseSelection(boolean traverseUp) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        int size \u003d autoCompleteOverlay.getItems().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        MultipleSelectionModel msm \u003d autoCompleteOverlay.getSelectionModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        int targetIndex \u003d (size + msm.getSelectedIndex() + (traverseUp ? -1 : 1)) % size;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        if (targetIndex \u003e msm.getSelectedIndex()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            autoCompleteOverlay.scrollTo(Math.max(0, targetIndex + 1 - NUM_IN_VIEW));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            autoCompleteOverlay.scrollTo(Math.min(size - 1, targetIndex));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        msm.select(targetIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void simulateMouseClick() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        handleMouseClicked();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public boolean isSuggesting() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        return autoCompleteOverlay.isVisible();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Handles the Mouse Clicked Event."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private void handleMouseClicked() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        autoCompleteOverlay.getSelectionModel()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                .getSelectedItem()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                .getChildren()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                .forEach(elem -\u003e sb.append(((Text) elem).getText()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        selectionNotifier.notify(sb.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Represents a function that notifies selection."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public interface SelectionNotifier {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "         * Notify changes."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        void notify(String commandText);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private final AutoComplete autoComplete;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, AutoComplete autoComplete) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.autoComplete \u003d autoComplete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        // EventFilter was used as FXML callback onKeyPressed cannot consume keyEvent."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            public void handle(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case UP:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case DOWN:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    keyEvent.consume();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                autoComplete.updateSelectionKeyPressedCommandBox(keyEvent.getCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Handles Command Entered."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public String handleCommandEntered() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        String commandText \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            commandExecutor.execute(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            //setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        return commandText;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Handles the Text Change event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private void handleTextChanged() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        autoComplete.updateCommandAutoComplete(commandTextField.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void setCommandTextField(String suggestion) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        if (suggestion \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        commandTextField.setText(suggestion);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getLength());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        handleTextChanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String, Consumer)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "CarbonGrid": 46,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": " * An UI component that displays information of a {@code Event}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Label refId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Label timing;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "        refId.setText(String.format(\"[%s] \", event.getPersonId().toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "        timing.setText(event.getEventTiming().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "        status.setText(\"Status: \" + event.getStatus().getStatusMess());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woon17"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woon17"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woon17"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woon17"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woon17"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private ListView\u003cEvent\u003e eventListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Event} using a {@code EventCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    class EventListViewCell extends ListCell\u003cEvent\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "        protected void updateItem(Event event, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "            super.updateItem(event, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            this.setFocusTraversable(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "            if (empty || event \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": "                setGraphic(new EventCard(event, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "woon17": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://clerkpro.netlify.com/userguide\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        root.sizeToScene();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *                               Thread."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 6,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.commons.core.OmniPanelTab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.ui.autocomplete.AutoCompleter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.ui.commandboxhistory.CommandBoxHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.ui.queue.QueueListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e implements AutoComplete, OmniPanel {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private AutoCompleter autoCompleter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private CommandBoxHistory commandBoxHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private OmniPanelTab currentOmniPanelTab;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private HashSet\u003cRunnable\u003e deferredDropSelectors;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private AutoCompleteOverlay aco;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private QueueListPanel queueListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private TabBar tabBar;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private AnchorPane anchorPane;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private StackPane omniPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private StackPane queueListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private StackPane tabBarPlaceholder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private SplitPane upperPane;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.autoCompleter \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.commandBoxHistory \u003d new CommandBoxHistory();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.deferredDropSelectors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        getRoot().addEventFilter(MouseEvent.MOUSE_PRESSED, new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                deferredDropSelectors.forEach(e -\u003e e.run());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        upperPane.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                switch (event.getCode()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case TAB:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    commandBox.getRoot().requestFocus();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), deferredDropSelectors);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "woon17"
        },
        "content": "        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        tabBar \u003d new TabBar(this);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        tabBarPlaceholder.getChildren().add(tabBar.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        queueListPanel \u003d new QueueListPanel(logic.getConsultationRoomList(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            logic.getQueueList(), logic.getReferenceIdResolver());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        queueListPanelPlaceholder.getChildren().add(queueListPanel.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, this);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        commandBoxPlaceholder.getChildren().addAll(commandBox.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        aco \u003d new AutoCompleteOverlay(this::autoCompleterSelected);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        anchorPane.getChildren().add(aco.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        anchorPane.setBottomAnchor(aco.getRoot(), 0.0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public EventListPanel getEventListPanel() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return eventListPanel;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String, Consumer)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, this::setOmniPanelTab);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Called whenever AutoComplete selected command."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void updateCommandAutoComplete(String commandText) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        aco.showSuggestions(commandText, autoCompleter.update(commandText).getSuggestions());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Receives Key Press event from Command Box and executes expected behaviours."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void updateSelectionKeyPressedCommandBox(KeyCode keyCode) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        switch (keyCode) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            if (aco.isSuggesting()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                aco.traverseSelection(true);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            commandBox.setCommandTextField(commandBoxHistory.getOlder());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            if (aco.isSuggesting()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                aco.traverseSelection(false);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            commandBox.setCommandTextField(commandBoxHistory.getNewer());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        case ENTER:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            if (aco.isSuggesting()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                aco.simulateMouseClick();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            commandBoxHistory.add(commandBox.handleCommandEntered());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Called whenever AutoComplete has a selection."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private void autoCompleterSelected(String selectedText) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        commandBox.setCommandTextField(selectedText);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Sets OmniPanelTab."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void setOmniPanelTab(OmniPanelTab omniPanelTab) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        currentOmniPanelTab \u003d omniPanelTab;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        switch (omniPanelTab) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        case PATIENTS_TAB:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            omniPanelPlaceholder.getChildren().setAll(personListPanel.getRoot());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        case APPOINTMENTS_TAB:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            omniPanelPlaceholder.getChildren().setAll(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        case DOCTORS_TAB:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void regainOmniPanelSelector() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        switch (currentOmniPanelTab) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        case PATIENTS_TAB:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            personListPanel.regainSelector();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 1,
      "SakuraBlossom": 8,
      "CarbonGrid": 137,
      "-": 188,
      "woon17": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OmniPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.commons.core.OmniPanelTab;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * Manages OmniPanel of MainWindow."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public interface OmniPanel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    void setOmniPanelTab(OmniPanelTab omniPanelTab);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    void regainOmniPanelSelector();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label refId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        refId.setText(String.format(\"[%s] \", person.getReferenceId().toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.control.MultipleSelectionModel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private int lastSelectedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList, HashSet\u003cRunnable\u003e deferredUntilMouseClickOuter) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.dropSelector();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        lastSelectedIndex \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        personListView.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                int size \u003d personList.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                MultipleSelectionModel\u003cPerson\u003e msm \u003d personListView.getSelectionModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                int selectedIndex \u003d msm.getSelectedIndex();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                switch (event.getCode()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case DOWN:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    if (selectedIndex \u003c size - 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    if (selectedIndex \u003d\u003d size - 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        event.consume();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        personListView.scrollTo(size - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        msm.select(size - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    personListView.scrollTo(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    msm.select(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case UP:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    if (selectedIndex \u003e 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    event.consume();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    personListView.scrollTo(size - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    msm.select(size - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case TAB:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case LEFT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    dropSelector();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Runnable dropSelectorDeferred \u003d this::dropSelector;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        personListView.setOnMouseExited(e -\u003e deferredUntilMouseClickOuter.add(dropSelectorDeferred));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        personListView.setOnMouseEntered(e -\u003e deferredUntilMouseClickOuter.remove(dropSelectorDeferred));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        personListView.setOnMouseClicked(e -\u003e this.getRoot().requestFocus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Saves the current selected index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Then unselect the cell."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void dropSelector() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        lastSelectedIndex \u003d personListView.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        personListView.getSelectionModel().select(-1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Restores the selection on the listview with the lastSelectedIndex."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void regainSelector() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        personListView.getSelectionModel().select(lastSelectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            this.setFocusTraversable(true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 66,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import javafx.scene.layout.TilePane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.commons.core.OmniPanelTab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * The Ui component for AutoComplete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class TabBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private int selectedIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private TilePane tabBar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public TabBar(OmniPanel omniPanel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        super(\"TabBar.fxml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ObservableList\u003cNode\u003e ols \u003d tabBar.getChildren();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        selectedIndex \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Node selectedNode \u003d ols.get(selectedIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ols.forEach(iv -\u003e iv.getStyleClass().setAll(\"unselected-tab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        selectedNode.getStyleClass().setAll(\"selected-tab\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        omniPanel.setOmniPanelTab(OmniPanelTab.valueOfId(selectedNode.getId()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        tabBar.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            public void handle(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                int size \u003d ols.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                ols.forEach(iv -\u003e iv.getStyleClass().setAll(\"unselected-tab\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case UP:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    selectedIndex \u003d (size + selectedIndex + -1) % size;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    keyEvent.consume();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case DOWN:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    selectedIndex \u003d (size + selectedIndex + 1) % size;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                case RIGHT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    omniPanel.regainOmniPanelSelector();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                Node selectedNode \u003d ols.get(selectedIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                selectedNode.getStyleClass().setAll(\"selected-tab\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                omniPanel.setOmniPanelTab(OmniPanelTab.valueOfId(selectedNode.getId()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ols.forEach(iv -\u003e iv.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                tabBar.requestFocus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                Node clickedNode \u003d (Node) event.getTarget();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                for (int i \u003d 0; i \u003c ols.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    Node selectedNode \u003d ols.get(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    if (selectedNode !\u003d clickedNode) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        selectedNode.getStyleClass().setAll(\"unselected-tab\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    selectedIndex \u003d i;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    selectedNode.getStyleClass().setAll(\"selected-tab\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    omniPanel.setOmniPanelTab(OmniPanelTab.valueOfId(selectedNode.getId()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 6,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/autocomplete/AutoCompleter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * Component for AutoComplete"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class AutoCompleter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private static final String[] SUPPORTED_COMMANDS \u003d {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"ackappt\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"addappt\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"add\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            \"addRoom\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"appointments\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            \"break\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"cancel\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"changeappt\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"dequeue\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"doctors\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"exit\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"help\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            \"next\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"missappt\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            \"enqueue\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"offduty\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"onduty\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"patient\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"queue\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"register\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            \"removeRoom\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            \"resume\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"settleappt\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \"update\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"undo\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"changeappt\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \"cancelappt\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private Trie trie \u003d new Trie(SUPPORTED_COMMANDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private String currentQuery;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Updates AutoComplete with current query."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @param currentQuery"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @return AutoComplete itself"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public AutoCompleter update(String currentQuery) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        this.currentQuery \u003d currentQuery;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public List\u003cString\u003e getSuggestions() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return trie.find(currentQuery).getPossibilities();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 6,
      "CarbonGrid": 47,
      "woon17": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/autocomplete/Trie.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * Trie for AutoComplete Searches."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class Trie {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private TrieNode root \u003d new TrieNode();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public Trie(String[] commandsToSupport) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        for (String command : commandsToSupport) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            this.insert(command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Inserts word into Trie."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @param word"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private void insert(String word) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        TrieNode current \u003d root;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            current \u003d current.getChildren().computeIfAbsent(word.charAt(i), c -\u003e new TrieNode());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Finds and returns the TrieNode of given prefix, returns null if does not exists."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @param word"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @return TrieNode"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public TrieNode find(String word) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        TrieNode current \u003d root;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        for (int i \u003d 0; i \u003c word.length(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            char ch \u003d word.charAt(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            TrieNode node \u003d current.getChildren().get(ch);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            if (node \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            current \u003d node;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        return current;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/autocomplete/TrieNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * TrieNode of Trie."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class TrieNode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private HashMap\u003cCharacter, TrieNode\u003e children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public HashMap\u003cCharacter, TrieNode\u003e getChildren() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        return children;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Get all possible word fragments from current TrieNode."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @return List of word fragments"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public List\u003cString\u003e getPossibilities() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        if (children.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return new ArrayList\u003cString\u003e(Collections.singleton(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ArrayList\u003cString\u003e ls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        children.forEach((k, v) -\u003e v.getPossibilities().forEach(str -\u003e ls.add(k + str)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        return ls;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/commandboxhistory/CommandBoxHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui.commandboxhistory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * Component for CommandBox\u0027s History"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class CommandBoxHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private LinkedList\u003cString\u003e history \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private ListIterator\u003cString\u003e caret \u003d history.listIterator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public String getOlder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            String commandText \u003d caret.next();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            if (!caret.hasNext()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                caret.previous();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return commandText;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public String getNewer() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return caret.previous();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * Adds String into CommandBoxHistory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     * @param commandText Command in String to be added into CommandBoxHistory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void add(String commandText) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        if (!commandText.isBlank()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            history.addFirst(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        caret \u003d history.listIterator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/queue/QueueCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.ui.queue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An UI component that displays information of a {@code Person} in Queue."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class QueueCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String FXML \u003d \"queue/QueueListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label refId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public QueueCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        refId.setText(person.getReferenceId().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!(other instanceof QueueCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        QueueCard card \u003d (QueueCard) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/queue/QueueListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.ui.queue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceIdResolver;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class QueueListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String FXML \u003d \"queue/QueueListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QueueListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label nowServing;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label inQueue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ListView\u003cRoom\u003e roomListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ListView\u003cReferenceId\u003e queueListView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public QueueListPanel(ObservableList\u003cRoom\u003e consultationRoomList, ObservableList\u003cReferenceId\u003e queueList,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                          ReferenceIdResolver resolver) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        roomListView.setItems(consultationRoomList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        roomListView.setCellFactory(listView -\u003e new RoomListViewCell(resolver));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        queueListView.setItems(queueList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        queueListView.setCellFactory(listView -\u003e new QueueListViewCell(resolver));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    class QueueListViewCell extends ListCell\u003cReferenceId\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private final ReferenceIdResolver resolver;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public QueueListViewCell(ReferenceIdResolver resolver) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.resolver \u003d resolver;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        protected void updateItem(ReferenceId id, boolean empty) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            super.updateItem(id, empty);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (empty || id \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Person person \u003d resolver.resolve(id);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setGraphic(new QueueCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Room} using a {@code RoomCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    class RoomListViewCell extends ListCell\u003cRoom\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private final ReferenceIdResolver resolver;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public RoomListViewCell(ReferenceIdResolver resolver) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.resolver \u003d resolver;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        protected void updateItem(Room room, boolean empty) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            super.updateItem(room, empty);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (empty || room \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Person doctor \u003d resolver.resolve(room.getDoctor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Optional\u003cPerson\u003e patient \u003d room.getCurrentPatient().map(id -\u003e resolver.resolve(id));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                setGraphic(new RoomCard(doctor, patient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/queue/RoomCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.ui.queue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An UI component that displays information of a {@code Person} in consultation with a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class RoomCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String FXML \u003d \"queue/RoomListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Person doctor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Optional\u003cPerson\u003e patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label doctorName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label patientName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Label refId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public RoomCard(Person doctor, Optional\u003cPerson\u003e patient, int displayedIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        doctorName.setText(doctor.getName().fullName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        patientName.setText(patient.map(p -\u003e p.getName().toString()).orElse(\"[INVALID]\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!(other instanceof RoomCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RoomCard card \u003d (RoomCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return doctor.equals(card.doctor) \u0026\u0026 patient.equals(card.patient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 54
    }
  },
  {
    "path": "src/main/resources/view/AutoCompleteOverlay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cListView fx:id\u003d\"autoCompleteOverlay\" fixedCellSize\u003d\"20.0\" focusTraversable\u003d\"false\" maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "          maxWidth\u003d\"Infinity\" onMouseClicked\u003d\"#handleMouseClicked\" prefHeight\u003d\"0.0\" prefWidth\u003d\"200.0\" translateX\u003d\"25.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cTextField fx:id\u003d\"commandTextField\" onKeyTyped\u003d\"#handleTextChanged\" promptText\u003d\"Enter command here...\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ".unselected-tab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-opacity: 0.2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ".selected-tab {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ".tab-bar:focused {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-border-radius: 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-border-color: -fx-focus-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-focus-traversable: false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ".list-cell:filled:focused {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-background-color: #309090;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ".list-cell:filled:focused #cardPane {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ".cell_big_label_white_font {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    .cell_big_label;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    -fx-text-fill: #F5F5F5;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-font-family: \u0027monospaced\u0027;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "#autoCompleteOverlay {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-font: 13pt \u0027monospaced\u0027;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    -fx-font-family: \u0027monospaced\u0027;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 5,
      "CarbonGrid": 25,
      "-": 341
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u003cLabel fx:id\u003d\"refId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "                \u003cLabel fx:id\u003d\"timing\" text\u003d\"\\$second\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" text\u003d\"\\$third\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c!--                        \u003cFlowPane fx:id\u003d\"status\"/\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003c!--            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\status\" /\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003c!--            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e--\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "            \u003c!--            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "woon17": 39
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cListView fx:id\u003d\"eventListView\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "woon17": 4
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cfx:root title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"500\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ClerkPro\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" focusTraversable\u003d\"false\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"anchorPane\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        \u003cSplitPane fx:id\u003d\"upperPane\" dividerPositions\u003d\"0.0, 0.0\" focusTraversable\u003d\"false\" AnchorPane.bottomAnchor\u003d\"100.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"tabBarPlaceholder\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"250.0\" prefWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                             \u003cStackPane fx:id\u003d\"omniPanelPlaceholder\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"250.0\" prefWidth\u003d\"500.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                             \u003cStackPane fx:id\u003d\"queueListPanelPlaceholder\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"250.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" layoutY\u003d\"100.0\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"10.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefHeight\u003d\"10.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "CarbonGrid": 19,
      "-": 44
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003cLabel fx:id\u003d\"refId\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$second\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 9,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cListView fx:id\u003d\"personListView\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" focusTraversable\u003d\"false\" styleClass\u003d\"result-display\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 3,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TabBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c?import javafx.scene.layout.TilePane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003cTilePane fx:id\u003d\"tabBar\" alignment\u003d\"CENTER\" focusTraversable\u003d\"true\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "          minWidth\u003d\"-Infinity\" orientation\u003d\"VERTICAL\" prefColumns\u003d\"1\" prefHeight\u003d\"250.0\" prefRows\u003d\"1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "          prefTileHeight\u003d\"50.0\" prefTileWidth\u003d\"50.0\" prefWidth\u003d\"70.0\" styleClass\u003d\"tab-bar\" vgap\u003d\"40.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/11.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003cImageView fx:id\u003d\"patientsTab\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003cImage url\u003d\"@../images/patient.png\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003cImageView fx:id\u003d\"appointmentsTab\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003cImage url\u003d\"@../images/appointment.png\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003cImageView fx:id\u003d\"doctorsTab\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \u003cimage\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                \u003cImage url\u003d\"@../images/doctor.png\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            \u003c/image\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "\u003c/TilePane\u003e"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 28
    }
  },
  {
    "path": "src/main/resources/view/queue/QueueListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cLabel fx:id\u003d\"refId\" text\u003d\"\\$refId\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 33
    }
  },
  {
    "path": "src/main/resources/view/queue/QueueListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003cLabel fx:id\u003d\"nowServing\" text\u003d\"Now Serving\" styleClass\u003d\"cell_big_label_white_font\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003cListView fx:id\u003d\"roomListView\" VBox.vgrow\u003d\"SOMETIMES\" minHeight\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003cLabel fx:id\u003d\"inQueue\" text\u003d\"In Queue\" styleClass\u003d\"cell_big_label_white_font\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003cListView fx:id\u003d\"queueListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 22
    }
  },
  {
    "path": "src/main/resources/view/queue/RoomListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        \u003cLabel fx:id\u003d\"doctorName\" text\u003d\"\\$doctorName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cLabel fx:id\u003d\"patientName\" text\u003d\"\\$doctorName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      \u003cLabel fx:id\u003d\"refId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$refId\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/MainAppTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import org.testfx.assertions.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import org.testfx.framework.junit5.Init;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class MainAppTest extends ApplicationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @Init"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        ApplicationTest.launch(MainApp.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void traverseTabBarTest(FxRobot robot) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var patientsTabStyleClass \u003d robot.lookup(\"#patientsTab\").query().getStyleClass();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var appointmentsTabStyleClass \u003d robot.lookup(\"#appointmentsTab\").query().getStyleClass();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var doctorsTabStyleClass \u003d robot.lookup(\"#doctorsTab\").query().getStyleClass();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var commandBox \u003d robot.lookup(\"#commandTextField\").queryTextInputControl();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var tabBar \u003d robot.lookup(\"#tabBar\").query();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.clickOn(\"#doctorsTab\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(patientsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(appointmentsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(doctorsTabStyleClass).containsOnly(\"selected-tab\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.UP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(patientsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(appointmentsTabStyleClass).containsOnly(\"selected-tab\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(doctorsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.UP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(patientsTabStyleClass).containsOnly(\"selected-tab\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(appointmentsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(doctorsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.type(KeyCode.UP);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(patientsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(appointmentsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(doctorsTabStyleClass).containsOnly(\"selected-tab\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.DOWN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(patientsTabStyleClass).containsOnly(\"selected-tab\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(appointmentsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(doctorsTabStyleClass).containsOnly(\"unselected-tab\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.TAB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(tabBar).isNotFocused();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox).isFocused();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.TAB);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(tabBar).isFocused();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox).isNotFocused();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void autoCompleterTest(FxRobot robot) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var aco \u003d robot.lookup(\"#autoCompleteOverlay\").queryListView();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.clickOn(\"#commandTextField\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.write(\u0027a\u0027).type(KeyCode.UP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(aco).isVisible();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(aco.getSelectionModel().getSelectedIndex()).isEqualTo(3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.type(KeyCode.DOWN);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(aco.getSelectionModel().getSelectedIndex()).isEqualTo(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.eraseText(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void traverseAndUnknownCommandTest(FxRobot robot) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var commandBox \u003d robot.lookup(\"#commandTextField\").queryTextInputControl();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var resultDisplay \u003d robot.lookup(\"#resultDisplay\").queryTextInputControl();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.clickOn(commandBox).write(\"lol\").type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(resultDisplay).hasText(\"Unknown command\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.type(KeyCode.UP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox.getCaretPosition()).isEqualTo(3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.type(KeyCode.LEFT, KeyCode.BACK_SPACE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox.getCaretPosition()).isEqualTo(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.type(KeyCode.RIGHT).eraseText(2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void enqueueAndDequeueTest(FxRobot robot) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.clickOn(\"#commandTextField\").write(\"enqueue 001A\").type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Assertions.assertThat(lookup(\"#queueListView\").queryListView()).hasExactlyNumItems(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woon17"
        },
        "content": "        robot.write(\"dequeue 1\").type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woon17"
        },
        "content": "        Assertions.assertThat(lookup(\"#queueListView\").queryListView()).hasExactlyNumItems(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void invalidCommandFormatTest(FxRobot robot) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var commandBox \u003d robot.lookup(\"#commandTextField\").queryTextInputControl();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var resultDisplay \u003d robot.lookup(\"#resultDisplay\").queryTextInputControl();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.clickOn(commandBox).write(\"addappt\").type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(resultDisplay.getText()).startsWith(\"Invalid command format!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.eraseText(7);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void helpCommandTest(FxRobot robot) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var commandBox \u003d robot.lookup(\"#commandTextField\").queryTextInputControl();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var resultDisplay \u003d robot.lookup(\"#resultDisplay\").queryTextInputControl();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.clickOn(commandBox).write(\"help\").type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(resultDisplay.getText()).startsWith(\"Opened help window.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(robot.window(\"Help\")).isShowing();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(robot.listWindows().size()).isEqualTo(2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void commandBoxHistoryTest(FxRobot robot) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        var commandBox \u003d robot.lookup(\"#commandTextField\").queryTextInputControl();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        String[] testStrings \u003d {\"blabla\", \"   jUmPs. \"};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.clickOn(commandBox).write(testStrings[0]).type(KeyCode.ENTER).type(KeyCode.UP);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox.getText()).isEqualTo(testStrings[0]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.eraseText(testStrings[0].length()).write(testStrings[1]).type(KeyCode.ENTER).type(KeyCode.UP);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox.getText()).isEqualTo(testStrings[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.UP, 2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox.getText()).isEqualTo(testStrings[0]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.DOWN);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox.getText()).isEqualTo(testStrings[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        robot.type(KeyCode.DOWN, 3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        Assertions.assertThat(commandBox.getText()).isBlank();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 88,
      "woon17": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Path preferencePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        config.setUserPrefsFilePath(preferencePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(config.getLogLevel(), Level.INFO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(config.getUserPrefsFilePath(), preferencePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(config.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                       ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                       : null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 8,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                              .deserializeObjectFromJsonFile(SERIALIZATION_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                                      SerializableTestClass.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.storage.JsonAppointmentBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAppointmentBookStorage appointmentBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new JsonAppointmentBookStorage(temporaryFolder.resolve(\"appointmentBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAppointmentBookIoExceptionThrowingStub appointmentBookStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new JsonAppointmentBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    temporaryFolder.resolve(\"ioExceptionAppointmentBook.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String addCommand \u003d RegisterPatientCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + ID_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand, stub -\u003e {});"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new QueueManager(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                            new AppointmentBook());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, stub -\u003e {}));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static class JsonAppointmentBookIoExceptionThrowingStub extends JsonAppointmentBookStorage {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        private JsonAppointmentBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        public void saveAppointmentBook(ReadOnlyAppointmentBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 30,
      "wongsm7": 5,
      "CarbonGrid": 7,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.predicates.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String VALID_ID_AMY \u003d \"10Y\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String VALID_ID_BOB \u003d \"10Z\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String ID_DESC_AMY \u003d \" \" + PREFIX_ID + VALID_ID_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String ID_DESC_BOB \u003d \" \" + PREFIX_ID + VALID_ID_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String INVALID_ID_DESC \u003d \" \" + PREFIX_ID + \"J\u00261\"; // \u0027\u0026\u0027 not allowed in id"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                           .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                           .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                           .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                           .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail. \" + ce.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model.updateFilteredPersonList(new ContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 15,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DequeueCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class DequeueCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(), new QueueManager(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            getTypicalAppointmentBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model.addPerson(ALICE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model.addPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.enqueuePatient(ALICE.getReferenceId());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        model.enqueuePatient(BENSON.getReferenceId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ReferenceId personToDelete \u003d model.getQueueList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        DequeueCommand dequeueCommand \u003d new DequeueCommand(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(DequeueCommand.MESSAGE_DEQUEUE_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(), new QueueManager(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            getTypicalAppointmentBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel.addPerson(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel.addPerson(BENSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel.enqueuePatient(BENSON.getReferenceId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(dequeueCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_invalidUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        DequeueCommand dequeueCommand \u003d new DequeueCommand(ALICE.getReferenceId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(dequeueCommand, model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            String.format(DequeueCommand.MESSAGE_PERSON_NOT_IN_QUEUE, ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        DequeueCommand dequeueFirstCommand \u003d new DequeueCommand(ALICE.getReferenceId());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertTrue(dequeueFirstCommand.equals(dequeueFirstCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(dequeueFirstCommand.equals(new DequeueCommand(ALICE.getReferenceId())));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(dequeueFirstCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(dequeueFirstCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(dequeueFirstCommand.equals(new DequeueCommand(BOB.getReferenceId())));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 57,
      "SakuraBlossom": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EnqueueCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class EnqueueCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EnqueueCommand(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ReferenceId alice \u003d new PersonBuilder().withId(\"2322\").withName(\"Alice\").build().getReferenceId();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ReferenceId bob \u003d new PersonBuilder().withId(\"32323\").withName(\"Bob\").build().getReferenceId();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        EnqueueCommand addAliceCommand \u003d new EnqueueCommand(alice);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        EnqueueCommand addBobCommand \u003d new EnqueueCommand(bob);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        EnqueueCommand addAliceCommandCopy \u003d new EnqueueCommand(alice);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.predicates.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new ContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new ContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new ContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 20,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NextCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class NextCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.ReversibleActionPairCommandStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Contains integration tests (interaction with the Model and CommandHistory) and unit tests for RedoCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_performRedo_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand(history);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(redoCommand, model, CommandHistory.MESSAGE_NO_REDO_HISTORY_ERROR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String commandResultMessage \u003d \"cmd 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(commandResultMessage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(redoCommand, model, CommandHistory.MESSAGE_NO_REDO_HISTORY_ERROR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Assertions.assertTrue(history.performUndo(model).equals(new CommandResult(commandResultMessage)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertCommandSuccess(redoCommand, model, commandResultMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(redoCommand, model, CommandHistory.MESSAGE_NO_REDO_HISTORY_ERROR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RedoCommand redoFirstCommand \u003d new RedoCommand(history);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RedoCommand redoSecondCommand \u003d new RedoCommand(history);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Assertions.assertTrue(redoFirstCommand.equals(redoFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Assertions.assertTrue(redoFirstCommand.equals(redoSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Assertions.assertFalse(redoFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Assertions.assertFalse(redoFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.ReversibleActionPairCommandStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Contains integration tests (interaction with the Model and CommandHistory) and unit tests for UndoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_performUndo_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand(history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(undoCommand, model, CommandHistory.MESSAGE_NO_UNDO_HISTORY_ERROR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String commandResultMessage \u003d \"cmd 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(commandResultMessage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(undoCommand, model, commandResultMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UndoCommand undoFirstCommand \u003d new UndoCommand(history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UndoCommand undoSecondCommand \u003d new UndoCommand(history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(undoFirstCommand.equals(undoFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(undoFirstCommand.equals(undoSecondCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(undoFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(undoFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/common/CommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.ReversibleActionPairCommandStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class CommandHistoryTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ModelManager expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void execute_performUndo_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canUndo());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 2\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 2\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 1\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertFalse(history.canUndo());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                CommandHistory.MESSAGE_NO_UNDO_HISTORY_ERROR, () -\u003e history.performUndo(model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(model.equals(expectedModel));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void canRedo() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 2\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 2\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canRedo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 1\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertFalse(history.canUndo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canRedo());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performRedo(model).equals(new CommandResult(\"cmd 1\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canRedo());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 3\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                CommandHistory.MESSAGE_NO_REDO_HISTORY_ERROR, () -\u003e history.performRedo(model));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(model.equals(expectedModel));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/common/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(commandResult.toString())));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandResult sampleResult \u003d new CommandResult(\"feedback\", true, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(commandResult.equals(sampleResult));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleResult.isExit());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleResult.isShowHelp());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleResult \u003d new CommandResult(\"feedback\", true, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(commandResult.equals(sampleResult));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleResult.isExit());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleResult.isShowHelp());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 10,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/core/CommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.ReversibleActionPairCommandStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class CommandHistoryTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void execute_performUndo_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new QueueManager(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new AppointmentBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new QueueManager(), new AppointmentBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canUndo());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 2\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 2\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 1\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertFalse(history.canUndo());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            CommandHistory.MESSAGE_NO_UNDO_HISTORY_ERROR, () -\u003e history.performUndo(model));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(model.equals(expectedModel));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void canRedo() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new QueueManager(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new AppointmentBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                new QueueManager(), new AppointmentBook());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 1\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 2\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 2\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canRedo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performUndo(model).equals(new CommandResult(\"cmd 1\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertFalse(history.canUndo());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canRedo());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.performRedo(model).equals(new CommandResult(\"cmd 1\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canRedo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            history.addToCommandHistory(new ReversibleActionPairCommandStub(\"cmd 3\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertTrue(history.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            assertFalse(history.canRedo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            CommandHistory.MESSAGE_NO_REDO_HISTORY_ERROR, () -\u003e history.performRedo(model));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(model.equals(expectedModel));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 92,
      "wongsm7": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patients/EditPatientDetailsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class EditPatientDetailsCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand editPatientDetailsCommand \u003d new EditPatientDetailsCommand(personToEdit, BOB);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel.setPerson(personToEdit, BOB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, BOB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(editPatientDetailsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_allFieldsSpecifiedExceptIdUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withId(personToEdit.getReferenceId().toString()).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand editPatientDetailsCommand \u003d new EditPatientDetailsCommand(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(editPatientDetailsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                      .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand editPatientDetailsCommand \u003d new EditPatientDetailsCommand(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(editPatientDetailsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand editPatientDetailsCommand \u003d new EditPatientDetailsCommand(ALICE, ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(editPatientDetailsCommand, model, EditPatientDetailsCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand editPatientDetailsCommand \u003d new EditPatientDetailsCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            personInFilteredList, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(EditPatientDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel.setPerson(personInFilteredList, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(editPatientDetailsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withId(secondPerson.getReferenceId().toString()).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand editPatientDetailsCommand \u003d new EditPatientDetailsCommand(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(editPatientDetailsCommand, model, EditPatientDetailsCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person firstPersonInList \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person secondPersonInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPatientDetailsCommand editPatientDetailsCommand \u003d new EditPatientDetailsCommand("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            firstPersonInList, secondPersonInList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(editPatientDetailsCommand, model, EditPatientDetailsCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        final EditPatientDetailsCommand standardCommand \u003d new EditPatientDetailsCommand(ALICE, BOB);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(standardCommand.equals(new EditPatientDetailsCommand(ALICE, BOB)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(standardCommand.equals(new ExitCommand()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different person to edit -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientDetailsCommand(ALICE, CARL)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different edited person -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPatientDetailsCommand(CARL, BOB)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 65,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patients/RegisterPatientCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class RegisterPatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RegisterPatientCommand command \u003d new RegisterPatientCommand(validPerson);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                String.format(RegisterPatientCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(new RegisterPatientCommand(personInList), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            RegisterPatientCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 16,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patients/RegisterPatientCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.ModelAcceptingPersonAddedStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.ModelStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.ModelWithPersonStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class RegisterPatientCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RegisterPatientCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ModelAcceptingPersonAddedStub modelStub \u003d new ModelAcceptingPersonAddedStub();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        CommandResult commandResult \u003d new RegisterPatientCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(String.format(RegisterPatientCommand.MESSAGE_SUCCESS, validPerson),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RegisterPatientCommand registerPatientCommand \u003d new RegisterPatientCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ModelStub modelStub \u003d new ModelWithPersonStub(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //assertCommandFailure(addCommand, modelStub, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            RegisterPatientCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e registerPatientCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RegisterPatientCommand addAliceCommand \u003d new RegisterPatientCommand(alice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RegisterPatientCommand addBobCommand \u003d new RegisterPatientCommand(bob);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        RegisterPatientCommand addAliceCommandCopy \u003d new RegisterPatientCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 19,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/patients/UnregisterPatientCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UnregisterPatientCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_validUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UnregisterPatientCommand unregisterPatientCommand \u003d new UnregisterPatientCommand(personToDelete);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(UnregisterPatientCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ModelManager expectedModel \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandSuccess(unregisterPatientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_invalidUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UnregisterPatientCommand unregisterPatientCommand \u003d new UnregisterPatientCommand(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertCommandFailure(unregisterPatientCommand, model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            String.format(Messages.MESSAGE_PERSON_NOT_FOUND, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        UnregisterPatientCommand deleteFirstCommand \u003d new UnregisterPatientCommand(ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(new UnregisterPatientCommand(ALICE)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(new UnregisterPatientCommand(BOB)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 19,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/utils/ModelAcceptingEventAddedStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": " * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class ModelAcceptingEventAddedStub extends ModelStub {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return eventsAdded.stream().anyMatch(event::isSameAs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "        eventsAdded.add(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "woon17": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/utils/ModelAcceptingPersonAddedStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ModelAcceptingPersonAddedStub extends ModelStub {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return personsAdded.stream().anyMatch(person::isSameAs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        personsAdded.add(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/utils/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ReadOnlyAppointmentBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.Room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Path getAppointmentBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAppointmentBookFilePath(Path appointmentBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasPerson(ReferenceId person) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasExactPerson(Person person) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public QueueManager getQueueManager() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeFromQueue(ReferenceId target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void enqueuePatient(ReferenceId id) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void enqueuePatientToIndex(ReferenceId id, int index) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean isPatientInQueue(ReferenceId id) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cRoom\u003e getConsultationRoomList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoom(Room room) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void addRoomToIndex(Room room, int indexOfRoom) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void removeRoom(Room target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public boolean hasRoom(Room room) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setSchedule(ReadOnlyAppointmentBook schedule) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReadOnlyAppointmentBook getAppointmentBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasExactEvent(Event event) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void deleteEvent(Event event) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateFilteredEventList(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateFilteredEventList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateToMissedEventList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void updateToSettleEventList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public void displayApprovedAndAckedPatientEvent(ReferenceId referenceId) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Boolean isPatientList() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Boolean isMissedList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ObservableList\u003cReferenceId\u003e getQueueList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Person resolve(ReferenceId person) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 162,
      "wongsm7": 54,
      "woon17": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/utils/ModelWithEventStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": " * A Model stub that contains a single person."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class ModelWithEventStub extends ModelStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public ModelWithEventStub(Event event) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean hasEvent(Event pereventson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.event.isSameAs(event);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public boolean hasExactEvent(Event pereventson) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.event.isSameAs(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 2,
      "woon17": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/utils/ModelWithPersonStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A Model stub that contains a single person."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ModelWithPersonStub extends ModelStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ModelWithPersonStub(Person person) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.person.isSameAs(person);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/utils/ReversibleActionPairCommandStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Stubs an {@code ReversibleActionPairCommand} for unit testing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ReversibleActionPairCommandStub extends ReversibleActionPairCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String result;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReversibleActionPairCommandStub(String result) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(new ReversibleCommandStub(\"\"), new ReversibleCommandStub(\"\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult redo(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/utils/ReversibleCommandStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.commands.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Stubs an {@code ReversibleActionPairCommand} for unit testing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ReversibleCommandStub extends ReversibleCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String result;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ReversibleCommandStub(String result) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.EditPatientDetailsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.UnregisterPatientCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.EditPersonDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.predicates.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser(history);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command command \u003d parser.parseCommand(PersonUtil.getAddCommand(person), model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new RegisterPatientCommand(person),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new UnregisterPatientCommand(person)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person toDelete \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command command \u003d parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                UnregisterPatientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(), model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new UnregisterPatientCommand(toDelete),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new RegisterPatientCommand(toDelete)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(personToEdit)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command command \u003d parser.parseCommand(EditPatientDetailsCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new EditPatientDetailsCommand(personToEdit, editedPerson),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new EditPatientDetailsCommand(editedPerson, personToEdit)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(new FindCommand(new ContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, model) instanceof ListCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", model) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            -\u003e parser.parseCommand(\"\", model));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            \"unknownCommand\", model));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD, model) instanceof UndoCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\", model) instanceof UndoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD, model) instanceof RedoCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 3\", model) instanceof RedoCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 64,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DequeueCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.DequeueCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class DequeueCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DequeueCommandParser parser \u003d new DequeueCommandParser(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DequeueCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 2,
      "SakuraBlossom": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EnqueueCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.model.person.parameters.PersonReferenceId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.logic.commands.EnqueueCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "public class EnqueueCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private EnqueueCommandParser parser \u003d new EnqueueCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public void parse_invalidId_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CONSTRAINTS, EnqueueCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertParseFailure(parser, \"22\u00262\", expectedMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.predicates.ContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new FindCommand(new ContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PersonReferenceId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.StaffReferenceId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String INVALID_ID1 \u003d \"@001A\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String INVALID_ID2 \u003d \"STAFF\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String VALID_PATIENT_ID \u003d \"001A\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String VALID_STAFF_ID \u003d \"STAFF001A\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex(Long.toString("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parsePatientReferenceId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(ParseException.class, PersonReferenceId.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ParserUtil.parsePatientReferenceId(INVALID_ID1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        });"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(ParseException.class, PatientReferenceId.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ParserUtil.parsePatientReferenceId(INVALID_ID2);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        });"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parsePatientReferenceId_validStaffId_throwsParseException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(ParseException.class, PatientReferenceId.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ParserUtil.parsePatientReferenceId(VALID_STAFF_ID);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        });"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parsePatientReferenceId_validPatientIdWithoutWhitespace_returnsReferenceId() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        PatientReferenceId expectedId \u003d new PatientReferenceId(VALID_PATIENT_ID);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parsePatientReferenceId(VALID_PATIENT_ID));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parsePatientReferenceId_validPatientIdWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String idWithWhitespace \u003d WHITESPACE + VALID_PATIENT_ID + WHITESPACE;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        PatientReferenceId expectedId \u003d new PatientReferenceId(VALID_PATIENT_ID);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parsePatientReferenceId(idWithWhitespace));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parseStaffReferenceId_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(ParseException.class, PersonReferenceId.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ParserUtil.parseStaffReferenceId(INVALID_ID1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        });"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(ParseException.class, StaffReferenceId.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ParserUtil.parseStaffReferenceId(INVALID_ID2);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        });"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parseStaffReferenceId_validPatientId_throwsParseException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(ParseException.class, StaffReferenceId.MESSAGE_CONSTRAINTS, () -\u003e {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ParserUtil.parseStaffReferenceId(VALID_PATIENT_ID);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        });"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parseStaffReferenceId_validValueWithoutWhitespace_returnsReferenceId() throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        StaffReferenceId expectedId \u003d new StaffReferenceId(VALID_STAFF_ID);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseStaffReferenceId(VALID_STAFF_ID));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parsePatientReferenceId_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String idWithWhitespace \u003d WHITESPACE + VALID_STAFF_ID + WHITESPACE;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        StaffReferenceId expectedId \u003d new StaffReferenceId(VALID_STAFF_ID);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(expectedId, ParserUtil.parseStaffReferenceId(idWithWhitespace));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 72,
      "CarbonGrid": 2,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patients/EditPatientDetailsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.parser.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.EditPatientDetailsCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class EditPatientDetailsCommandParserTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientDetailsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private EditPatientDetailsCommandParser parser \u003d new EditPatientDetailsCommandParser(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, \"1\", EditPatientDetailsCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, \"1 l/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                   + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(personToEdit, editedPerson),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, personToEdit)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(ALICE, editedPerson),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, ALICE)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(CARL).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(CARL, editedPerson),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, CARL)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedPerson \u003d new PersonBuilder(CARL).withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(CARL, editedPerson),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, CARL)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedPerson \u003d new PersonBuilder(CARL).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(CARL, editedPerson),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, CARL)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedPerson \u003d new PersonBuilder(CARL).withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(CARL, editedPerson),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, CARL)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedPerson \u003d new PersonBuilder(CARL).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(CARL, editedPerson),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, CARL)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                   + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                   + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                                   + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                  .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  .build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(ALICE, editedPerson),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, ALICE)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(ALICE, editedPerson),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, ALICE)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                            + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedPerson \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                             .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(ALICE, editedPerson),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, ALICE)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(model.getFilteredPersonList().get(0), ALICE);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(model.getFilteredPersonList().get(1), BENSON);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(model.getFilteredPersonList().get(2), CARL);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(CARL).withTags().build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, userInput,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(CARL, editedPerson),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new EditPatientDetailsCommand(editedPerson, CARL)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String userInput \u003d outOfBoundIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(new EditPatientDetailsCommandParser(model), userInput,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 123,
      "CarbonGrid": 10,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patients/RegisterPatientCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.parser.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ID_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.UnregisterPatientCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PersonReferenceId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class RegisterPatientCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private RegisterPatientCommandParser parser \u003d new RegisterPatientCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ReversibleActionPairCommand expectedCommand \u003d new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new RegisterPatientCommand(expectedPerson),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new UnregisterPatientCommand(expectedPerson)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, expectedCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, expectedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, expectedCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, expectedCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    new RegisterPatientCommand(expectedPersonMultipleTags),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    new UnregisterPatientCommand(expectedPersonMultipleTags)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, ID_DESC_AMY + NAME_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    new RegisterPatientCommand(expectedPerson),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    new UnregisterPatientCommand(expectedPerson)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterPatientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // missing id prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, VALID_ID_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + VALID_NAME_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + VALID_NAME_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // invalid id - Not AlphaNum"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, INVALID_ID_DESC + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            PersonReferenceId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, ID_DESC_BOB + INVALID_NAME_DESC + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 84,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/patients/UnregisterPatientCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.logic.parser.patients;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.common.ReversibleActionPairCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.UnregisterPatientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class UnregisterPatientCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private UnregisterPatientCommandParser parser \u003d new UnregisterPatientCommandParser(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new ReversibleActionPairCommand("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new UnregisterPatientCommand(personToDelete),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new RegisterPatientCommand(personToDelete)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, UnregisterPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void parse_invalidIndexUnfilteredList_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(parser, String.valueOf(model.getFilteredPersonList().size() + 1),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Model model \u003d TestUtil.getTypicalModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String userInput \u003d String.valueOf(outOfBoundIndex.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertParseFailure(new UnregisterPatientCommandParser(model), userInput,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 46,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                     .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson((Person) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void hasPerson_nullReferenceId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson((ReferenceId) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                     .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 13,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson((Person) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void hasPerson_nullReferenceId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson((ReferenceId) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        AppointmentBook appointmentBook \u003d new AppointmentBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        QueueManager queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, queueManager, appointmentBook);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, queueManager, appointmentBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, queueManager,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                appointmentBook)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, queueManager,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                appointmentBook)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 12,
      "wongsm7": 8,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/common/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/events/DateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DateTime sampleDate1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DateTime sampleDate2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DateTime sampleDate3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleDate1 \u003d DateTime.tryParseSimpleDateFormat(\"10/10/20 0100\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleDate2 \u003d DateTime.tryParseSimpleDateFormat(\"10/10/20 0100\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleDate3 \u003d DateTime.tryParseSimpleDateFormat(\"10/10/20 1800\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_getTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.getTime().equals(sampleDate2.getTime()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.getTime().equals(sampleDate3.getTime()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate2.getTime().equals(sampleDate3.getTime()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_tryParseSimpleDateFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertNotNull(sampleDate1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertNotNull(sampleDate2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertNotNull(sampleDate3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertTrue(DateTime.tryParseSimpleDateFormat(\"10/10/20 0100\").equals(sampleDate1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertNull(DateTime.tryParseSimpleDateFormat(\"10/10/20 0160\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertNull(DateTime.tryParseSimpleDateFormat(\"101020 0100\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertNull(DateTime.tryParseSimpleDateFormat(\"  \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.tryParseSimpleDateFormat(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_before() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.before(sampleDate1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.before(sampleDate2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.before(sampleDate3));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate2.before(sampleDate1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate2.before(sampleDate2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate2.before(sampleDate3));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate3.before(sampleDate1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate3.before(sampleDate2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate3.before(sampleDate3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_beforeOrEqual() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.beforeOrEqual(sampleDate1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.beforeOrEqual(sampleDate2));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.beforeOrEqual(sampleDate3));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate2.beforeOrEqual(sampleDate1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate2.beforeOrEqual(sampleDate2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate2.beforeOrEqual(sampleDate3));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate3.beforeOrEqual(sampleDate1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate3.beforeOrEqual(sampleDate2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate3.beforeOrEqual(sampleDate3));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_timing_compareTo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleDate1.compareTo(sampleDate1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleDate1.compareTo(sampleDate2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(-1, sampleDate1.compareTo(sampleDate3));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleDate2.compareTo(sampleDate1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleDate2.compareTo(sampleDate2));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(-1, sampleDate2.compareTo(sampleDate3));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(1, sampleDate3.compareTo(sampleDate1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(1, sampleDate3.compareTo(sampleDate2));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleDate3.compareTo(sampleDate3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e sampleDate1.compareTo(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_testEquals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.equals(sampleDate1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.equals(sampleDate2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.equals(sampleDate3));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.equals(\"11/11\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.equals(\"   \"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate1.equals(new Date()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate2.equals(sampleDate1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate2.equals(sampleDate2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate2.equals(sampleDate3));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate3.equals(sampleDate1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleDate3.equals(sampleDate2));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate3.equals(sampleDate3));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate1.equals(DateTime.tryParseSimpleDateFormat(sampleDate1.toString())));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate2.equals(DateTime.tryParseSimpleDateFormat(sampleDate2.toString())));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleDate3.equals(DateTime.tryParseSimpleDateFormat(sampleDate3.toString())));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 119,
      "woon17": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/events/TimingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class TimingTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DateTime sampleDate1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DateTime sampleDate2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DateTime sampleDate3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private DateTime sampleDate4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Timing sampleEvent1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Timing sampleEvent2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Timing sampleEvent3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Timing sampleEvent4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleDate1 \u003d DateTime.tryParseSimpleDateFormat(\"10/10/20 0100\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleDate2 \u003d DateTime.tryParseSimpleDateFormat(\"10/10/20 0100\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleDate3 \u003d DateTime.tryParseSimpleDateFormat(\"10/10/20 1900\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleDate4 \u003d DateTime.tryParseSimpleDateFormat(\"11/10/20 0100\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleEvent1 \u003d new Timing(sampleDate1, sampleDate3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleEvent2 \u003d new Timing(sampleDate2, sampleDate3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleEvent3 \u003d new Timing(sampleDate1, sampleDate4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sampleEvent4 \u003d new Timing(sampleDate3, sampleDate4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_isValidTiming() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate1, sampleDate1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate1, sampleDate2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(Timing.isValidTiming(sampleDate1, sampleDate3));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(Timing.isValidTiming(sampleDate1, sampleDate4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate2, sampleDate1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate2, sampleDate2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(Timing.isValidTiming(sampleDate2, sampleDate3));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(Timing.isValidTiming(sampleDate1, sampleDate4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate3, sampleDate1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate3, sampleDate2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate3, sampleDate3));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(Timing.isValidTiming(sampleDate3, sampleDate4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate4, sampleDate1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate4, sampleDate2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate4, sampleDate3));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(Timing.isValidTiming(sampleDate4, sampleDate4));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Timing(sampleDate1, sampleDate2),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        Timing.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Timing.isValidTiming(null, sampleDate1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Timing.isValidTiming(null, null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Timing.isValidTiming(sampleDate1, null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_timing_conflictsWith() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        DateTime sampleDate5 \u003d DateTime.tryParseSimpleDateFormat(\"10/10/20 2000\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Timing sampleEvent5 \u003d new Timing(sampleDate3, sampleDate5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e sampleEvent1.conflictsWith(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //False: Event should not conflict with itself."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent1.conflictsWith(sampleEvent1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //True: Event has the same timing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent1.conflictsWith(sampleEvent2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //True: Event1 is within the timing of event3"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent1.conflictsWith(sampleEvent2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //False: Event1 and Event4 are back-to-back session and should not be in conflict"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent1.conflictsWith(sampleEvent4));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //False: Event1 and Event5 are back-to-back session and should not be in conflict"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent1.conflictsWith(sampleEvent5));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent2.conflictsWith(sampleEvent1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent2.conflictsWith(sampleEvent2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent2.conflictsWith(sampleEvent3));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent2.conflictsWith(sampleEvent4));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent2.conflictsWith(sampleEvent5));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent3.conflictsWith(sampleEvent1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent3.conflictsWith(sampleEvent2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent3.conflictsWith(sampleEvent3));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent3.conflictsWith(sampleEvent4));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent3.conflictsWith(sampleEvent5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent4.conflictsWith(sampleEvent1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent4.conflictsWith(sampleEvent2));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent4.conflictsWith(sampleEvent3));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent4.conflictsWith(sampleEvent4));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent4.conflictsWith(sampleEvent5));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent5.conflictsWith(sampleEvent1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent5.conflictsWith(sampleEvent2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent5.conflictsWith(sampleEvent3));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent5.conflictsWith(sampleEvent4));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent5.conflictsWith(sampleEvent5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_timing_compareTo() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleEvent1.compareTo(sampleEvent1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleEvent1.compareTo(sampleEvent2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(1, sampleEvent1.compareTo(sampleEvent3));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(1, sampleEvent1.compareTo(sampleEvent4));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleEvent2.compareTo(sampleEvent1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleEvent2.compareTo(sampleEvent2));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(1, sampleEvent2.compareTo(sampleEvent3));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(1, sampleEvent2.compareTo(sampleEvent4));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(-1, sampleEvent3.compareTo(sampleEvent1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(-1, sampleEvent3.compareTo(sampleEvent2));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleEvent3.compareTo(sampleEvent3));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(1, sampleEvent3.compareTo(sampleEvent4));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(-1, sampleEvent4.compareTo(sampleEvent1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(-1, sampleEvent4.compareTo(sampleEvent2));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "woon17"
        },
        "content": "        assertEquals(-1, sampleEvent4.compareTo(sampleEvent3));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(0, sampleEvent4.compareTo(sampleEvent4));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e sampleEvent1.compareTo(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void test_timing_equals() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent1.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent1.equals(\"\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent1.equals(sampleEvent1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //sample 1 and 2 should have same appointment timings"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(sampleEvent1.equals(sampleEvent2));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent1.equals(sampleEvent3));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent1.equals(sampleEvent4));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent3.equals(sampleEvent1));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent4.equals(sampleEvent1));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(sampleEvent3.equals(sampleEvent4));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 148,
      "woon17": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void isSamePerson_usingReferenceId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(ALICE.isSameAs((ReferenceId) null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(ALICE.isSameAs(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void isSamePerson_usingPerson() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(ALICE.isSameAs((Person) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withId(VALID_ID_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(ALICE.isSameAs(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // different name -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                              .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                              .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(ALICE.isSameAs(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 47,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains((Person) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void contains_nullReferenceId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains((ReferenceId) null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void contains_referenceIdNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void contains_referenceIdInList_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                     .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice.getReferenceId()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.set(null, ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.set(ALICE, null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e uniquePersonList.set(ALICE, ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        uniquePersonList.set(ALICE, ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                     .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        uniquePersonList.set(ALICE, editedAlice);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        uniquePersonList.set(ALICE, BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void set_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.set(ALICE, BOB));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAll_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setAll((UniquePersonList) null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAll_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        uniquePersonList.setAll(expectedUniquePersonList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAll_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setAll((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAll_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        uniquePersonList.setAll(personList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void setAll_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e uniquePersonList.setAll(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void getPerson_nullReferenceId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.getPerson(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void getPerson_personNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(EntryNotFoundException.class, () -\u003e uniquePersonList.getPerson(ALICE.getReferenceId()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void getPerson_referenceIdInList_returnsPerson() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(uniquePersonList.getPerson(ALICE.getReferenceId()).equals(ALICE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniquePersonList.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                                        .remove(0));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 61,
      "CarbonGrid": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/parameters/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/parameters/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/parameters/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/parameters/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/predicates/ContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package seedu.address.model.person.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate firstPredicate \u003d new ContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate secondPredicate \u003d new ContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate firstPredicateCopy \u003d new ContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void test_idContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person testPerson \u003d new PersonBuilder().withId(\"14598A\").withName(\"Alice\").withPhone(\"12345\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"459\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(testPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"459\", \"98A\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(testPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"459\", \"124\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(testPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void test_idContainsKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Person testPerson \u003d new PersonBuilder().withId(\"14598A\").withName(\"Alice\").withPhone(\"12345\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(predicate.test(testPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(predicate.test(testPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"23\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(testPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Keywords match email and address, but does not match id, name or phone"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"+14598A\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withId(\"98A\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Keywords match email and address, but does not match id, name or phone"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"1245\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withId(\"98A\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void test_phoneContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.singletonList(\"2345\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"2345\", \"1234\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"2345\", \"4567\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void test_phoneContainsKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ContainsKeywordsPredicate predicate \u003d new ContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"123\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withId(\"98A\").withName(\"Alice\").withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        // Keywords match email and address, but does not match id, name or phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        predicate \u003d new ContainsKeywordsPredicate(Arrays.asList(\"12-45\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withId(\"98A\").withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 88,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/queue/QueueManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "package seedu.address.model.queue;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.person.parameters.StaffReferenceId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "class QueueManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    private QueueManager queueManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void serveNext_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoom(new Room(doctor.getReferenceId()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.serveNext(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(0, queueManager.getSizeOfQueue());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void serveNext_index_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoom(new Room(doctor.getReferenceId()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.serveNext(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(0, queueManager.getSizeOfQueue());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void serve_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient2 \u003d new PersonBuilder(CARL).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoom(new Room(doctor.getReferenceId()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient2.getReferenceId());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.serveNext(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(1, queueManager.getSizeOfQueue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void addPatient_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(1, queueManager.getSizeOfQueue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void removePatient_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.removePatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(0, queueManager.getSizeOfQueue());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void removePatient_usingIndex_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.removePatient(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(0, queueManager.getSizeOfQueue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void poll_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.poll();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(0, queueManager.getSizeOfQueue());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void hasPatient_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(patient.getReferenceId());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(true, queueManager.hasId(patient.getReferenceId()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void addRoom_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor \u003d new PersonBuilder(BOB).withId(\"002A\").build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor2 \u003d new PersonBuilder(AMY).withId(\"001A\").build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoom(new Room(doctor.getReferenceId()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(new StaffReferenceId(\"002A\"), queueManager.getRoomList().get(0).getDoctor());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoomToIndex(new Room(doctor2.getReferenceId()), 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(new StaffReferenceId(\"001A\"), queueManager.getRoomList().get(0).getDoctor());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void hasRoom_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor \u003d new PersonBuilder(BOB).withId(\"002A\").build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(queueManager.hasRoom(new Room(doctor.getReferenceId())));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoom(new Room(doctor.getReferenceId()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertTrue(queueManager.hasRoom(new Room(doctor.getReferenceId())));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager \u003d new QueueManager();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertTrue(queueManager.equals(queueManager));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        QueueManager queueManagerCopy \u003d new QueueManager(queueManager);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertTrue(queueManager.equals(queueManagerCopy));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person patient \u003d new PersonBuilder(AMY).withId(\"001A\").build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        Person doctor \u003d new PersonBuilder(BOB).withId(\"002A\").build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addPatient(0, patient.getReferenceId());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(queueManager.equals(queueManagerCopy));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManagerCopy.addRoom(new Room(doctor.getReferenceId()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(queueManager.equals(queueManagerCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManagerCopy.addPatient(0, patient.getReferenceId());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertFalse(queueManager.equals(queueManagerCopy));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        queueManager.addRoom(new Room(doctor.getReferenceId()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertTrue(queueManager.equals(queueManagerCopy));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PersonReferenceId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String INVALID_ID1 \u003d \"123-312*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String INVALID_ID2 \u003d \"STAFF12\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String VALID_ID \u003d BENSON.getReferenceId().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                   .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                   .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void toModelType_invalidId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAdaptedPerson person1 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new JsonAdaptedPerson(INVALID_ID1, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage1 \u003d PersonReferenceId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage1, person1::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAdaptedPerson person2 \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            new JsonAdaptedPerson(INVALID_ID2, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage2 \u003d PatientReferenceId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage2, person2::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void toModelType_nullId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            PatientReferenceId.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            null, VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                new JsonAdaptedPerson(VALID_ID, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 45,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                       ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                       : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        JsonAppointmentBookStorage appointmentBookStorage \u003d new JsonAppointmentBookStorage("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, appointmentBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 4,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        descriptor.setReferenceId(person.getReferenceId());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 7,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woon17"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Status;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.events.Timing;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woon17"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woon17"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woon17"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woon17"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woon17"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final String DEFAULT_REFERENCE_ID \u003d \"1234567A\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final DateTime DEFAULT_STARTIMING \u003d DateTime.tryParseSimpleDateFormat(\"01/11/2019 1800\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public static final DateTime DEFAULT_ENDTIMING \u003d DateTime.tryParseSimpleDateFormat(\"01/11/2019 1900\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private ReferenceId id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woon17"
        },
        "content": "    private Timing timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woon17"
        },
        "content": "        id \u003d new PatientReferenceId(DEFAULT_REFERENCE_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woon17"
        },
        "content": "        timing \u003d new Timing(DEFAULT_STARTIMING, DEFAULT_ENDTIMING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public EventBuilder(Event personToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woon17"
        },
        "content": "        id \u003d personToCopy.getPersonId();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woon17"
        },
        "content": "        timing \u003d personToCopy.getEventTiming();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woon17"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woon17"
        },
        "content": "     * Sets the {@code PatientReferenceId} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woon17"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public EventBuilder withId(String id) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woon17"
        },
        "content": "        this.id \u003d new PatientReferenceId(id);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woon17"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woon17"
        },
        "content": "        return new Event(id, timing, new Status(\"APPROVED\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woon17"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woon17"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woon17"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woon17": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.ReferenceId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.PatientReferenceId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.person.parameters.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"1234567A\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private ReferenceId id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        id \u003d new PatientReferenceId(DEFAULT_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        id \u003d personToCopy.getReferenceId();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Sets the {@code PatientReferenceId} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public PersonBuilder withId(String id) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.id \u003d new PatientReferenceId(id);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Person(id, name, phone, email, address, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 19,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.patients.RegisterPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.logic.commands.utils.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.common.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return RegisterPatientCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        sb.append(PREFIX_ID + person.getReferenceId().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        person.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 6,
      "CarbonGrid": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                                                  + \"  \\\"name\\\" : \\\"This is a test \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                                                  + \"class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                                                  + \"[ \\\"-999999999-01-01T00:00:00\\\",\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                                                  + \" \\\"+999999999-12-31T23:59:59\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "                                                                                  + \".999999999\\\", \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"  }%n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  + \"}\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 5,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAppointmentBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalQueueManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.userprefs.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns a {@code ModelManager} with all the typical persons and appointments."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static ModelManager getTypicalModelManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new ModelManager(getTypicalAddressBook(), new UserPrefs(), getTypicalQueueManager(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "                getTypicalAppointmentBook());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 12,
      "wongsm7": 3,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import seedu.address.model.AppointmentBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "import seedu.address.model.queue.QueueManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withId(\"01A\").withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withId(\"02B\").withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withId(\"03C\").withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withId(\"04D\").withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withId(\"05E\").withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withId(\"06F\").withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withId(\"07G\").withName(\"George Best\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withId(\"08H\").withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withId(\"09I\").withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withId(VALID_ID_AMY).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withId(VALID_ID_BOB).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    public static QueueManager getTypicalQueueManager() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        /*QueueManager qm \u003d new QueueManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "            qm.addPatient(person.getReferenceId());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        qm.addRoom(IDA.getReferenceId());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        qm.addRoom(HOON.getReferenceId());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return qm;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        return new QueueManager();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wongsm7"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Returns an {@code AppointmentBook} with all the typical appointments."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static AppointmentBook getTypicalAppointmentBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new AppointmentBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 38,
      "wongsm7": 13,
      "CarbonGrid": 5,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/OmniPanelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import seedu.address.commons.core.OmniPanelTab;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " * Does nothing for now. Acting as a stub for OmniPanel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class OmniPanelStub implements OmniPanel {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void setOmniPanelTab(OmniPanelTab omniPanelTab) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void regainOmniPanelSelector() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                       || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                   \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CarbonGrid": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/autocomplete/AutoCompleterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "package seedu.address.ui.autocomplete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "public class AutoCompleterTest extends AutoCompleter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    public void correctnessTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wongsm7"
        },
        "content": "        assertEquals(this.update(\"a\").getSuggestions().size(), 4);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        assertEquals(this.update(\"ca\").getSuggestions().size(), 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        assertEquals(this.update(\"i\").getSuggestions().size(), 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "        assertEquals(this.update(\"o\").getSuggestions().size(), 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CarbonGrid"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wongsm7": 1,
      "CarbonGrid": 15
    }
  }
]
