[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 9"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "# SplitWiser"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-W11-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-W11-2/main\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W11-2/main/badge.svg?branch\u003dmaster[\"Coverage Status\"), link\u003d\"https://coveralls.io/github/AY1920S1-CS2103T-W11-2/main?branch\u003dmaster\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "podocarp"
        },
        "content": "image:https://img.shields.io/github/commit-activity/w/AY1920S1-CS2103T-W11-2/main[GitHub commit activity]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "podocarp"
        },
        "content": "image:https://img.shields.io/github/v/tag/AY1920S1-CS2103T-W11-2/main[GitHub tag (latest by date)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## About"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Ever did group activities where everyone paid different amounts, and it became"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "so troublesome and confusing to figure out how to redistribute costs evenly?"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Fret no more because with SplitWiser is here! SplitWiser is a free tool for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "friends and roommates to track bills and other shared expenses, so that"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "everyone gets paid back, and everyone is happy."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* It just works!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Add contacts and tags so you know who you owe and who owes you!"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* View your activities and regret your monthly expenses!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Aggregate and simplify debts between a group of friends!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Helpful Links"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "* SplitWiser is built on AddressBook-Level3 project created by https://se-education.org[SE-EDU] initiative."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "## Licence"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "link:LICENSE[MIT]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Donate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "You can donate to us by emailing us a picture of your credit card."
      }
    ],
    "authorContributionMap": {
      "podocarp": 4,
      "JohnNzj": 1,
      "Aulud": 5,
      "-": 47
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestExceptionFormat"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "task hooks(type: Copy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    from \"./config/hooks/\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    into \"./.git/hooks/\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    fileMode 0777"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "build.dependsOn hooks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "tasks.withType(Test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // set options for log level LIFECYCLE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        events TestLogEvent.FAILED,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "               TestLogEvent.PASSED,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "               TestLogEvent.SKIPPED,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "               TestLogEvent.STANDARD_OUT"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        exceptionFormat TestExceptionFormat.FULL"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // set options for log level DEBUG and INFO"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        debug {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            events TestLogEvent.STARTED,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                   TestLogEvent.FAILED,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                   TestLogEvent.PASSED,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                   TestLogEvent.SKIPPED,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                   TestLogEvent.STANDARD_ERROR,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                   TestLogEvent.STANDARD_OUT"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            exceptionFormat TestExceptionFormat.FULL"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        info.events \u003d debug.events"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        info.exceptionFormat \u003d debug.exceptionFormat"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        afterSuite { desc, result -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            if (!desc.parent) { // will match the outermost suite"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                def output \u003d \"Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                def startItem \u003d \u0027|  \u0027, endItem \u003d \u0027  |\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                def repeatLength \u003d startItem.length() + output.length() + endItem.length()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                println(\u0027\\n\u0027 + (\u0027-\u0027 * repeatLength) + \u0027\\n\u0027 + startItem + output + endItem + \u0027\\n\u0027 + (\u0027-\u0027 * repeatLength))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u0027site-name\u0027: \u0027SplitWiser\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W11-2/main\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aulud"
        },
        "content": "defaultTasks \u0027hooks\u0027, \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Aulud": 10,
      "-": 152,
      "daekoon": 37
    }
  },
  {
    "path": "config/hooks/pre-push",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "#!/bin/bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "echo -e \"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Running pre-push checks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "# Update hooks, clear /build, run checkstyle on code and AsciiDocs then run tests"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "./gradlew hooks clean checkstyleMain checkstyleTest asciidoctor test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "# Store the last exit code in a variable"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "RESULT\u003d$?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "if [ $RESULT -eq 0 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    echo -e \"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pre-push checks: PASSED \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "else"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    echo -e \"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pre-push checks: FAILED \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "fi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "# Return exit code to determine if push passes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "exit $RESULT"
      }
    ],
    "authorContributionMap": {
      "Aulud": 19
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Splitwiser is developed by https://github.com/orgs/AY1920S1-CS2103T-W11-2/teams/developers[Vortex] team, based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d Lim Daekoon"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image::daekoon.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "{empty}[https://github.com/daekoon[github]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d Lee Liak Ghee"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image::liakify.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "{empty}[https://github.com/liakify[github]]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d Keven Loo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image::aulud.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "{empty}[https://github.com/Aulud[github]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d Xiaodong Jia"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image::podocarp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "{empty}[https://github.com/podocarp[github]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d John Ng"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image::johnnzj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "{empty}[https://github.com/johnnzj[github]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "JohnNzj": 10,
      "Aulud": 6,
      "-": 37
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "liakify": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d SplitWiser Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": "By: `Team Vortex`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liakify"
        },
        "content": "* stores a `Context` object that represents the current application context."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liakify"
        },
        "content": "* stores a JSON serializable `InternalState` object in order to keep track of primary key counters for both `Person` and `Activity`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liakify"
        },
        "content": "* stores the Address Book and Activity Book data."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liakify"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liakify"
        },
        "content": "`Activity` and `Expense` keeps track of the people involved by storing IDs instead of objects, hence there is no direct dependency on the `Person` class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liakify"
        },
        "content": "[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liakify"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liakify"
        },
        "content": "Strictly speaking, `Context` only stores a single `Optional\u003cObject\u003e`, which can only be an `Activity` or `Person`. Hence, it is not actually possible for `Context` to contain both and `Activity` and `Person`, unlike what Figure 7 might suggest."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liakify"
        },
        "content": "[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daekoon"
        },
        "content": "// tag::activityclass[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daekoon"
        },
        "content": "\u003d\u003d\u003d Activity class"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daekoon"
        },
        "content": "`Activity` is a class used to store activities and their details. It contains the following information:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Primary Key"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Each `Activity` has a unique primary key used by external classes to identify and access them, without unnecessary dependencies."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Title"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Title of the activity is stored using `Title`, which runs validations to ensure that the title is valid. Currently, the only restriction for the title is that it can\u0027t be blank."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Participants"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Participants are saved internally under `participantIds`, which only stores the primary key of `Contact` involved."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Expenses incurred by this activity"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Expenses are stored as `Expense`. Refer to \u003c\u003cExpense\u003e\u003e for more details. (TBD)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Outstanding balance for each participant"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daekoon"
        },
        "content": "The balance of each participants are stored internally under `participantBalances`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daekoon"
        },
        "content": "All `Activity` objects are stored in `ActivityBook`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daekoon"
        },
        "content": "The following class diagram describes the implementation of `Activity`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daekoon"
        },
        "content": ".Structure of the Activity class"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daekoon"
        },
        "content": "image::ActivityClassDiagram.png[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daekoon"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daekoon"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of participant"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* **Alternative 1 (current choice):** Only storing the primary key of participants"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** *Pros*: Minimizes dependency and potential bugs."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** *Cons*: More difficult for external classes to retrieve participant objects if necessary."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** *Reason for choice*: Storing entire object can potentially cause bugs, as there are no mechanisms to ensure the consistency of data between `Person` object in `Activity` and `AddressBook`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* **Alternative 2:** Storing the entire `Person` object inside the `Activity`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** Pros: Easier to implement. Object can be easily retrieved when necessary."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** Cons: Creates extra dependency between classes. More prone to error."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daekoon"
        },
        "content": "// tag::createactivity[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daekoon"
        },
        "content": "\u003d\u003d\u003d Create activity feature"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Mechanism to create activity is facilitated by `Activity`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daekoon"
        },
        "content": "It extends `AddressBook` with an `ActivityBook`, stored internally as an `activityList`. Additionally, it implements the following operation:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* `Activity()` -- Constructor used to create a new `Activity`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daekoon"
        },
        "content": "All `Activity` models are stored inside `ActivityBook`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daekoon"
        },
        "content": "When creating an activity, the title must be specified. It is optional to include participants, as they can be invited separately."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Adding of participant relies on keyword-based search. A set of keyword is passed in for each participant to be invited in. The keywords are used to search the AddressBook for a matching person. The person is added in as a participant only if there is one exact match. Otherwise, a warning message will be displayed and no participant will be added for this set of keywords."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Given below is an example usage scenario and how the create activity mechanism behaves at each step."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Step 1. The user launches the application for the first time. The `SplitWiser` will be initialized with the initial address book and activity book state."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Step 2. The user executes `activity t/Breakfast p/David` command to create an activity named Breakfast in the activity book, with David as a participant."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Step 3. The user executes `activity t/Lunch p/Alex p/David` command to create an activity named Lunch in the activity book. In this case, as there are two contacts with the name \"Alex\", only David is added into the Lunch activity as a participant."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "daekoon"
        },
        "content": "//TODO: Add sequence diagram and Activity diagram showing how this works"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daekoon"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daekoon"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Finding the correct contact to add"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* **Alternative 1 (current choice):** Users can use keywords to specify the contact to be added."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** *Pros*: Improves usability."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** *Cons*: Difficult to implement. Necessary to handle multiple edge cases."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** *Reason for choice*: Forcing users to specify exact full name was deemed to be too tedious."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* **Alternative 2:** Users must type in the exact full name of the contact to be added."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** Pros: Easy to implement. Low possibility of bugs."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** Cons: Significantly decreases usability of the application."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Aulud"
        },
        "content": "The List mechanism is facilitated by the combination of three classes `MainWindow`, `Model` and `Context`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Aulud"
        },
        "content": "`Context` is an immutable utility class that describes the nature of the current view of the app. It stores state information about the `ContextType` as well as an optional `Object` of interest. A `Context` may be instantiated either by"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* one of the factory methods `newListActivityContext` or `newListContactContext`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* invoking the constructor with either an `Activity` or `Contact` of interest"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Aulud"
        },
        "content": "The `Context` class exposes relevant getter methods `Context#getType`, `Context#getActivity` and `Context#getContact`, and thus supports contextual behaviour of other commands."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Aulud"
        },
        "content": "During execution, the List command creates the intended `Context` and updates the `Model` with it, along with the appropriate `FilteredList`. As `MainWindow` tracks both `FilteredList`, JavaFX will automatically re-render the contained card entries when the respective list undergoes structural changes."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Aulud"
        },
        "content": "The updated `ContextType` of the `Model` is then returned to the `MainWindow` UI controller via the `CommandResult`, where it is used to switch the content displayed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Given below is an example usage scenario of a user intending to view the list of activities."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Step 1. The user launches the `SplitWiser` application for the first time, which defaults to displaying the list of contacts."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Step 2. The user executes the command string `list a/` to prompt the app to display the full list of activities."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Aulud"
        },
        "content": "The following sequence diagram demonstrates the role of the respective components."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image::ViewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: representing the current context state"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* **Alternative 1 (current choice):** Creating an immutable `Context` class as a state container to store the appropriate information."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** Pros: Lightweight; context state can be easily passed between components that require access, as it is encapsulated entirely within `Context`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* **Alternative 2:** Storing the `Context` state in a designated central component, e.g. the `ModelManager`, and exposing relevant methods to other components."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** Pros: Trivial to implement."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** Cons: Tightly couples all components that require access to the context state to the central component, complicating testing."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "// tag::invitedisinvite[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d [Proposed] Invite/Disinvite feature"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "The invite/disinvite mechanism is facilitated by `Activity`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Aulud"
        },
        "content": "It extends `AddressBook` with an `ActivityBook`, stored internally as an `activityList`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "* `Activity#invite()` -- Invites a person to the activity."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "* `Activity#disinvite()` -- Disinvites a person from the activity."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "These operations are exposed in the `Activity` class as `Activity#invite()` and `Activity#disinvite()` respectively."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Given below is an example usage scenario and how the invite/disinvite mechanism behaves at each step."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Step 1. The user launches the application for the first time. The `SplitWiser` will be initialized with the initial address book and activity book state."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Step 2. The user executes `activity t/breakfast p/David` command to create an activity named breakfast in the activity book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Step 3. The user executes `invite p/Louis ...` to invite more people into the current activity. The `invite` command calls `Activity#invite()`, inviting more participants into the activity. The activityList will then be modified which is stored in the ActivityBook."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "The following sequence diagram shows how the invite operation works:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "image::InviteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "NOTE: The lifeline for `InviteCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Step 4. The user decides that inviting the person was a mistake or the particular person has not been involved in any of the expenses in the activity and decides to remove that person by executing the `disinvite` command."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Step 5. The user executes `disinvite p/Louis p/David ...` to remove participant(s) from the current activity. The `disinvite` command calls `Activity#disinvite()`, removing participants from the activity. The activityList will then be modified due to a change in participants which is stored in the ActivityBook."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "The following sequence diagram shows how the disinvite operation works:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "image::DisinviteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "NOTE: The lifeline for `DisinviteCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How invite \u0026 disinvite executes"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "* **Alternative 1 (current choice):** Contextual based invite/disinvite based on current viewed activity."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** Pros: More user-friendly."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "* **Alternative 2:** Invite/disinvite based on user specifying the activity number."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "** Cons: Have to keep retyping activity number if multiple invites/disinvites are needed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the invite/disinvite commands"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the participants ID in the activity instead of participants."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "** Cons: Have to find particular participant that matches the ID specified."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "* **Alternative 2:** Use list to store participants."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "** Cons: Harder to implement, might form same person object from the json file if not implemented properly."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "// end::invitedisinvite[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "podocarp"
        },
        "content": "* anyone who engages in group activities that involves spending"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "podocarp"
        },
        "content": "*Value proposition*: manage debts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Aulud"
        },
        "content": "[width\u003d\"90%\",cols\u003d\"10%,\u003c15%,35%,40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | add contacts| so that I can keep track of my list of contacts."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | set how much each of my contacts owe me| so that I know the amount of money each person owes me."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | set how much I owe one of my contacts| so that I know who I owe money to."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | see the details of the balances of each contact| so that I know which activity each transactions were from."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | create a group activity with multiple contacts| so that is easier for us to keep track of the group\u0027s expenditure."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | see how much each person should be paying each other at the end of the activity| so that I can avoid confusion"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | delete expenses| remove incorrect entries"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* * *` | user | delete group activities| remove activities that are over"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | specify when a contact borrowed money from me| know how long he has owed me money for."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | specify when I borrowed money from a contact| know how long I have owed money for."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | sort my contacts| filter through information."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | traveller | add expenses in other currencies | keep track of debts."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | traveller | have expenses in other currencies to be converted to a single currency | simplify my life."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | attach tags to individual expenses and activities | search more conveniently."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | tag an expense with a picture | keep electronic copies of receipts or invoices as proof."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | see all my activities in a calendar view | keep track of what has happened."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | set a recurring reminder for contacts that owes me money | know when to request people to pay back."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | set a recurring reminder for contacts I loaned from | know when to pay them back"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | add profile picture to a contact | know how they look like."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`* *` | user | export my data and import it from a different application| can sync my debt through multiple devices."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`*` | user| set up automated periodic notifications (emails, etc.) to people who owe me money | remind them to pay me back."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`*` | user| keep track of objects that I lent and borrowed from other people | remember to return them."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`*` | user| specify conditions on the loans | assure the loaned items are returned in a specified condition."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`*` | user| export the data to other format (.ics etc.)i | export the data to other applications."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`*` | traveller| create a common pool of funds to spend for large group activities| simplify tracking of common expenses"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "podocarp"
        },
        "content": "|`*` | user| extract information from a picture of a bill| save the trouble of entering expense details myself."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "(For all use cases below, the *System* is the `SplitWiser` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Use case: List contacts"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "podocarp"
        },
        "content": "1. User requests to list contacts"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "podocarp"
        },
        "content": "2. SplitWiser shows a list of contacts"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* 1a. The list of contacts is empty"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Aulud"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Use case: List activites"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Aulud"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Aulud"
        },
        "content": "1. User requests to list activities"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Aulud"
        },
        "content": "2. SplitWiser shows a list of activities"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Aulud"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* 1a. The list of activities is empty"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Use case: View an activity"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Aulud"
        },
        "content": "1. User requests to view an activity with a specific activity ID"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Aulud"
        },
        "content": "2. SplitWiser shows details of the specified activity"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "podocarp"
        },
        "content": "+"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "podocarp"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "podocarp"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "podocarp"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* 1a. No activity exists with the specified activity ID."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Aulud"
        },
        "content": "+"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Aulud"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** 1a1. SplitWiser shows an error message."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "podocarp"
        },
        "content": "+"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "podocarp"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "podocarp"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Use case: Create an activity"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "podocarp"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Aulud"
        },
        "content": "1. User requests to create an activity with a given title and participant(s)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Aulud"
        },
        "content": "2. SplitWiser creates the activity with the supplied title and no expenses"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Aulud"
        },
        "content": "3. SplitWiser adds the user and the supplied contact(s) to the activity"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Aulud"
        },
        "content": "4. SplitWiser shows details of the newly created activity"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Aulud"
        },
        "content": "+"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Aulud"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Aulud"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* 1a. User specifies one or more participants that are not found in the list of contacts"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Aulud"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Aulud"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** 1a1. SplitWiser prompts the user to [.underline]#create new contacts# for each of the missing participants"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Aulud"
        },
        "content": "+"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Aulud"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Use case: Delete contact"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Aulud"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Aulud"
        },
        "content": "1.  User requests to list contacts"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Aulud"
        },
        "content": "2.  SplitWiser shows a list of contacts"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Aulud"
        },
        "content": "3.  User requests to delete a specific contact in the list"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Aulud"
        },
        "content": "4.  SplitWiser deletes the person"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Aulud"
        },
        "content": "** 3a1. SplitWiser shows an error message."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "podocarp"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has `Java 11` or above installed."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".  Should be able to store up to 1000 contacts and activities without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".  Should run smoothly on reasonably lower spec computers."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "podocarp"
        },
        "content": "Windows, Linux, *nix, OS-X"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "podocarp"
        },
        "content": ".. Open the terminal."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "podocarp"
        },
        "content": ".. Navigate to where you saved the jar file."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "podocarp"
        },
        "content": ".. Execute the file with `java -jar \u003cname of jar\u003e` +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "podocarp": 67,
      "liakify": 11,
      "JohnNzj": 56,
      "Aulud": 93,
      "-": 408,
      "daekoon": 80
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d SplitWiser - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "By: `Vortex`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "Ever did group activities where everyone paid different amounts, and it became so troublesome and confusing to figure out how to redistribute costs evenly? Fret no more because with *SplitWiser* is here! *SplitWiser* is a free tool for friends and roommates to track bills and other shared expenses, so that everyone gets paid back, and everyone is happy."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".  Ensure you have link:https://java.com/en/download/[Java 11] or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": ".  Download the latest `SplitWiser.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for SplitWiser."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "image::minified-mockups/main.png[width\u003d\"251\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* *`list c/`* : displays list of all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* **`contact`**`n/John Doe hp/98765432` : adds a new contact named `John Doe` with mobile number `98765432` to SplitWiser."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* *`exit`* : exits and closes the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": ".  Refer to \u003c\u003cCommands\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Auto-saved data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "SplitWiser data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "There is no need to save manually - you don\u0027t have to worry about forgetting to save!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Persistent app state"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "SplitWiser also saves its application state with your data - meaning you can re-launch the app and continue where you left off!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "[[Commands]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `contact n/CONTACT_NAME`, `CONTACT_NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Parameters in square brackets are optional e.g `n/ACTIVITY_NAME [p/PERSON_1]` can be used as `n/Drinks p/John Doe` or as `n/Drinks`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Parameters with `…`​ may be supplied multiple times, including 0 times for optional parameters, e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Parameters in brackets must be supplied together - e.g. addition of expenses to an activity requires contact-expense pairs `(n/CONTACT_NAME \u0026\u0026 e/EXPENSE_AMT)`, which may be used as `p/John Doe e/50.25`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Parameters may be supplied in any order e.g. if the command specifies `n/NAME hp/PHONE_NUMBER`, `hp/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "Brings up the help dialog. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Show main screen : `main`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liakify"
        },
        "content": "Brings up the main screen which shows the aggregated amounts of debt. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liakify"
        },
        "content": "Format: `main`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d List all contacts or activities : `list`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Switches the current view to list all contacts or activities. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Argument values supplied with parameters are ignored for this command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Format: `list c/` for contacts *OR* `list a/` for activities"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d View a contact or activity : `view`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Switches the current view to show details of a contact or activity based on their ID. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Format: `view a/ACTIVITY_ID` *OR* `view c/CONTACT_ID` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `view a/1` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Views the activity with ID 1, e.g. Chalet"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `view c/2` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "views the contact with ID 2, e.g. John Smith"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Create new contact: `contact`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Creates a new contact with a name and phone number. Each contact will be assigned a contact ID automatically. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": "****"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Each contact must have a unique name."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liakify"
        },
        "content": "Format: `contact n/CONTACT_NAME hp/PHONE_NUMBER`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `contact n/John Doe hp/98765432` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Creates a new contact with name John Doe and mobile number 98765432."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Create new activity: `activity`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Creates a new activity with a title, contacts (optional) and no expenses."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* The user creating the activity will be included automatically."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Additional contacts to add to the activity can be specified by using `p/` prefix."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** Keyword matching is used to find contacts to add to the activity. Refer to \u003c\u003cFinding contacts or activities: `find`\u003e\u003e for more details."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daekoon"
        },
        "content": "** For a contact to be successfully added, given keywords must have exact 1 matching contact. Otherwise, the activity will be created without adding the contact suggested by the keywords, and warning message will be shown."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Changes the current view to this activity (as if `view a/ACTIVITY_ID` was called)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* Each activity will be assigned an activity ID automatically. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daekoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Format: `activity t/ACTIVITY_TITLE [p/PERSON ...]`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liakify"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* `activity t/Chalet p/John Doe` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Creates a new activity with title \u0027Chalet\u0027 and the user and John Doe as participants."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daekoon"
        },
        "content": "* `activity t/Breakfast p/David Li p/Bernice Yu` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daekoon"
        },
        "content": "Creates a new activity with title \u0027Breakfast\u0027. If the contact named \u0027Bernice Yu\u0027 doesn\u0027t exist, only the contact \u0027David Li\u0027 will be added in as a participant, and a warning message will be shown, stating that contact named \u0027Bernice Yu\u0027 could not be found."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Add contacts to an activity: `invite`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Adds a contact to the currently viewed activity. Multiple contacts can be added at once."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liakify"
        },
        "content": "Format: `invite p/PERSON ...`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liakify"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `invite p/John Doe p/Mary` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Adds both John Doe and Mary to the current activity."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Remove contacts from an activity: `disinvite`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Removes a contact from the currently viewed activity. Multiple contacts can be removed at once. If a contact is involved in an expense, he/she cannot be removed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liakify"
        },
        "content": "Format: `disinvite p/PERSON ...`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liakify"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `disinvite p/John Doe p/Mary` +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Removes John Doe and Mary from the current activity. If any one of them are involved in expenses, none of them will be removed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Add expenses to an activity : `expense`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liakify"
        },
        "content": "Creates a new expense with a list of contacts, an amount and an optional description, and adds it to the currently viewed activity. The first contact in the list is taken to be the person who paid for the expense, and the remaining people will be counted as owing the first person money. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liakify"
        },
        "content": "If only one contact is specified in the list, then SplitWiser will assume that all current participants in the activity are involved in this expense and thus owe this person money. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liakify"
        },
        "content": "If no activity is being viewed, the description is compulsory - a new activity will instead be created with the same title as the description (as if `activity t/ACTIVITY_NAME` was called). The expense and contact(s) will then be added to the activity. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liakify"
        },
        "content": "Format: `expense (p/PERSON e/AMOUNT_PAID) [p/PERSON ...] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liakify"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liakify"
        },
        "content": "* Exactly one expense amount must be provided."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liakify"
        },
        "content": "****"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liakify"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `expense p/John Doe e/100` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liakify"
        },
        "content": "Adds a single expense of $100 by John Doe to the currently viewed activity. If John Doe is not in the current activity, an error will occur and no expense will be created. Otherwise, all existing participants of the activity will now owe John a portion of the $100. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liakify"
        },
        "content": "If no activity is currently viewed, an error will occur as there is no description provided to use for automatic activity creation to contain this expense."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liakify"
        },
        "content": "* `expense p/Mary e/100 p/Joseph p/Silva d/Drinks` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liakify"
        },
        "content": "Adds an expense of $100 to the currently viewed activity by Mary where Joseph and Silva are involved i.e. Joseph and Silva owe Mary a portion of the $100. This expense will be named `Drinks`. If any one of the participants are not in the present activity, then an error will occur and no expense will be created. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liakify"
        },
        "content": "Alternatively, if no activity is currently viewed, an activity titled `Drinks` will be created to contain this expense. Mary, Joseph and Silva will then be added to the activity."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Edit an existing contact or activity : `edit`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liakify"
        },
        "content": "Edits some details of the current contact or activity in view. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Format: `edit [n/NAME] [hp/PHONE] ...` for contacts OR `edit [t/ACTIVITY_TITLE] ...` for activities."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "liakify"
        },
        "content": "* Expenses cannot be edited."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "liakify"
        },
        "content": "* `edit hp/999` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Edits the phone number of the current contact in view to `999`. No changes are made if a contact is not being viewed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `edit t/BBQ` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Edits the title of the current activity in view to `BBQ`. No changes are made if an activity is not being viewed."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Finding contacts or activities: `find`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Finds contacts or activities whose name or title respectively contain *any* of the given keywords."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Format: `find KEYWORD ...`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* Only the name of contacts and title of activities are searched."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "liakify"
        },
        "content": "* Contacts and activities matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Returns contacts (e.g. `john` and `John Doe`) and activities (e.g. `John birthday party`)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Returns any contact or activity whose name or title contains the word `Betsy`, `Tim`, or `John`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "liakify"
        },
        "content": "\u003d\u003d\u003d Deleting a contact, activity or expense : `delete`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Deletes the specified index from the current list view. Delete can also be used to delete all entries by not specifying any index, but the user will be prompted to confirm this action."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Aulud"
        },
        "content": "If viewing a contact instead, the contact will be deleted."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "liakify"
        },
        "content": "If viewing an activity instead, it will delete an expense* by index. Not specifying any index will result in the current activity being deleted. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Multiple entries can be deleted at once."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "liakify"
        },
        "content": "Format: `delete [INDEX] ...`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "liakify"
        },
        "content": "* Deletes the entry at the specified `INDEX`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "liakify"
        },
        "content": "* The index refers to the index number shown in the displayed contact or activity or expense list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "liakify"
        },
        "content": "* *Expenses cannot be completely deleted. It will instead be struck off (but still visible) in the activity view, and moved to the bottom of the list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "liakify"
        },
        "content": "* `delete 2` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Aulud"
        },
        "content": "If viewing the list of contacts, deletes the 2nd person by index. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Aulud"
        },
        "content": "If viewing a contact, deletes the contact. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Aulud"
        },
        "content": "If viewing the list of activities, deletes the 2nd activity by index. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aulud"
        },
        "content": "If viewing an activity, strikes off (soft-deletes) the 2nd expense by index."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Deletes the 1st entry (either a contact or activity) in the results of the `find` command."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Assign an activity as a sub-activity: `assign` (*v2.0 only*)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Assigns an activity as a sub-activity of the currently viewed activity. If no activity is currently being viewed, or an invalid activity ID is provided, no change is made."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Multiple activities can be assigned at once."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Format: `assign a/ACTIVITY_ID ...`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `assign 3 5`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Aulud"
        },
        "content": "If viewing an activity with title \u0027Family trip\u0027, assigns the activities with IDs 3 and 5 as sub-activities of \u0027Family trip\u0027. Otherwise does nothing."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003d\u003d\u003d Update an activity as resolved: `close` (*v2.0 only*)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Marks an activity as resolved, clearing (removing) the debts within from each contact and the aggregated debt on the main screen."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Multiple activities can be resolved at once."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Format: `close a/ACTIVITY_ID ...`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Aulud"
        },
        "content": "* `close 3 4` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Marks the activities with activity ID 3 and 4 as resolved, updating the aggregated debt of their participants."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Aulud"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Aulud"
        },
        "content": "*A*: Install the application on the other computer and overwrite the empty data file it creates with the data file contained in your current SplitWiser folder."
      }
    ],
    "authorContributionMap": {
      "liakify": 79,
      "Aulud": 89,
      "-": 105,
      "daekoon": 12
    }
  },
  {
    "path": "docs/diagrams/DisinviteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":DisinviteCommandParser\" as DisinviteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \"d:DisinviteCommand\" as DisinviteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \"c:Context\" as Context MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \"a:Activity\" as Activity MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "[-\u003e LogicManager : execute(\"disinvite p/ben\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"disinvite p/ben\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "create DisinviteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "AddressBookParser -\u003e DisinviteCommandParser : DisinviteCommandParser()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate DisinviteCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate DisinviteCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "AddressBookParser -\u003e DisinviteCommandParser : parse(\"p/ben\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate DisinviteCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "create DisinviteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommandParser -\u003e DisinviteCommand : DisinviteCommand(\"ben\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate DisinviteCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommand --\u003e DisinviteCommandParser : d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate DisinviteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommandParser --\u003e AddressBookParser : d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate DisinviteCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "destroy DisinviteCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "AddressBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "LogicManager -\u003e DisinviteCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate DisinviteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommand -\u003e Model : getContext()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Model--\u003e DisinviteCommand : d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommand -\u003e Context : getActivity()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate Context"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Context --\u003e DisinviteCommand : a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate Context"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommand -\u003e Activity : disinvite(\"ben\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate Activity"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Activity --\u003e DisinviteCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate Activity"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "CommandResult --\u003e DisinviteCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "DisinviteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate DisinviteCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JohnNzj": 84
    }
  },
  {
    "path": "docs/diagrams/InviteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":InviteCommandParser\" as InviteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \"i:InviteCommand\" as InviteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \"c:Context\" as Context MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "participant \"a:Activity\" as Activity MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "[-\u003e LogicManager : execute(\"invite p/ben\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\"invite p/ben\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "create InviteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "AddressBookParser -\u003e InviteCommandParser : InviteCommandParser()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate InviteCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommandParser --\u003e AddressBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate InviteCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "AddressBookParser -\u003e InviteCommandParser : parse(\"p/ben\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate InviteCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "create InviteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommandParser -\u003e InviteCommand : InviteCommand(\"ben\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate InviteCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommand --\u003e InviteCommandParser : i"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate InviteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommandParser --\u003e AddressBookParser : i"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate InviteCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "destroy InviteCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "AddressBookParser --\u003e LogicManager : i"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "LogicManager -\u003e InviteCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate InviteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommand -\u003e Model : getContext()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Model--\u003e InviteCommand : c"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommand -\u003e Context : getActivity()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate Context"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Context --\u003e InviteCommand : a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate Context"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommand -\u003e Activity : invite(\"ben\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate Activity"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "Activity --\u003e InviteCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate Activity"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "CommandResult --\u003e InviteCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "InviteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate InviteCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "JohnNzj": 84
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ReadOnlyAddressBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class AddressBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyAddressBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "Class InternalState"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "class ActivityBook"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "class Context"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "Package Activity {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "Class Activity"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "Class Title"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook .up.|\u003e ReadOnlyAddressBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o--\u003e \"1\" AddressBook"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "ModelManager o-right-\u003e \"1\" InternalState"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": "ModelManager o-right-\u003e \"1\" Context"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "ModelManager o--\u003e \"1\" ActivityBook"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "ActivityBook *--\u003e \"*\" Activity"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": "Activity *-right-\u003e \"1\" Title"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "Activity *-down-\u003e \"*\" Expense"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "Expense *--\u003e \"1\" Amount"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "Context *--\u003e \"0..1\" Activity"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": "Context *--\u003e \"0..1\" Person"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "liakify": 21,
      "-": 56
    }
  },
  {
    "path": "docs/diagrams/ViewSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "actor \"User\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \"rd:ResultDisplay\" as ResultDisplay UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \"lcp:ListCommandParser\" as ListCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \"lc:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \"cr:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \"Context\" as ContextFactory MODEL_COLOR"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \"ct:Context\" as Context MODEL_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "participant \"flp:FilteredList\" as FilteredList MODEL_COLOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "end box"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "User -\u003e MainWindow : executeCommand(\\n\"list a/\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "MainWindow -\u003e LogicManager : execute(\"list a/\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(\\n\"list a/\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "create ListCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "AddressBookParser -\u003e ListCommandParser : ListCommandParser()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate ListCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommandParser --\u003e AddressBookParser : lcp"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate ListCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "AddressBookParser -\u003e ListCommandParser : parse(\"a/\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate ListCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommandParser -\u003e ListCommandParser : onePrefixPresent(argMultimap,\\nPREFIX_CONTACT, PREFIX_ACTIVITY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate ListCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommandParser --\u003e ListCommandParser : true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate ListCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommandParser -\u003e ListCommand : ListCommand(ACTIVITY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommand --\u003e ListCommandParser : lc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommandParser --\u003e AddressBookParser : lc"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate ListCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommandParser -[hidden]-\u003e AddressBookParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "destroy ListCommandParser"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "AddressBookParser --\u003e LogicManager : lc"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "LogicManager -\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommand -\u003e ContextFactory : Context.newListActivityContext()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate ContextFactory"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "create Context"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ContextFactory -\u003e Context : Context(LIST_ACTIVITY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate Context"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Context --\u003e ContextFactory : ct"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate Context"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ContextFactory --\u003e ListCommand : ct"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate ContextFactory"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommand -\u003e Model : setContext(ct)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommand -\u003e Model : updatedFilteredActivityList(PREDICATE_SHOW_ALL_ENTRIES)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Model -\u003e FilteredList : setPredicate(\\nPREDICATE_SHOW\\n_ALL_ENTRIES)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate FilteredList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "FilteredList --\u003e Model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate FilteredList"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommand -\u003e CommandResult : CommandResult(...,\\nLIST_ACTIVITY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "CommandResult --\u003e ListCommand : cr"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommand --\u003e LogicManager : cr"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ListCommand -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": "destroy ListCommand"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "LogicManager --\u003e MainWindow : cr"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "MainWindow -\u003e ResultDisplay : setFeedbackToUser(...)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate ResultDisplay"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aulud"
        },
        "content": "ResultDisplay --\u003e MainWindow"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate ResultDisplay"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aulud"
        },
        "content": "MainWindow -\u003e CommandResult : getUpdatedContext()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aulud"
        },
        "content": "CommandResult --\u003e MainWindow : Optional\u003cLIST_ACTIVITY\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aulud"
        },
        "content": "MainWindow -\u003e MainWindow : contextSwitch(LIST_ACTIVITY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aulud"
        },
        "content": "MainWindow --\u003e MainWindow"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aulud"
        },
        "content": "MainWindow --\u003e User : cr"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aulud"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Aulud": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.storage.ActivityBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.storage.InternalStateStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.storage.JsonActivityBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.storage.JsonInternalStateStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            config.getUserPrefsFilePath()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalStateStorage internalStateStorage \u003d new JsonInternalStateStorage("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            userPrefs.getInternalStateFilePath()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState internalState \u003d initState(internalStateStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ActivityBookStorage activityBookStorage \u003d new JsonActivityBookStorage(userPrefs.getActivityBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            userPrefs.getAddressBookFilePath()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        storage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            new StorageManager("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                addressBookStorage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                userPrefsStorage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                internalStateStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                activityBookStorage"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, internalState, activityBookStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Model initModelManager("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Storage storage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        InternalState internalState,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBookStorage activityBookStorage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Optional\u003cActivityBook\u003e activityBookOptional;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook initialActivityBook;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                logger.info("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    \"Data file not found. Will be starting with a sample AddressBook\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            initialData \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                addressBookOptional.orElseGet("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    SampleDataUtil::getSampleAddressBook"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Update initial state after initialising sample list of contacts"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            internalState.updateInternalState();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Data file not in the correct format. Will be starting with an empty AddressBook\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty AddressBook\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            activityBookOptional \u003d activityBookStorage.readActivityBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            if (!activityBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty ActivityBook\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            initialActivityBook \u003d activityBookOptional.orElseGet(() -\u003e new ActivityBook());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ActivityBook\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            initialActivityBook \u003d new ActivityBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ActivityBook\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            initialActivityBook \u003d new ActivityBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return new ModelManager(initialData, userPrefs, internalState, initialActivityBook);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                configFilePathUsed"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Config file at \" + configFilePathUsed"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + \" is not in the correct format. \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + \"Using default config properties\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Failed to save config file : \" + StringUtil.getDetails(e)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Returns a {@code InternalState} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * or a new {@code InternalState} with default configuration if errors occur when"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * reading from the file."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    protected InternalState initState(InternalStateStorage storage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Path stateFilePath \u003d storage.getInternalStateFilePath();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        logger.info(\"Using state file : \" + stateFilePath);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState initState;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Consumer\u003cInternalState\u003e writeFile \u003d (state) -\u003e {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            //Update state file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                storage.saveInternalState(state);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                logger.warning("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    \"Failed to save state file : \" + StringUtil.getDetails(e)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                );"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        };"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            Optional\u003cInternalState\u003e stateOptional \u003d storage.readInternalState();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            initState \u003d stateOptional.orElse(new InternalState());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"InternalState file at \" + stateFilePath"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + \" is not in the correct format. \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            initState \u003d new InternalState();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            writeFile.accept(initState);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            // TODO: Reset the program here"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Problem while reading from the file. Program execution undefined.\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            initState \u003d new InternalState();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            writeFile.accept(initState);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        initState.applyInternalState();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return initState;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    * reading from the file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty AddressBook\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Failed to save config file : \" + StringUtil.getDetails(e)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            storage.saveInternalState(model.getInternalState());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            logger.severe("
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \"Failed to save preferences \" + StringUtil.getDetails(e)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            );"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 105,
      "Aulud": 4,
      "-": 164,
      "daekoon": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700.0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 512.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns a new {@code GuiSettings} with the dimensions of the app window reset to their"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * default values, and the coordinates of the input {@code GuiSettings}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @param settings An instance of {@code GuiSettings} to reset."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static GuiSettings resetWindow(GuiSettings settings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (settings.getWindowCoordinates() \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new GuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Point coordinates \u003d settings.getWindowCoordinates();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int x \u003d (int) Math.floor(coordinates.getX() + 0.5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int y \u003d (int) Math.floor(coordinates.getY() + 0.5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new GuiSettings(DEFAULT_WIDTH, DEFAULT_HEIGHT, x, y);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 19,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandSubType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Represents the different command sub-types for GUI-related commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public enum CommandSubType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    ACTIVITY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    CONTACT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of activities */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Returns the user prefs\u0027 activity book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    Path getActivityBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 4,
      "-": 50,
      "daekoon": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            storage.saveActivityBook(model.getActivityBook());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return model.getFilteredActivityList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path getActivityBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return model.getActivityBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 6,
      "-": 78,
      "daekoon": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ActivityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Command to create a new Activity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new Activity.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"[\" + PREFIX_PARTICIPANT + \"PARTICIPANT]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"Example: activity t/Mala dinner p/Kaedoon p/Giak Lhee p/Veken\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            \"%s successfully created with following participants:\\n%s\\nWarnings:\\n%s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String WARNING_SEARCH_RESULTS \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            \"Unable to add person with search term \\\"%s\\\", as there were %d matches found.\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String WARNING_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            \"Person with name %s already added.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private final List\u003cString\u003e participants;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param title Title of the activity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param participants List of the names of participants"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityCommand(Title title, List\u003cString\u003e participants) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireAllNonNull(title, participants);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        StringBuilder warningMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        StringBuilder successMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cPerson\u003e findResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cInteger\u003e participantIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Person toAddPerson;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Integer id;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // This loop adds participants one by one using keyword matching."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // For each participant argument passed through, the argument is broken up into keywords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // which are then used to search through the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Participant will only be added if the keyword has a unique match."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        for (String searchTerm : participants) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            keywords \u003d Arrays.asList(searchTerm.split(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liakify"
        },
        "content": "            NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liakify"
        },
        "content": "            findResult \u003d model.findPersonAll(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            // Non-unique match (0 or more than 1) - this argument is skipped"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            if (findResult.size() !\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                updateWarningNotSingleMatch(warningMessage, searchTerm, findResult.size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            toAddPerson \u003d findResult.get(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            id \u003d toAddPerson.getPrimaryKey();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            // Person already in this activity - this person is not added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            if (participantIds.contains(id)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                updateWarningPersonInActivity(warningMessage, toAddPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            participantIds.add(id);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            updateSuccessMessage(successMessage, toAddPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity toAdd \u003d new Activity(title, participantIds.toArray(new Integer[participantIds.size()]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        model.addActivity(toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.setContext(new Context(toAdd));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.updateFilteredPersonList(x -\u003e toAdd.getParticipantIds().contains(x.getPrimaryKey()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, successMessage, warningMessage));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        //short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (!(other instanceof ActivityCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityCommand e \u003d (ActivityCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return title.equals(e.title)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \u0026\u0026 participants.equals(e.participants);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return Objects.hash(title, participants);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param stringBuilder StringBuilder that contains the success message"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param person Person that got just added"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private void updateSuccessMessage(StringBuilder stringBuilder, Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (stringBuilder.length() \u003e 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            stringBuilder.append(\", \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        stringBuilder.append(person.getName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param stringBuilder StringBuilder that contains the warning message"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param searchTerm Search term that was used to find a person"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param matchCount Number of valid matches"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private void updateWarningNotSingleMatch(StringBuilder stringBuilder, String searchTerm, int matchCount) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        stringBuilder.append(String.format(WARNING_SEARCH_RESULTS, searchTerm, matchCount));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param stringBuilder StringBuilder that contains the warning message"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param person Person object that attempted to be added in but failed as it is already in the participant list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private void updateWarningPersonInActivity(StringBuilder stringBuilder, Person person) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        stringBuilder.append(String.format(WARNING_DUPLICATE_PERSON, person.getName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 9,
      "liakify": 3,
      "Aulud": 9,
      "daekoon": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Adds a new contact to SplitWiser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"contact\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a contact to the address book.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New contact added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in the address book\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 5,
      "Aulud": 2,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Clears all contacts from SplitWiser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All contacts have been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.ContextType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /** Type of updated context - empty if context was not changed by executing this command. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private final Optional\u003cContextType\u003e newContext;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields, for commands that does not change"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * the current {@code Context}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.newContext \u003d Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Constructs a new {@code CommandResult} with the specified fields, for commands that change the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * current {@code Context} of the application. All other fields are set to their default values."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @param feedbackToUser {@code String} output from executing the command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @param newContext the new {@code ContextType} after executing the command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public CommandResult(String feedbackToUser, ContextType newContext) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireNonNull(newContext);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.newContext \u003d Optional.of(newContext);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * and other fields set to their default values."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Optional\u003cContextType\u003e getUpdatedContext() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return newContext;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 newContext.equals(otherCommandResult.getUpdatedContext());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, newContext);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 31,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Deletes the contact identified by its display index from SplitWiser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Edits the details of an existing contact in SplitWiser."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 3,
      "-": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting SplitWiser! Goodbye...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.ContextType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.exceptions.PersonNotInActivityException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Command to create a new Expense."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class ExpenseCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expense\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds expenses to the current activity. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + \"The first name to appear will pay for everyone else in the list that follows. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + \"If there is no list provided, it will be assume that everyone in the activity is involved. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + PREFIX_PARTICIPANT + \"NAME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + PREFIX_EXPENSE + \"AMOUNT \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + \"[\" + PREFIX_PARTICIPANT + \"NAME  ] ... \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION ]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + PREFIX_PARTICIPANT + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + PREFIX_EXPENSE + \"10.0 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Bubble tea\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%d expense(s) successfully created as follows:\\n%s\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String MESSAGE_EXPENSE \u003d \"%s paid %s.\\n  Description: %s\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String MESSAGE_NON_UNIQUE_SEARCH_RESULT \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \"Participant search term \\\"%s\\\" has no unique search result in the current context!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String MESSAGE_MISSING_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \"Creating an expense outside an activity requires a description!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String MESSAGE_MISSING_PERSON_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \"At least one person is not found in the activity\\nNo expense was added.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final List\u003cString\u003e persons;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public ExpenseCommand(List\u003cString\u003e persons, Amount amount, String description) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        requireAllNonNull(persons, amount, description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.persons \u003d persons;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cPerson\u003e searchScope;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Activity activity;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Contextual behaviour"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (model.getContext().getType() !\u003d ContextType.VIEW_ACTIVITY) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (!Title.isValidTitle(description)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new CommandException(MESSAGE_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liakify"
        },
        "content": "            activity \u003d new Activity(new Title(description));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": "            activity \u003d model.getContext().getActivity().get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            // TODO: Use the new view thingy in Activity class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liakify"
        },
        "content": "            model.updateFilteredPersonList(x -\u003e activity.getParticipantIds().contains(x.getPrimaryKey()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liakify"
        },
        "content": "        searchScope \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // This loop adds expenses one by one using keyword matching."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // For each participant argument passed through, the argument is broken up into keywords"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // which are then used to search through the searchScope (context dependent)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Expenses will only be added if every keyword string has a unique match."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liakify"
        },
        "content": "        StringBuilder successMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cPerson\u003e findResult;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int payingId \u003d -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int[] involvedArr \u003d new int[persons.size() - 1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liakify"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liakify"
        },
        "content": "            keywords \u003d Arrays.asList(persons.get(i).split(\" \"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liakify"
        },
        "content": "            NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liakify"
        },
        "content": "            findResult \u003d searchScope.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (findResult.size() !\u003d 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liakify"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NON_UNIQUE_SEARCH_RESULT, persons.get(i)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liakify"
        },
        "content": "            Person person \u003d findResult.get(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                payingId \u003d person.getPrimaryKey();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                involvedArr[i - 1] \u003d person.getPrimaryKey();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            successMessage.append(String.format(MESSAGE_EXPENSE, person.getName(), amount, description));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liakify"
        },
        "content": "            // Contextual behaviour"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (model.getContext().getType() !\u003d ContextType.VIEW_ACTIVITY) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                if (!activity.hasPerson(person.getPrimaryKey())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                    activity.invite(person.getPrimaryKey());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            activity.addExpense(new Expense(payingId, amount, description, involvedArr));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (PersonNotInActivityException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_PERSON_DESCRIPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Contextual behaviour"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (model.getContext().getType() !\u003d ContextType.VIEW_ACTIVITY) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liakify"
        },
        "content": "            model.addActivity(activity);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, persons.size(), successMessage.toString()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (!(other instanceof ExpenseCommand)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ExpenseCommand e \u003d (ExpenseCommand) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return persons.equals(e.persons)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \u0026\u0026 amount.equals(e.amount)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \u0026\u0026 description.equals(e.description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 40,
      "liakify": 106,
      "Aulud": 5,
      "daekoon": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Finds and lists all contacts in SplitWiser whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.CommandSubType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.ContextType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Updates the GUI to list all entries of a specified type to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \": Switches the current view to list all contacts or activities. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"If an argument is supplied with a parameter, it is ignored.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"Parameters: \" + PREFIX_CONTACT + \" OR \" + PREFIX_ACTIVITY + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"Example: list \" + PREFIX_CONTACT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_LIST_TYPE \u003d \"List command has unknown type!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private final CommandSubType type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ListCommand(CommandSubType type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (this.type) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case CONTACT:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            model.setContext(Context.newListContactContext());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, \"contacts\"), ContextType.LIST_CONTACT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case ACTIVITY:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            model.setContext(Context.newListActivityContext());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, \"activities\"), ContextType.LIST_ACTIVITY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new CommandException(MESSAGE_UNKNOWN_LIST_TYPE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 type.equals(((ListCommand) other).type)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 42,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ActivityCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.logic.commands.ActivityCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Parses input arguments and creates a new {@code ActivityCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityCommandParser implements Parser\u003cActivityCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of an {@code ActivityCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * and returns an {@code ActivityCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     *                        or has missing compulsory arguments."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_PARTICIPANT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        List\u003cString\u003e participants \u003d argMultimap.getAllValues(PREFIX_PARTICIPANT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return new ActivityCommand(title, participants);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 4,
      "daekoon": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Parses input arguments and creates a new {@code AddCommand} object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddCommand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * and returns an {@code AddCommand} object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                argMultimap.getValue(PREFIX_EMAIL));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                argMultimap.getValue(PREFIX_ADDRESS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 5,
      "Aulud": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.logic.commands.ActivityCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.logic.commands.ExpenseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        case ActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return new ActivityCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liakify"
        },
        "content": "        case ExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return new ExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 4,
      "Aulud": 1,
      "-": 75,
      "daekoon": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final Prefix PREFIX_EXPENSE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final Prefix PREFIX_ACTIVITY \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final Prefix PREFIX_PARTICIPANT \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 2,
      "Aulud": 3,
      "-": 16,
      "daekoon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Parses input arguments and creates a new {@code DeleteCommand} object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a {@code DeleteCommand}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * and returns a {@code DeleteCommand} object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Parses input arguments and creates a new {@code EditCommand} object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of an {@code EditCommand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * and returns an {@code EditCommand} object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 2,
      "Aulud": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.logic.commands.ExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Parses input arguments and creates a new ExpenseCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class ExpenseCommandParser implements Parser\u003cExpenseCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpenseCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * and returns an ExpenseCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public ExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PARTICIPANT, PREFIX_EXPENSE, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PARTICIPANT, PREFIX_EXPENSE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cString\u003e persons \u003d argMultimap.getAllValues(PREFIX_PARTICIPANT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cAmount\u003e amounts \u003d ParserUtil.parseAmounts(argMultimap.getAllValues(PREFIX_EXPENSE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (amounts.size() !\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return new ExpenseCommand(persons, amounts.get(0), description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 4,
      "liakify": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Parses input arguments and creates a new {@code FindCommand} object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a {@code FindCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * and returns a {@code FindCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.CommandSubType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Parses input arguments and creates a new {@code ListCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a {@code ListCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * and returns a {@code ListCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *                        or has missing compulsory arguments."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CONTACT, PREFIX_ACTIVITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (!onePrefixPresent(argMultimap, PREFIX_CONTACT, PREFIX_ACTIVITY)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTIVITY).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ListCommand(CommandSubType.ACTIVITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ListCommand(CommandSubType.CONTACT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns true if exactly one the prefixes contains a non-empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static boolean onePrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                .filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                .count() \u003d\u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static Address parseAddress(Optional\u003cString\u003e address) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (!address.isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            return new Address(\"no address provided\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        String trimmedAddress \u003d address.get().trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static Email parseEmail(Optional\u003cString\u003e email) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (!email.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            return new Email(\"no@email.provided\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        String trimmedEmail \u003d email.get().trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liakify"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liakify"
        },
        "content": "        double value;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liakify"
        },
        "content": "            value \u003d Double.parseDouble(trimmedAmount);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (!Amount.isValidAmount(Double.parseDouble(amount))) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return new Amount(value);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Parses {@code List\u003cString\u003e amounts} into a {@code List\u003cAmount\u003e}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static List\u003cAmount\u003e parseAmounts(List\u003cString\u003e amounts) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(amounts);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liakify"
        },
        "content": "        final ArrayList\u003cAmount\u003e amountList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liakify"
        },
        "content": "        for (String amount : amounts) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liakify"
        },
        "content": "            amountList.add(parseAmount(amount));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return amountList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Parses a {@code String description}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static String parseDescription(String description) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return description.trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 11,
      "liakify": 45,
      "-": 118,
      "daekoon": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ActivityBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Wrapper for all the activities stored by this application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ActivityBook implements ReadOnlyActivityBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private final ObservableList\u003cActivity\u003e activityList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private final ObservableList\u003cActivity\u003e unmodifiableActivityList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            FXCollections.unmodifiableObservableList(activityList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ActivityBook() { }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Creates an ActivityBook using the Activities in the {@code previousActivityBook}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBook(ActivityBook previousActivityBook) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        activityList.addAll(previousActivityBook.getActivityList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d List overwrite operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Returns true if an activity with the same primary key as {@code primaryKey} exists in the activity book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public boolean hasPrimaryKey(int primaryKey) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (Activity activity : activityList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (activity.getPrimaryKey() \u003d\u003d primaryKey) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Replaces the contents of the activity list with {@code activityList}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityList.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityList.addAll(activities);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Resets the existing data of this {@code ActivityBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void resetData(ActivityBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        setActivities(newData.getActivityList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Activity-level operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Adds an activity to the activity book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void addActivity(Activity a) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireNonNull(a);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityList.add(a);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Removes {@code key} from this {@code ActivityBook}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * {@code key} must exist in the activity book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (!activityList.remove(key)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * {@code target} must exist in the activity book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int index \u003d activityList.indexOf(target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityList.set(index, editedActivity);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Utility methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityList.size() + \" activities\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns the backing list of activities as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return unmodifiableActivityList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (other !\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return other instanceof ActivityBook"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                    \u0026\u0026 activityList.equals(((ActivityBook) other).activityList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 12,
      "Aulud": 30,
      "daekoon": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Finds Person objects with matching keywords, returning all matches in an ArrayList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ArrayList\u003cPerson\u003e findPerson(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cPerson\u003e matches \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liakify"
        },
        "content": "        for (Person person : persons.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": "            if (predicate.test(person)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": "                matches.add(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liakify"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Finds Person objects with matching keywords, returning all matches in an ArrayList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public ArrayList\u003cPerson\u003e findPerson(NameContainsAllKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e matches \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        for (Person person : persons.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            if (predicate.test(person)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                matches.add(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Returns true if a person with the same primary key as {@code primaryKey} exists in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public boolean hasPrimaryKey(int primaryKey) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (person.getPrimaryKey() \u003d\u003d primaryKey) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 10,
      "liakify": 15,
      "-": 120,
      "daekoon": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Context.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Represents an immutable application context."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class Context {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final Optional\u003cObject\u003e object;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private final ContextType type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Default constructor where context type is MAIN."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "    Context() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.object \u003d Optional.empty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.type \u003d ContextType.MAIN;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Context(ContextType type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.object \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Constructor for a VIEW_ACTIVITY context."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Context(Activity activity) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "        object \u003d Optional.ofNullable(activity);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        type \u003d ContextType.VIEW_ACTIVITY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Constructor for a VIEW_CONTACT context."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "    Context(Person person) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "        object \u003d Optional.ofNullable(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        type \u003d ContextType.VIEW_CONTACT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Factory constructor for a LIST_ACTIVITY context."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Context newListActivityContext() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new Context(ContextType.LIST_ACTIVITY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Factory constructor for a LIST_CONTACT context."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Context newListContactContext() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new Context(ContextType.LIST_CONTACT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ContextType getType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Optional\u003cActivity\u003e getActivity() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return object.filter(x -\u003e type \u003d\u003d ContextType.VIEW_ACTIVITY).map(x-\u003e(Activity) x);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Optional\u003cPerson\u003e getContact() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return object.filter(x -\u003e type \u003d\u003d ContextType.VIEW_CONTACT).map(x-\u003e(Person) x);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (!(other instanceof Context)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Context con \u003d (Context) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.type \u003d\u003d con.type"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 this.getActivity().equals(con.getActivity())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 this.getContact().equals(con.getContact());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 59,
      "Aulud": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ContextType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Represents the various types of contexts that can exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public enum ContextType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    MAIN,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    VIEW_CONTACT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    VIEW_ACTIVITY,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    LIST_CONTACT,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    LIST_ACTIVITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InternalState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "podocarp"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "podocarp"
        },
        "content": "* This class holds the actual state of the application.*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "podocarp"
        },
        "content": "public final class InternalState {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private int personPriKeyCnt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private int activityPriKeyCnt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public InternalState() {}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public InternalState(InternalState state) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        updateInternalState(state);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        applyInternalState();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Applies all the settings in this class to the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void applyInternalState() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Person.setPrimaryKeyCounter(personPriKeyCnt);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity.setPrimaryKeyCounter(activityPriKeyCnt);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Copies values over from some other state. Useful for grabbing values"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * from disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * @param state The InternalState to copy values from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void updateInternalState(InternalState state) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        personPriKeyCnt \u003d state.personPriKeyCnt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        activityPriKeyCnt \u003d state.activityPriKeyCnt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Collects the internal state from the various sources it is supposed to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * track."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void updateInternalState() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        personPriKeyCnt \u003d Person.getPrimaryKeyCounter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        activityPriKeyCnt \u003d Activity.getPrimaryKeyCounter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (!(other instanceof InternalState)) { //this handles null as well."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState o \u003d (InternalState) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return personPriKeyCnt \u003d\u003d o.personPriKeyCnt"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            \u0026\u0026 activityPriKeyCnt \u003d\u003d o.activityPriKeyCnt;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    Predicate\u003cObject\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Replaces internal state with the state in {@code internalState}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    void setInternalState(InternalState internalState);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Gets the current internal state."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    InternalState getInternalState();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Replaces the current model\u0027s context with the given {@code context}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    void setContext(Context context);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns the current model\u0027s context."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    Context getContext();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Sets the user prefs\u0027 activity book file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    void setActivityBookFilePath(Path activityBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "       Finds Person objects with matching keywords, returning matches in ArrayList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liakify"
        },
        "content": "    ArrayList\u003cPerson\u003e findPersonAny(NameContainsKeywordsPredicate predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liakify"
        },
        "content": "     Finds Person objects with names matching all keywords, returning matches in ArrayList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liakify"
        },
        "content": "    ArrayList\u003cPerson\u003e findPersonAll(NameContainsAllKeywordsPredicate predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Returns the user prefs\u0027 activity book file path."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    Path getActivityBookFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Replaces activity book data with the data in {@code activityBook}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    void setActivityBook(ActivityBook activityBook);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /** Returns the ActivityBook */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    ActivityBook getActivityBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Deletes the given activity."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * The activity must exist in the activity book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    void deleteActivity(Activity target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    void addActivity(Activity activity);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Replaces the given activity {@code target} with {@code editedActivity}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * {@code target} must exist in the activity book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    void setActivity(Activity target, Activity editedActivity);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list for GUI purposes."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Updates the filtered person list to use the {@code Person} filter specified by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003c? super Person\u003e predicate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns an unmodifiable view of the filtered activity list for GUI purposes."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Updates the filtered activity list to use the {@code Activity} filter specified by"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * {@code predicate}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003c? super Activity\u003e predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 10,
      "liakify": 13,
      "Aulud": 22,
      "-": 85,
      "daekoon": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private final ActivityBook activityBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final InternalState internalState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Lists of person or activity entries to display"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredActivities;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Describes the nature of the content currently being displayed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private Context context;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs, internalState and activityBook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ModelManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            InternalState internalState,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            ActivityBook activityBook) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, activityBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.activityBook \u003d new ActivityBook(activityBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.internalState \u003d new InternalState(internalState);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003cPerson\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        filteredActivities \u003d new FilteredList\u003cActivity\u003e(this.activityBook.getActivityList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "        context \u003d new Context();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internal model state \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void setInternalState(InternalState internalState) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireNonNull(internalState);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.internalState.updateInternalState(internalState);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public InternalState getInternalState() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Update before returning internal state"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        internalState.updateInternalState();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return internalState;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Context \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void setContext(Context context) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.context \u003d context;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Context getContext() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return context;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivityBookFilePath(Path activityBookFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(activityBookFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        userPrefs.setActivityBookFilePath(activityBookFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public ArrayList\u003cPerson\u003e findPersonAny(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liakify"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return addressBook.findPerson(predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public ArrayList\u003cPerson\u003e findPersonAll(NameContainsAllKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return addressBook.findPerson(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path getActivityBookFilePath() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return userPrefs.getActivityBookFilePath();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivityBook(ActivityBook activityBook) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.activityBook.resetData(activityBook);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBook getActivityBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityBook;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook.removeActivity(target);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook.addActivity(activity);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003c? super Person\u003e predicate) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Activity List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Activity} backed by the internal list of"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * {@code versionedActivityBook}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return filteredActivities;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003c? super Activity\u003e predicate) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        filteredActivities.setPredicate(predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Overridden Java methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "liakify"
        },
        "content": "                \u0026\u0026 activityBook.equals(other.activityBook)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \u0026\u0026 internalState.equals(other.internalState)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 context.equals(other.context)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 filteredActivities.equals(other.filteredActivities);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 8,
      "liakify": 17,
      "Aulud": 51,
      "-": 142,
      "daekoon": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyActivityBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Unmodifiable view of an activity book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public interface ReadOnlyActivityBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Returns an unmodifiable view of the list of activities."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * This list will not contain any activities with duplicate primary keys."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivityList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    Path getActivityBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    Path getInternalStateFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "-": 16,
      "daekoon": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Path activityBookFilePath \u003d Paths.get(\"data\" , \"activitybook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private Path internalStateFilePath \u003d Paths.get(\"data\", \"internalstate.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public UserPrefs() {};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        setActivityBookFilePath(newUserPrefs.getActivityBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        setInternalStateFilePath(newUserPrefs.getInternalStateFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Path getInternalStateFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return internalStateFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path getActivityBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivityBookFilePath(Path activityBookFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(activityBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.activityBookFilePath \u003d activityBookFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void setInternalStateFilePath(Path internalStateFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        requireNonNull(internalStateFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.internalStateFilePath \u003d internalStateFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \u0026\u0026 activityBookFilePath.equals(o.activityBookFilePath)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                \u0026\u0026 internalStateFilePath.equals(o.internalStateFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        sb.append(\"\\nActivity data file location: \" + activityBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        sb.append(\"\\nAddress data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        sb.append(\"\\nState data file location : \" + internalStateFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 13,
      "-": 82,
      "daekoon": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Activity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.exceptions.PersonNotInActivityException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Represents an Activity class containing participants ID and expenses."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "public class Activity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static int primaryKeyCounter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final int primaryKey;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final ArrayList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // Id, Balance, Active arrays are all supposed to be one-to-one."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final ArrayList\u003cInteger\u003e participantIds;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final ArrayList\u003cBoolean\u003e participantActive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final ArrayList\u003cDouble\u003e participantBalances;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // A dictionary mapping id to position in participantIds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final HashMap\u003cInteger, Integer\u003e idDict;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // Each [i][j] entry with value E means i owes j -E amount."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // The actual personid has to be obtained from the id array, and i, j just"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // represent the indices in that array where you can find them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final ArrayList\u003cArrayList\u003cDouble\u003e\u003e transferMatrix;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final ArrayList\u003cArrayList\u003cDouble\u003e\u003e debtMatrix;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Constructor for Activity."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param primaryKey The primary key of this activity."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param title Title of the activity."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param ids The people participating in the activity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Activity(int primaryKey, Title title, Integer ... ids) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        requireAllNonNull(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        participantIds \u003d new ArrayList\u003c\u003e(ids.length);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        participantActive \u003d new ArrayList\u003c\u003e(ids.length);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        idDict \u003d new HashMap\u003c\u003e(ids.length);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expenses \u003d new ArrayList\u003c\u003e(ids.length);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        participantBalances \u003d new ArrayList\u003c\u003e(ids.length);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        transferMatrix \u003d new ArrayList\u003c\u003e(ids.length);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        debtMatrix \u003d new ArrayList\u003c\u003e(ids.length);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.primaryKey \u003d primaryKey;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        invite(ids);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "      Constructor for Activity. Sets primary key automatically."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param title Title of the activity."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param ids The people participating in the activity."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Activity(Title title, Integer ... ids) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this(primaryKeyCounter++, title, ids);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public int getPrimaryKey() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return primaryKey;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static int getPrimaryKeyCounter() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return primaryKeyCounter;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static void setPrimaryKeyCounter(int pk) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        primaryKeyCounter \u003d pk;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Gets the list of id of participants in the activity."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @return An ArrayList containing the id participants."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ArrayList\u003cInteger\u003e getParticipantIds() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return participantIds;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Gets the list of expenses in the activity."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * @return An ArrayList of expenses."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    public ArrayList\u003cExpense\u003e getExpenses() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Gets the name of the activity."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * @return A String representation of the name of the activity."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the transfer matrix."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The matrix. Every (i, j) entry reflects how much i receives from"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * j. Negative amounts means i has to give j money."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public ArrayList\u003cArrayList\u003cDouble\u003e\u003e getTransferMatrix() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        simplifyExpenses();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return transferMatrix;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Invite people to the activity."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * @param people The people that will be added into the activity."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    public void invite(Person ... people) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        invite(Stream.of(people)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .map(x -\u003e x.getPrimaryKey())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .toArray(Integer[]::new));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invite people to the activity."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param primaryKeys The primary keys of the people that will be added"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * into the activity."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void invite(Integer ... primaryKeys) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int len \u003d participantIds.size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int newlen \u003d len + primaryKeys.length;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c primaryKeys.length; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            int p \u003d primaryKeys[i];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (hasPerson(p)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            participantIds.add(p);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            idDict.put(p, participantIds.size() - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantBalances.add(0.0); // newcomers don\u0027t owe."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantActive.add(false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            for (int j \u003d 0; j \u003c len; j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                debtMatrix.get(j).add(0.0); // extend columns"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                transferMatrix.get(j).add(0.0); // extend columns"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            debtMatrix.add(new ArrayList\u003c\u003e(Collections.nCopies(newlen, 0.0)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            transferMatrix.add(new ArrayList\u003c\u003e(Collections.nCopies(newlen, 0.0)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Checks whether the person with ID is present in this activity."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param personId Id of the person to check."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @return True if person exists, false otherwise."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public boolean hasPerson(Integer personId) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return idDict.containsKey(personId);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Remove people from the activity"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param people The people that will be removed from the activity."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    public void disinvite(Person ... people) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        disinvite(Stream.of(people)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .map(x -\u003e x.getPrimaryKey())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .toArray(Integer[]::new));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Remove people from the activity. Does nothing if he is involved in any expenses."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param primaryKeys The primary keys of the people you want to remove."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void disinvite(Integer ... primaryKeys) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cInteger\u003e gc \u003d new ArrayList\u003c\u003e(primaryKeys.length);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (int i \u003d 0; i \u003c primaryKeys.length; i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            int p \u003d primaryKeys[i];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (idDict.get(p) \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            int pos \u003d idDict.get(p);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (participantActive.get(pos)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    || !hasPerson(p)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            gc.add(pos);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Collections.sort(gc);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (int i \u003d 0; i \u003c gc.size(); i++) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            int pos \u003d gc.get(i) - i;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantIds.remove(pos);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantBalances.remove(pos);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantActive.remove(pos);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            debtMatrix.remove(pos);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            transferMatrix.remove(pos);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            for (int j \u003d 0; j \u003c participantIds.size(); j++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                debtMatrix.get(j).remove(pos); // extend columns"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                transferMatrix.get(j).remove(pos); // extend columns"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        idDict.clear();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (int i \u003d 0; i \u003c participantIds.size(); i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            idDict.put(participantIds.get(i), i);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Convenient function to allow adding many expenses at one go."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param expenditures The Expenses you wish to add to this activity."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void addExpense(Expense ... expenditures) throws PersonNotInActivityException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Stream.of(expenditures)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .forEach(e -\u003e addExpense(e));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Add expense to the activity"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param expense The expense to be added."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @throws PersonNotInActivityException if any person is not found"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void addExpense(Expense expense) throws PersonNotInActivityException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int payer \u003d expense.getPersonId();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int payerPos \u003d idDict.get(payer);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int[] involved \u003d expense.getInvolved(); // id of everyone involved"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int[] positionMask; // position of everyone involved"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        double amount \u003d expense.getAmount().value;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (!hasPerson(expense.getPersonId())) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            throw new PersonNotInActivityException();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (involved !\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            for (int i : involved) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                if (!hasPerson(i)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    throw new PersonNotInActivityException();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            involved \u003d participantIds.stream()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    .mapToInt(x -\u003e x)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    .filter(x -\u003e x !\u003d payer)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    .toArray();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            expense.setInvolved(involved);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        positionMask \u003d IntStream.of(involved)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .map(x -\u003e idDict.get(x))"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .toArray();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expenses.add(expense);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // We update the balance sheet"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        double splitAmount \u003d amount / (involved.length + 1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // all this does is to just add splitAmount to the (x, payerpos) entry."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // This signifies \"x owes payerpos\" $splitAmount more."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        IntStream.of(positionMask)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .forEach(x -\u003e debtMatrix"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        .get(x).set(payerPos,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                                debtMatrix.get(x).get(payerPos) + splitAmount));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        IntStream.of(involved)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .forEach(x -\u003e participantActive.set(idDict.get(x), true));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        participantActive.set(payerPos, true);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Simplifies the expenses in the balance sheet and also updates transferMatrix."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * See: https://pure.tue.nl/ws/portalfiles/portal/2062204/623903.pdf"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private void simplifyExpenses() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int n \u003d participantBalances.size();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // negative balance means you lent more than you borrowed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (int a \u003d 0; a \u003c debtMatrix.size(); a++) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            double acc \u003d 0;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            for (int b \u003d 0; b \u003c debtMatrix.size(); b++) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                acc +\u003d debtMatrix.get(a).get(b);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                acc -\u003d debtMatrix.get(b).get(a);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                transferMatrix.get(a).set(b, 0.0);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantBalances.set(a, acc);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        while (i !\u003d n \u0026\u0026 j !\u003d n) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            double bi;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            double bj;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if ((bi \u003d participantBalances.get(i)) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            } else if ((bj \u003d participantBalances.get(j)) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            double m \u003d bi \u003c -bj ? bi : -bj;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            // i gives j $m."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            transferMatrix.get(i).set(j, transferMatrix.get(i).get(j) - m);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            transferMatrix.get(j).set(i, transferMatrix.get(j).get(i) + m);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantBalances.set(i, bi - m);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            participantBalances.set(j, bj + m);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        System.out.println(\"Transfer matrix:\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (ArrayList\u003cDouble\u003e a : transferMatrix) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            System.out.println(a.toString());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Soft deletes an expense within an activity"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param positions The 0-indexed expense number to delete"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void deleteExpense(int ... positions) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        for (int i \u003d 0; i \u003c positions.length; i++) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (positions[i] \u003e 0 \u0026\u0026 positions[i] \u003c\u003d expenses.size()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                expenses.get(positions[i] - 1).delete();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "            } // if beyond range not implemented yet"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"Activity \\\"%s\\\"\", title);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return Objects.hash(title, participantIds, expenses);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return otherActivity.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \u0026\u0026 otherActivity.getParticipantIds().equals(getParticipantIds())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \u0026\u0026 otherActivity.getExpenses().equals(getExpenses());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 222,
      "liakify": 9,
      "JohnNzj": 55,
      "Aulud": 1,
      "daekoon": 44,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Represents an expense Amount in an Expense."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(double)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "            \"The amount of money spent can only be a positive number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param amount A valid amount of money spent."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Amount(double amount) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Returns true if the given amount is a valid amount."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static boolean isValidAmount(double test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } else if (other instanceof Amount) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return Math.abs(value - ((Amount) other).value) \u003c 1e-10;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Expense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Represents an expense by a person in an activity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": " * except only isDeleted is mutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final int personId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private int[] involvedIds;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private boolean isDeleted;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Constructor for Expense."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param personId ID of the person who paid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param amount The amount paid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @param description Description of the expense (can be an empty string)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Expense(int personId, Amount amount, String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        requireAllNonNull(personId, amount, description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.isDeleted \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        involvedIds \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Expense(int personId, Amount amount, String description, int ... ids) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this(personId, amount, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        requireAllNonNull(ids);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.involvedIds \u003d ids;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Returns an array of all the primary keys of involved people in this expense."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Note that this function can return null, in that case it means no list has"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * been provided to the constructor and you may assume everyone is involved."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Usually after adding to an activity this gets initialized by the activity."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public int[] getInvolved() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return involvedIds;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void setInvolved(int[] ids) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        involvedIds \u003d ids;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public int getPersonId() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public boolean isDeleted() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return isDeleted;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Marks an expense as deleted for soft-deleting expenses."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.isDeleted \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Returns true if both expenses contain the same person ID, amount and description."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } else if (other instanceof Expense) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liakify"
        },
        "content": "            Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return otherExpense.getPersonId() \u003d\u003d getPersonId()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liakify"
        },
        "content": "                    \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liakify"
        },
        "content": "                    \u0026\u0026 otherExpense.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liakify"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 23,
      "liakify": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Title.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Represents an Activity\u0027s title in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Title should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|\\\\s+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param name A valid title."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Returns true if a given string is a valid Title. (Cannot be empty)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return !test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (other !\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return other instanceof Title"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                    \u0026\u0026 title.equals(((Title) other).title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/ActivityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Signals that an operation failed to find the specified activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/PersonNotInActivityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class PersonNotInActivityException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "liakify": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsAllKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches all of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class NameContainsAllKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public NameContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return keywords.isEmpty() ? false : keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "                || (other instanceof NameContainsAllKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsAllKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static int primaryKeyCounter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final int primaryKey;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Person(int primaryKey, Name name, Phone phone, Email email, Address"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.primaryKey \u003d primaryKey;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Constructor without primary key field. Auto sets one."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.primaryKey \u003d primaryKeyCounter++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public int getPrimaryKey() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return primaryKey;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static int getPrimaryKeyCounter() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return primaryKeyCounter;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static void setPrimaryKeyCounter(int pk) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        primaryKeyCounter \u003d pk;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // TODO: If pri key \u003d\u003d, then explode?"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        builder.append(getPrimaryKey())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .append(\" Name: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .append(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Phone: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getPhone())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Email: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getEmail())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Address: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getAddress())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 29,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ActivityBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ActivityBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public interface ActivityBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    Path getActivityBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    * Reads data from storage and updates ActivityBook."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    Optional\u003cActivityBook\u003e readActivityBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    * Saves the given {@link seedu.address.model.ActivityBook} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    * @param activityBook cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    void saveActivityBook(ActivityBook activityBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InternalStateStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "podocarp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": "* Represents a storage for {@link seedu.address.model.InternalState}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "podocarp"
        },
        "content": "public interface InternalStateStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    Path getInternalStateFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Reads data from storage and updates InternalState."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    Optional\u003cInternalState\u003e readInternalState() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Saves the given {@link seedu.address.model.InternalState} to the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * @param state cannot be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    void saveInternalState(InternalState state) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonActivityBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * An Immutable ActivityBook that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "@JsonRootName(value \u003d \"activitybook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "class JsonActivityBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRIMARY_KEY \u003d \"Activity list contains duplicate primary key(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Constructs a {@code JsonActivityBook} with the given activities."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public JsonActivityBook(@JsonProperty(\"activityList\") List\u003cJsonAdaptedActivity\u003e activities) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.activityList.addAll(activities);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Converts a given {@code ActivityBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonActivityBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public JsonActivityBook(ActivityBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityList.addAll(source.getActivityList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                .map(JsonAdaptedActivity::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Converts this activity book into the model\u0027s {@code ActivityBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook activityBook \u003d new ActivityBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        for (JsonAdaptedActivity jsonAdaptedActivity : activityList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            Activity activity \u003d jsonAdaptedActivity.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (activityBook.hasPrimaryKey(activity.getPrimaryKey())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PRIMARY_KEY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            activityBook.addActivity(activity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 5,
      "daekoon": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonActivityBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * A class to access ActivityBook stored in the hard disk as a json file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class JsonActivityBookStorage implements ActivityBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonActivityBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public JsonActivityBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path getActivityBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Optional\u003cActivityBook\u003e readActivityBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return readActivityBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Similar to {@link #readActivityBook()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Optional\u003cActivityBook\u003e readActivityBook(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(prefsFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Optional\u003cJsonActivityBook\u003e jsonActivityBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                prefsFilePath, JsonActivityBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        if (!jsonActivityBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return Optional.of(jsonActivityBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void saveActivityBook(ActivityBook activityBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        saveActivityBook(activityBook, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Similar to {@link #saveActivityBook(ActivityBook)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void saveActivityBook(ActivityBook activityBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(activityBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonActivityBook(activityBook), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedActivity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import seedu.address.model.activity.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": " * Jackson-friendly version of {@link Activity}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "public class JsonAdaptedActivity {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Activity\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final int primaryKey;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private final ArrayList\u003cInteger\u003e participants \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    private final ArrayList\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003cJsonAdaptedExpense\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Constructs a {@code JsonAdaptedActivity} with the given activity details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public JsonAdaptedActivity(@JsonProperty(\"primaryKey\") int primaryKey,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                                @JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                                @JsonProperty(\"participants\") ArrayList\u003cInteger\u003e participants) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.primaryKey \u003d primaryKey;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        if (participants !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "            this.participants.addAll(participants);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Converts a given {@code Activity} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    public JsonAdaptedActivity(Activity source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        primaryKey \u003d source.getPrimaryKey();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        title \u003d source.getTitle().title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participants.addAll(source.getParticipantIds());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        expenses.addAll(source.getExpenses().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "                .map(JsonAdaptedExpense::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Activity} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        final ArrayList\u003cExpense\u003e activityExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        for (JsonAdaptedExpense exp : expenses) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "            activityExpenses.add(exp.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        // converting arraylist to array for vararg"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        Expense[] expenditures \u003d activityExpenses.toArray(new Expense[0]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        // converting arraylist to array for vararg"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Integer[] participantIds \u003d participants.toArray(new Integer[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        final Title activityTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity activity \u003d new Activity(primaryKey, activityTitle, participantIds);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activity.addExpense(expenditures);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 6,
      "JohnNzj": 68,
      "daekoon": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpense.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final int personId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"personId\") int personId, @JsonProperty(\"amount\") double amount,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "                              @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "        personId \u003d source.getPersonId();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "        final Amount amount \u003d new Amount(this.amount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return new Expense(personId, amount, description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private final int primaryKey;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"primaryKey\") int primaryKey,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            @JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.primaryKey \u003d primaryKey;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        primaryKey \u003d source.getPrimaryKey();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return new Person(primaryKey, modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 6,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInternalStateStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "podocarp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": " * A class to access InternalState stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "podocarp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "podocarp"
        },
        "content": "public class JsonInternalStateStorage implements InternalStateStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public JsonInternalStateStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Path getInternalStateFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Optional\u003cInternalState\u003e readInternalState() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return readInternalState(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Similar to {@link #readInternalState()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @param stateFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Optional\u003cInternalState\u003e readInternalState(Path stateFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return JsonUtil.readJsonFile(stateFilePath, InternalState.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void saveInternalState(InternalState state) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        state.updateInternalState();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonUtil.saveJsonFile(state, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRIMARY_KEY \u003d \"Persons list contains duplicate primary key(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (addressBook.hasPrimaryKey(person.getPrimaryKey())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PRIMARY_KEY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Similar to {@link #readUserPrefs()}, but resets the GUI window size settings if the file is"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * successfully read."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class).map(prefs -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            prefs.setGuiSettings(GuiSettings.resetWindow(prefs.getGuiSettings()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 7,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public interface Storage extends AddressBookStorage,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        UserPrefsStorage,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        InternalStateStorage,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    Optional\u003cInternalState\u003e readInternalState() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    void saveInternalState(InternalState state) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    Path getActivityBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    Optional\u003cActivityBook\u003e readActivityBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    void saveActivityBook(ActivityBook activityBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 7,
      "-": 31,
      "daekoon": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        StorageManager.class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private ActivityBookStorage activityBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private InternalStateStorage internalStateStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public StorageManager("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        InternalStateStorage internalStateStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBookStorage activityBookStorage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.activityBookStorage \u003d activityBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        this.internalStateStorage \u003d internalStateStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InternalState methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Path getInternalStateFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return internalStateStorage.getInternalStateFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Optional\u003cInternalState\u003e readInternalState()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return internalStateStorage.readInternalState();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void saveInternalState(InternalState internalState)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        internalStateStorage.saveInternalState(internalState);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        saveAddressBook("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            addressBook,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            addressBookStorage.getAddressBookFilePath()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path getActivityBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityBookStorage.getActivityBookFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Optional\u003cActivityBook\u003e readActivityBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityBookStorage.readActivityBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void saveActivityBook(ActivityBook activityBook) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBookStorage.saveActivityBook(activityBook);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 37,
      "-": 65,
      "daekoon": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * An UI component that displays information of an {@code Activity}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ActivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String FXML \u003d \"ActivityCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public final Activity activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Label participantCount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ActivityCard(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        id.setText(\"ID: \" + activity.getPrimaryKey());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        index.setText(\"#\" + displayedIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        title.setText(activity.getTitle().title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numParticipants \u003d activity.getParticipantIds().size() + 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        participantCount.setText(numParticipants + (numParticipants \u003e 1 ? \" participants\" : \" participant\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (!(other instanceof ActivityCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ActivityCard card \u003d (ActivityCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                \u0026\u0026 activity.equals(card.activity);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final int MAX_HISTORY_BUFFER_SIZE \u003d 200;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private LinkedList\u003cString\u003e commandHistory \u003d new LinkedList\u003cString\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private ListIterator\u003cString\u003e historyIterator \u003d commandHistory.listIterator(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        commandTextField.textProperty()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e keyPressedEvent(event));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Event handler for the text field."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * @param e The KeyEvent to process."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private void keyPressedEvent(KeyEvent e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        switch (e.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            traverseHistory(-1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            traverseHistory(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * Goes up or down the text field history."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * @param i Positive to go down in history, and negative to go up. Anything"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    * else resets the text field."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private void traverseHistory(int i) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        String text;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        if (i \u003e 0 \u0026\u0026 historyIterator.hasNext()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            text \u003d historyIterator.next();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        } else if (i \u003c 0 \u0026\u0026 historyIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            text \u003d historyIterator.previous();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            text \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            String text \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            if (commandHistory.size() \u003e\u003d MAX_HISTORY_BUFFER_SIZE) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                commandHistory.pop();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            commandHistory.offer(text);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            // This is just to reset it to the last item for up/down arrow."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            historyIterator \u003d commandHistory.listIterator(commandHistory.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            commandExecutor.execute(text);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    * Represents a function that can execute commands."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        * Executes the command and returns the result."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 53,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-w11-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * Panel containing a list of entries to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ListPanel\u003cT\u003e extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String FXML \u003d \"ListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private ListView\u003cT\u003e listView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ListPanel(ObservableList\u003cT\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        listView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        listView.setCellFactory(listView -\u003e new ListViewCell\u003cT\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    class ListViewCell\u003cU\u003e extends ListCell\u003cU\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        protected void updateItem(U entry, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            super.updateItem(entry, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (empty || entry \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } else if (entry instanceof Person) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                setGraphic(new PersonCard((Person) entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } else if (entry instanceof Activity) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                setGraphic(new ActivityCard((Activity) entry, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 17,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.ContextType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * The Main Window. Provides the basic application layout containing a status"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * bar in the footer and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private ListPanel\u003cPerson\u003e personListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private ListPanel\u003cActivity\u003e activityListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Root {@code StackPane} element that contains the command input region."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private StackPane commandBoxContainer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Root {@code StackPane} element that contains the main content."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private StackPane contentContainer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Root {@code StackPane} element that contains the result display label."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private StackPane resultDisplayContainer;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Root {@code StackPane} element that contains the status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private StackPane statusBarContainer;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Fills up all the containers of this window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        personListPanel \u003d new ListPanel\u003cPerson\u003e(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        activityListPanel \u003d new ListPanel\u003cActivity\u003e(logic.getFilteredActivityList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Show contacts by default"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        contentContainer.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        resultDisplayContainer.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        statusBarContainer.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        commandBoxContainer.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * Switches the current view in the content container to the view corresponding to the updated"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * {@code ContextType}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * @param newContext the {@code ContextType} of the updated GUI view"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private void contextSwitch(ContextType newContext) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        contentContainer.getChildren().clear();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (newContext) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case LIST_ACTIVITY:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            contentContainer.getChildren().add(activityListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case LIST_CONTACT:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            contentContainer.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Do nothing (leave content container empty)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ListPanel\u003cPerson\u003e getPersonListPanel() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ListPanel\u003cActivity\u003e getActivityListPanel() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return activityListPanel;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            Optional\u003cContextType\u003e newContext \u003d commandResult.getUpdatedContext();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (newContext.isPresent()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                logger.info(\"Updated context: \" + newContext.get().toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                contextSwitch(newContext.get());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 64,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String FXML \u003d \"PersonCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        id.setText(\"ID: \" + person.getPrimaryKey());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        index.setText(\"#\" + displayedIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 5,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/Components.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/ActivityCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003cHBox styleClass\u003d\"activity-card\" fx:id\u003d\"activityCard\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" hgap\u003d\"8\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" prefWidth\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" prefWidth\u003d\"310\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" prefWidth\u003d\"70\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003cVBox spacing\u003d\"2\" alignment\u003d\"CENTER\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"activity-index\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"activity-debug-id\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$blank-title\" styleClass\u003d\"activity-title\" wrapText\u003d\"true\" lineSpacing\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"participantCount\" text\u003d\"\\$participant-count\" styleClass\u003d\"activity-participant-count\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cImageView fx:id\u003d\"cardPic\" styleClass\u003d\"activity-card-image\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          fitHeight\u003d\"70\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cImage url\u003d\"@../images/activity-placeholder.png\" backgroundLoading\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Aulud": 43
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" styleClass\u003d\"command-text-field\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Aulud": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/Components.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LABEL COMPONENT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": " .label {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Regular\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: #404040;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d SCROLLBAR COMPONENT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  Minimalist MacOS-like design."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #808080;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-insets: 0 1 0 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-radius: 16px;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".scroll-bar .track {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 5 1 5 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LISTVIEW COMPONENT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  One-directional listing of items (JavaFX elements)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-insets: 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-label-padding: 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #c0c0c0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #d0d0d0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: papayawhip;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: sandybrown;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".list-cell:filled:selected .card-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: moccasin;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TABLEVIEW COMPONENT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  Table-based view with customisable rows and columns."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Regular\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BUTTON COMPONENT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  Metro style Push Button"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aulud"
        },
        "content": " *  http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aulud"
        },
        "content": " .button {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: #808080;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #b0b0b0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Regular\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: #404040;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 187
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".error.error.error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* Chain class to sufficiently high specificity to avoid using !important */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: #ff2222;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 4,
      "-": 2
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".app-root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* Linear gradient background fill */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: linear-gradient(#f8f8f8, #d8d8d8);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".command-input-root {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 8;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".command-text-field {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #e0e0e0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: #c0c0c0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-radius: 4px;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Regular\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".result-display-root {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 0 8 6 8;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* Add horizontal divider to visually separate I/O GUI elements from content */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: linear-gradient(from 0% 0% to 100% 0%, #f0f0f0, #c0c0c0, #f0f0f0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 0 0 2px 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: #c0c0c0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-radius: 4px;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Light\", \"Segoe UI Light\", sans-serif;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-highlight-fill: lightblue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".result-display .content {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* Fill background colour of TextArea content */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #dbdbdb;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".result-display:focused {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* Suppress blue focus ring for result display */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-insets: 1, 1, 1, 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".content-root {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 6 8 4 8;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".content-display, .card-list {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* Suppress blue focus ring for result display */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-insets: 1, 1, 1, 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: #c0c0c0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-radius: 4px;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".content-display .card-list #label {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Regular\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-highlight-fill: lightblue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".person-card, .activity-card {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 8;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".person-card .person-name, .activity-card .activity-title {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Black\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-weight: bolder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".person-card .person-phone {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 2 0 0 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".person-card .person-index, .activity-card .activity-index {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Bold\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 22px;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".activity-card .activity-participant-count {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC DemiLight\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".tag-list {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-hgap: 5;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".tag-list .label {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: royalblue;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Bold\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: #e0e0e0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".status-bar-root {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-padding: 10 8 4 8;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /* Add horizontal divider to visually separate content from status bar */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-color: linear-gradient(from 0% 0% to 100% 0%, #dadada, #b0b0b0, #dadada);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-width: 2px 0 0 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-border-insets: 2px 0 0 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-insets: 10px 0 0 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-background-color: #a0a0a0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aulud"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-family: \"Noto Sans CJK SC Bold\", \"Segoe UI\", sans-serif;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Aulud": 131
    }
  },
  {
    "path": "src/main/resources/view/ListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  \u003cListView fx:id\u003d\"listView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"card-list\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Aulud": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "         title\u003d\"SplitWiser\" minWidth\u003d\"512\" maxWidth\u003d\"512\" minHeight\u003d\"700\" maxHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cURL value\u003d\"@Components.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cVBox styleClass\u003d\"app-root\" minWidth\u003d\"512\" minHeight\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxContainer\" styleClass\u003d\"command-input-root\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayContainer\" styleClass\u003d\"result-display-root\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            minHeight\u003d\"120\" maxHeight\u003d\"120\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cVBox fx:id\u003d\"contentRoot\" styleClass\u003d\"content-root\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          \u003cStackPane fx:id\u003d\"contentContainer\" styleClass\u003d\"content-display\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusBarContainer\" styleClass\u003d\"status-bar-root\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Aulud": 10,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/PersonCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003cHBox styleClass\u003d\"person-card\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" hgap\u003d\"8\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" prefWidth\u003d\"70\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" prefWidth\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" prefWidth\u003d\"60\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cImageView fx:id\u003d\"cardPic\" styleClass\u003d\"profile-card-image\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          fitHeight\u003d\"70\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cImage url\u003d\"@../images/profile-placeholder.png\" backgroundLoading\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$friend\" styleClass\u003d\"person-name\" wrapText\u003d\"true\" lineSpacing\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" styleClass\u003d\"tag-list\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" text\u003d\"\\$phone\" styleClass\u003d\"person-phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003cVBox spacing\u003d\"2\" alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"person-index\" \u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"person-debug-id\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Aulud": 47
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" wrapText\u003d\"true\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Aulud": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.storage.JsonActivityBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.storage.JsonInternalStateStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonActivityBookStorage activityBookStorage \u003d new"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                JsonActivityBookStorage(temporaryFolder.resolve(\"activityBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonInternalStateStorage internalStateStorage \u003d new"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                JsonInternalStateStorage(temporaryFolder.resolve(\"state.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                userPrefsStorage, internalStateStorage, activityBookStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD + \" \" + PREFIX_ACTIVITY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"activities\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertCommandSuccess(listCommand, expectedMessage, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonInternalStateStorage internalStateStorage \u003d new"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            JsonInternalStateStorage(temporaryFolder.resolve(\"state.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // TODO: make internal fail and test it as well."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonActivityBookStorage activityBookStorage \u003d new"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                JsonActivityBookStorage(temporaryFolder.resolve(\"activityBook.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        StorageManager storage \u003d new"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                StorageManager(addressBookStorage, userPrefsStorage, internalStateStorage, activityBookStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void getFilteredActivityList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredActivityList().remove(0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                ModelManager(model.getAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 12,
      "Aulud": 9,
      "-": 154,
      "daekoon": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                TypicalPersons.getSameSurnameAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void execute_newActivityWithParticipant_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Person person \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String stringTitle \u003d \"Test Activity\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title title \u003d new Title(stringTitle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().withTitle(stringTitle).addPerson(person).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String searchTerm \u003d \"Alice\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String successMessage \u003d String.format("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                ActivityCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                validActivity,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                person.getName(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e participants \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participants.add(searchTerm);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                model.getAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expectedModel.addActivity(validActivity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedModel.setContext(new Context(validActivity));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expectedModel.updateFilteredPersonList(x -\u003e validActivity.getParticipantIds().contains(x.getPrimaryKey()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertCommandSuccess(new ActivityCommand(title, participants), model,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                successMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void execute_newActivityWithMultipleMatches_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String stringTitle \u003d \"Test Activity\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title title \u003d new Title(stringTitle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().withTitle(stringTitle).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String searchTerm \u003d \"Pauline\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String warningMessage \u003d String.format("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                ActivityCommand.WARNING_SEARCH_RESULTS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                searchTerm,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String successMessage \u003d String.format("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                ActivityCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                validActivity,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                warningMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e participants \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participants.add(searchTerm);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                model.getAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expectedModel.addActivity(validActivity);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedModel.setContext(new Context(validActivity));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expectedModel.updateFilteredPersonList(x -\u003e validActivity.getParticipantIds().contains(x.getPrimaryKey()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertCommandSuccess(new ActivityCommand(title, participants), model,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                successMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void execute_newActivityWithZeroMatches_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String stringTitle \u003d \"Test Activity\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title title \u003d new Title(stringTitle);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().withTitle(stringTitle).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String searchTerm \u003d \"No one lol\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String warningMessage \u003d String.format("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                ActivityCommand.WARNING_SEARCH_RESULTS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                searchTerm,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String successMessage \u003d String.format("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                ActivityCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                validActivity,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                warningMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e participants \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participants.add(searchTerm);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                model.getAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expectedModel.addActivity(validActivity);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedModel.setContext(new Context(validActivity));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expectedModel.updateFilteredPersonList(x -\u003e validActivity.getParticipantIds().contains(x.getPrimaryKey()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertCommandSuccess(new ActivityCommand(title, participants), model,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                successMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 3,
      "Aulud": 4,
      "daekoon": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ActivityCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.stub.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void constructor_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ActivityCommand(new Title(\"Title\"), null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ActivityCommand(null, new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ActivityCommand(null, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * TODO: put this back after abstracting out view change @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void execute_validActivityWithoutParticipants_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ModelStubAcceptingActivityAdded modelStub \u003d new ModelStubAcceptingActivityAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ActivityCommand(new Title(ActivityBuilder.DEFAULT_TITLE), new ArrayList\u003cString\u003e())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(String.format(ActivityCommand.MESSAGE_SUCCESS, validActivity, \"\", \"\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(Arrays.asList(validActivity), modelStub.activityList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * TODO: put this back after abstracting out view change @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void execute_validActivityWithParticipant_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ModelStubAcceptingActivityAdded modelStub \u003d new ModelStubAcceptingActivityAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().addPerson(TypicalPersons.ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e searchTerms \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        searchTerms.add(\"Alice\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ActivityCommand(new Title(ActivityBuilder.DEFAULT_TITLE), searchTerms)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(String.format(ActivityCommand.MESSAGE_SUCCESS, validActivity, \"Alice Pauline\", \"\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(Arrays.asList(validActivity), modelStub.activityList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * TODO: put this back after abstracting out view change @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void execute_validActivityWithInvalidParticipant_multipleMatches() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ModelStubAcceptingActivityAdded modelStub \u003d new ModelStubAcceptingActivityAdded();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelStub.addPerson(TypicalPersons.ANDY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity emptyActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e searchTerms \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        searchTerms.add(\"Pauline\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ActivityCommand(new Title(ActivityBuilder.DEFAULT_TITLE), searchTerms)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                .execute(modelStub);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String warningMessage \u003d String.format(ActivityCommand.WARNING_SEARCH_RESULTS, \"Pauline\", 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(String.format(ActivityCommand.MESSAGE_SUCCESS, emptyActivity, \"\", warningMessage),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(Arrays.asList(emptyActivity), modelStub.activityList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title breakfastTitle \u003d new Title(\"Breakfast\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title lunchTitle \u003d new Title(\"LunchTitle\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e aliceBob \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e charlie \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"Charlie\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityCommand validActivityNoParticipant \u003d new ActivityCommand(breakfastTitle, new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityCommand validActivityNoParticipantTwo \u003d new ActivityCommand(lunchTitle, new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityCommand validActivityOneParticipant \u003d new ActivityCommand(breakfastTitle, charlie);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityCommand validActivityTwoParticipants \u003d new ActivityCommand(breakfastTitle, aliceBob);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(validActivityNoParticipant.equals(validActivityNoParticipant));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // same values (with participants) -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityCommand validActivityCopy \u003d new ActivityCommand(breakfastTitle, aliceBob);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(validActivityTwoParticipants.equals(validActivityCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(validActivityNoParticipant.equals(1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(validActivityNoParticipant.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(validActivityNoParticipantTwo.equals(validActivityNoParticipant));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // different participants -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(validActivityOneParticipant.equals(validActivityTwoParticipants));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * A Model stub that is initialized with a predefined list of Person, with functional search."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private class ModelStubAcceptingActivityAdded extends ModelStub {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        final ArrayList\u003cActivity\u003e activityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        private final List\u003cPerson\u003e personList \u003d TypicalPersons.getTypicalPersons();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            personList.add(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liakify"
        },
        "content": "        public ArrayList\u003cPerson\u003e findPersonAll(NameContainsAllKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            ArrayList\u003cPerson\u003e matches \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            for (Person person : personList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                if (predicate.test(person)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                    matches.add(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return matches;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            requireNonNull(activity);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            activityList.add(activity);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        public ActivityBook getActivityBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            ActivityBook activityBook \u003d new ActivityBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            activityBook.setActivities(activityList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            return activityBook;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 9,
      "liakify": 2,
      "daekoon": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                getTypicalAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                model.getAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "-": 43,
      "daekoon": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.stub.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 113,
      "daekoon": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                getTypicalAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                getTypicalAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "-": 30,
      "daekoon": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.ContextType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        CommandResult contextualResult \u003d new CommandResult(\"output\", ContextType.LIST_ACTIVITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // identity -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertTrue(contextualResult.equals(new CommandResult(\"output\", ContextType.LIST_ACTIVITY)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // empty context -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertFalse(contextualResult.equals(commandResult));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // non-empty but different context -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertFalse(contextualResult.equals(new CommandResult(\"output\", ContextType.VIEW_ACTIVITY)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        CommandResult contextualResult \u003d new CommandResult(\"feedback\", ContextType.VIEW_ACTIVITY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // identity -\u003e returns same hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(contextualResult.hashCode(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                new CommandResult(\"feedback\", ContextType.VIEW_ACTIVITY).hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // different context type -\u003e returns different hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertNotEquals(contextualResult.hashCode(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                new CommandResult(\"feedback\", ContextType.VIEW_CONTACT).hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 24,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String VALID_ACTIVITY_TITLE \u003d \"Dinner\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String VALID_EXPENSE_DESCRIPTION \u003d \"Bubble tea\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String VALID_EXPENSE_DESCRIPTION_DESC \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        \" \" + PREFIX_DESCRIPTION + VALID_EXPENSE_DESCRIPTION;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String VALID_AMOUNT \u003d \"420\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String VALID_AMOUNT_ALT \u003d \"1337\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String VALID_AMOUNT_DESC \u003d \" \" + PREFIX_EXPENSE + VALID_AMOUNT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String VALID_AMOUNT_ALT_DESC \u003d \" \" + PREFIX_EXPENSE + VALID_AMOUNT_ALT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String INVALID_AMOUNT \u003d \"-420\"; // negative amounts?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_EXPENSE + INVALID_AMOUNT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static final String EMPTY_EXPENSE_DESCRIPTION \u003d \"  \\t\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String PARTICIPANT_DESC_AMY \u003d \" \" + PREFIX_PARTICIPANT + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public static final String PARTICIPANT_DESC_BOB \u003d \" \" + PREFIX_PARTICIPANT + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 13,
      "liakify": 3,
      "-": 128,
      "daekoon": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            getTypicalAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                model.getAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                model.getAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "-": 106,
      "daekoon": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            getTypicalAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "-": 168,
      "daekoon": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class ExpenseCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static final List\u003cString\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Amount amount \u003d new Amount(10);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static final List\u003cExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static ExpenseCommand command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static final String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static final String notEmptyString \u003d \"ayy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public static void setLists() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        persons.add(\"Pauline\"); // alice actually"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        persons.add(\"Benson\"); // yes he is benson"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        command \u003d new ExpenseCommand(persons, amount, emptyString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expenses.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void constructor_nullParams_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                new ExpenseCommand(null, new Amount(1), emptyString));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": "                new ExpenseCommand(new ArrayList\u003c\u003e(), null, emptyString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                new ExpenseCommand(new ArrayList\u003c\u003e(), new Amount(1), null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void execute_activityViewContextParticipantsPresent_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "                .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": "                .addPerson(TypicalPersons.BENSON)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.addPerson(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.addActivity(validActivity);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.setContext(new Context(validActivity));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liakify"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(String.format(ExpenseCommand.MESSAGE_SUCCESS, persons.size(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                String.format(ExpenseCommand.MESSAGE_EXPENSE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        TypicalPersons.ALICE.getName(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        amount,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        emptyString)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + String.format(ExpenseCommand.MESSAGE_EXPENSE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        TypicalPersons.BENSON.getName(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        amount,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        emptyString)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expenses.clear(); // for some odd reason @BeforeAll doesn\u0027t do this properly?"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expenses.add(new Expense(TypicalPersons.ALICE.getPrimaryKey(), amount, emptyString));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(expenses, model.getActivityBook().getActivityList().get(0).getExpenses());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void execute_specifyPeopleInvolved_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .addPerson(TypicalPersons.BENSON)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .addPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.addPerson(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.addPerson(TypicalPersons.GEORGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.addPerson(TypicalPersons.BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.addPerson(TypicalPersons.HOON); // what a name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.addActivity(validActivity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        model.setContext(new Context(validActivity));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(String.format(ExpenseCommand.MESSAGE_SUCCESS, persons.size(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liakify"
        },
        "content": "                String.format(ExpenseCommand.MESSAGE_EXPENSE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        TypicalPersons.ALICE.getName(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        amount,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        emptyString)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liakify"
        },
        "content": "                + String.format(ExpenseCommand.MESSAGE_EXPENSE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        TypicalPersons.BENSON.getName(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        amount,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        emptyString)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liakify"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liakify"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        expenses.add(new Expense(TypicalPersons.ALICE.getPrimaryKey(), amount,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    emptyString, TypicalPersons.BENSON.getPrimaryKey()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(expenses, model.getActivityBook().getActivityList().get(0).getExpenses());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void execute_notActivityViewContextMissingPeopleOrDescription_throwsCommandException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.addPerson(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void execute_notActivityViewContextPeoplePresent_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.addPerson(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liakify"
        },
        "content": "        model.addPerson(TypicalPersons.BENSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ExpenseCommand command \u003d new ExpenseCommand(persons, amount, notEmptyString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liakify"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(String.format(ExpenseCommand.MESSAGE_SUCCESS, persons.size(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liakify"
        },
        "content": "                String.format(ExpenseCommand.MESSAGE_EXPENSE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        TypicalPersons.ALICE.getName(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        amount,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        notEmptyString)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        + String.format(ExpenseCommand.MESSAGE_EXPENSE,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        TypicalPersons.BENSON.getName(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        amount,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        notEmptyString)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liakify"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liakify"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // It should add a whole activity wrapping all the contacts, and then"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // create an expense as per usual. In this case the parsing takes the first"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // person to be the payer and the rest to owe him. It is odd but cannot"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // be helped since the user enters in a sequence of persons as well, and"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // there is no special flag to differentiate them."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense expense \u003d new Expense(TypicalPersons.ALICE.getPrimaryKey(), amount, notEmptyString);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(new ActivityBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        .withTitle(notEmptyString)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        .addPerson(TypicalPersons.ALICE).addPerson(TypicalPersons.BENSON)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                        .addExpense(expense)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liakify"
        },
        "content": "                        .build(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liakify"
        },
        "content": "                model.getActivityBook().getActivityList().get(0));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 57,
      "liakify": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            getTypicalAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            getTypicalAddressBook(), new UserPrefs(), new InternalState(), new ActivityBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "-": 81,
      "daekoon": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalActivityBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.CommandSubType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.ContextType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private CommandResult expectedResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                getTypicalAddressBook(), new UserPrefs(), new InternalState(), getTypicalActivityBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                model.getAddressBook(), new UserPrefs(), new InternalState(), getTypicalActivityBook());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedModel.setContext(Context.newListContactContext());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"contacts\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedResult \u003d new CommandResult(expectedMessage, ContextType.LIST_CONTACT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void constructor_nullListCommandSubType_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ListCommand(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertCommandSuccess(new ListCommand(CommandSubType.CONTACT),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertCommandSuccess(new ListCommand(CommandSubType.CONTACT),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void execute_activityListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedModel.setContext(Context.newListActivityContext());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"activities\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expectedResult \u003d new CommandResult(expectedMessage, ContextType.LIST_ACTIVITY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        model.updateFilteredActivityList((activity) -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            activity.getTitle().equals(new Title(\"Lunch\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertCommandSuccess(new ListCommand(CommandSubType.ACTIVITY),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "Aulud": 32,
      "-": 38,
      "daekoon": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ActivityCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.commands.ActivityCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPANT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.logic.commands.ActivityCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private ActivityCommandParser parser \u003d new ActivityCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parse_compulsoryFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Valid title"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TITLE + VALID_ACTIVITY_TITLE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ActivityCommand(new Title(VALID_ACTIVITY_TITLE), new ArrayList\u003cString\u003e()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Title Missing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parse_singleParticipantPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // At least one participant exists"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String commandWithPerson \u003d \" \" + PREFIX_PARTICIPANT + VALID_NAME_BOB + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                + PREFIX_TITLE + VALID_ACTIVITY_TITLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e participantList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participantList.add(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertParseSuccess(parser, commandWithPerson,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ActivityCommand(new Title(VALID_ACTIVITY_TITLE), participantList));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parse_multipleParticipantPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // At least one participant exists"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String commandWithPerson \u003d \" \" + PREFIX_PARTICIPANT + VALID_NAME_BOB + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                + PREFIX_TITLE + VALID_ACTIVITY_TITLE + \" \" + PREFIX_PARTICIPANT + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cString\u003e participantList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participantList.add(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participantList.add(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertParseSuccess(parser, commandWithPerson,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ActivityCommand(new Title(VALID_ACTIVITY_TITLE), participantList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "podocarp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPANT_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_ALT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_DESCRIPTION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPENSE_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.model.activity.Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.logic.commands.ExpenseCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.activity.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "public class ExpenseCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private ExpenseCommandParser parser \u003d new ExpenseCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cString\u003e persons \u003d new ArrayList\u003cString\u003e() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                add(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount amount \u003d new Amount(Double.parseDouble(VALID_AMOUNT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + PARTICIPANT_DESC_BOB"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + VALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + VALID_EXPENSE_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            new ExpenseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                persons,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                amount,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                VALID_EXPENSE_DESCRIPTION"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            )"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void parse_multiplePersons_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cString\u003e persons \u003d new ArrayList\u003cString\u003e() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                add(VALID_NAME_BOB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                add(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount amount \u003d new Amount(Double.parseDouble(VALID_AMOUNT));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ExpenseCommand result \u003d new ExpenseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "                persons,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                amount,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "                VALID_EXPENSE_DESCRIPTION"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": "        );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // This checks that the sequence of amounts is indeed as input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + PARTICIPANT_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + VALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + PARTICIPANT_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + VALID_EXPENSE_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liakify"
        },
        "content": "                result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liakify"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liakify"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liakify"
        },
        "content": "            ExpenseCommand e1 \u003d parser.parse("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liakify"
        },
        "content": "                    PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liakify"
        },
        "content": "                            + VALID_AMOUNT_ALT_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liakify"
        },
        "content": "                            + VALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liakify"
        },
        "content": "                            + VALID_EXPENSE_DESCRIPTION_DESC"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liakify"
        },
        "content": "                            + PARTICIPANT_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liakify"
        },
        "content": "                            + PARTICIPANT_DESC_AMY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liakify"
        },
        "content": "            assertNotEquals(result, e1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liakify"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liakify"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void parse_negativeAmount_fail() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // negative amount"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + PARTICIPANT_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            + INVALID_AMOUNT_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "podocarp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 85,
      "liakify": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITY_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.commands.ListCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.CommandSubType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void parse_listTypeMissing_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Empty command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // All irrelevant fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TITLE + VALID_ACTIVITY_TITLE + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void parse_bothListTypesPresent_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Both type fields c/ and a/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_CONTACT + \" \" + PREFIX_ACTIVITY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void parse_oneListTypePresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Only type field c/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_CONTACT, new ListCommand(CommandSubType.CONTACT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Multiple of type field a/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ACTIVITY + \" \" + PREFIX_ACTIVITY,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                new ListCommand(CommandSubType.ACTIVITY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void parse_preamblePresent_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Irrelevant field (preamble) followed by type field"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + \" \" + PREFIX_CONTACT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void parse_oneListSubTypeWithArg_successWithArgIgnored() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Type field a/ with non-empty arg value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_ACTIVITY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                new ListCommand(CommandSubType.ACTIVITY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Type field c/ followed by irrelevant field (string arg)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_CONTACT + NAME_DESC_AMY,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                new ListCommand(CommandSubType.CONTACT));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final String INVALID_TITLE_WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final String INVALID_TITLE_EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Optional\u003cString\u003e INVALID_ADDRESS \u003d Optional.of(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Optional\u003cString\u003e INVALID_EMAIL \u003d Optional.of(\"example.com\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final String VALID_TITLE \u003d \"Breakfast\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_ADDRESS \u003d Optional.of(\"123 Main Street #0505\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_EMAIL \u003d Optional.of(\"rachel@example.com\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parseTitle_invalidValueEmpty_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE_EMPTY));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parseTitle_invalidValueWhiteSpace_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_TITLE_WHITESPACE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsTitle() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(VALID_TITLE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedTitle() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String titleWithWhitespace \u003d WHITESPACE + VALID_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Title expectedTitle \u003d new Title(VALID_TITLE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(expectedTitle, ParserUtil.parseTitle(titleWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void parseAddress_is_optional() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ParserUtil.parseAddress(Optional.empty());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS.get());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Optional\u003cString\u003e addressWithWhitespace \u003d Optional.of(WHITESPACE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + VALID_ADDRESS.get() + WHITESPACE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS.get());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void parseEmail_is_optional() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ParserUtil.parseEmail(Optional.empty());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL.get());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Optional\u003cString\u003e emailWithWhitespace \u003d Optional.of(WHITESPACE"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                + VALID_EMAIL.get() + WHITESPACE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL.get());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 17,
      "-": 182,
      "daekoon": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ActivityBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.BREAKFAST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.BREAKFAST_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.BREAKFAST_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.LUNCH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalActivityBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityBookTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private final ActivityBook activityBook \u003d new ActivityBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            FXCollections.unmodifiableObservableList(FXCollections.observableArrayList()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            activityBook.getActivityList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void resetData_withValidReadOnlyActivityBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook newData \u003d getTypicalActivityBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(newData, activityBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivities_withValidActivityArrayList_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook newData \u003d getTypicalActivityBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook.resetData(new ActivityBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003cActivity\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activities.add(BREAKFAST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activities.add(LUNCH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook.setActivities(activities);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(newData, activityBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void addActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityBook.addActivity(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void removeActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityBook.addActivity(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void removeActivity_activityNotInList_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ActivityBook activities \u003d getTypicalActivityBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(ActivityNotFoundException.class, () -\u003e activities.removeActivity(BREAKFAST_EMPTY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void setActivity_eitherNullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityBook.setActivity(null, BREAKFAST));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityBook.setActivity(LUNCH, null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void setActivity_targetActivityNotInList_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ActivityBook activities \u003d getTypicalActivityBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(ActivityNotFoundException.class, ()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            -\u003e activities.setActivity(BREAKFAST_SECOND, BREAKFAST_EMPTY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void getActivityList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ActivityBook activities \u003d getTypicalActivityBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            -\u003e activities.getActivityList().remove(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     * A stub ReadOnlyActivityBook whose activity list can violate interface constraints."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static class ActivityBookStub extends ActivityBook {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        private final ObservableList\u003cActivity\u003e activityList \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        private final ObservableList\u003cActivity\u003e unmodifiableActivityList \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                FXCollections.unmodifiableObservableList(activityList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBookStub(Collection\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            this.activityList.addAll(activities);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return unmodifiableActivityList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 51,
      "daekoon": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void findPerson_personInAddressBook_returnsCorrect() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        AddressBook addressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Pauline\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cPerson\u003e searchResult \u003d addressBook.findPerson(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedSearchResult \u003d new ArrayList\u003cPerson\u003e(Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(expectedSearchResult, searchResult);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "daekoon": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ContextTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.testutil.TypicalActivities;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class ContextTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void getMethods_incorrectType_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(new Context().getActivity(), Optional.empty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(new Context(TypicalPersons.ALICE).getActivity(), Optional.empty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(Context.newListActivityContext().getActivity(), Optional.empty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(Context.newListContactContext().getActivity(), Optional.empty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(new Context().getContact(), Optional.empty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(new Context(TypicalActivities.BREAKFAST).getContact(), Optional.empty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(Context.newListActivityContext().getContact(), Optional.empty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(Context.newListContactContext().getContact(), Optional.empty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void getMethods_correctType_returnsOptionalContainingType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(new Context(TypicalPersons.ALICE).getContact(), Optional.of(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(new Context(TypicalActivities.BREAKFAST).getActivity(), Optional.of(TypicalActivities.BREAKFAST));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void getType_allTypes_returnsCorrectType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(new Context().getType(), ContextType.MAIN);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(new Context(TypicalPersons.ALICE).getType(), ContextType.VIEW_CONTACT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(new Context(TypicalActivities.BREAKFAST).getType(), ContextType.VIEW_ACTIVITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(Context.newListActivityContext().getType(), ContextType.LIST_ACTIVITY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(Context.newListContactContext().getType(), ContextType.LIST_CONTACT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Context listContext \u003d Context.newListActivityContext();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Context viewActivityContext \u003d new Context(TypicalActivities.BREAKFAST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Context viewPersonContext \u003d new Context(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // identity -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertTrue(listContext.equals(listContext));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertTrue(viewPersonContext.equals(viewPersonContext));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // different ContextType -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertFalse(listContext.equals(Context.newListContactContext()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // same ContextType but different Activity -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertFalse(viewActivityContext.equals(new Context(TypicalActivities.LUNCH)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // same ContextType but different Person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertFalse(viewPersonContext.equals(new Context(TypicalPersons.BENSON)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 32,
      "Aulud": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.BREAKFAST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.ActivityBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import seedu.address.testutil.TypicalActivities;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(new ActivityBook(), new ActivityBook(modelManager.getActivityBook()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void findPersonAny_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.findPersonAny(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void findPersonAny_personInAddressBook_returnsSingle() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelManager.addPerson(BENSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Pauline\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e searchResult \u003d modelManager.findPersonAny(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedSearchResult \u003d new ArrayList\u003cPerson\u003e(Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(searchResult, expectedSearchResult);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void findPersonAny_personNotInAddressBook_returnsEmpty() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelManager.addPerson(BENSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Pauline\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e searchResult \u003d modelManager.findPersonAny(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedSearchResult \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(searchResult, expectedSearchResult);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void findPersonAny_multiplePeopleInAddressBook_returnsMultiple() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Person aliceFamilyMember \u003d new PersonBuilder(ALICE).withName(\"Adam Pauline\").build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelManager.addPerson(aliceFamilyMember);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Pauline\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e searchResult \u003d modelManager.findPersonAny(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedSearchResult \u003d new ArrayList\u003cPerson\u003e(Arrays.asList(ALICE, aliceFamilyMember));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(searchResult, expectedSearchResult);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void findPersonAll_personInAddressBook_returnsSingle() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liakify"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Person aliceFamilyMember \u003d new PersonBuilder(ALICE).withName(\"Adam James Pauline\").build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liakify"
        },
        "content": "        modelManager.addPerson(aliceFamilyMember);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Adam\", \"Pauline\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e searchResult \u003d modelManager.findPersonAll(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedSearchResult \u003d new ArrayList\u003cPerson\u003e(Arrays.asList(aliceFamilyMember));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(searchResult, expectedSearchResult);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void findPersonAll_personNotInAddressBook_returnsEmpty() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liakify"
        },
        "content": "        modelManager.addPerson(BENSON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Pauline\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e searchResult \u003d modelManager.findPersonAll(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedSearchResult \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(searchResult, expectedSearchResult);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void findPersonAll_multiplePeopleInAddressBook_returnsMultiple() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Person aliceFamilyMember \u003d new PersonBuilder(ALICE).withName(\"Adam James Pauline\").build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Person aliceFamilyMember2 \u003d new PersonBuilder(ALICE).withName(\"Michael James Pauline\").build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liakify"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liakify"
        },
        "content": "        modelManager.addPerson(aliceFamilyMember);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liakify"
        },
        "content": "        modelManager.addPerson(aliceFamilyMember2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Pauline\", \"James\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e searchResult \u003d modelManager.findPersonAll(predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liakify"
        },
        "content": "        ArrayList\u003cPerson\u003e expectedSearchResult \u003d new ArrayList\u003c\u003e(Arrays.asList(aliceFamilyMember, aliceFamilyMember2));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(searchResult, expectedSearchResult);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void getFilteredActivityList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredActivityList().remove(0));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void updateFilteredActivityList_subsequentMatchingFilter_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        modelManager.addActivity(TypicalActivities.BREAKFAST);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        modelManager.addActivity(TypicalActivities.BREAKFAST_SECOND);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        modelManager.addActivity(TypicalActivities.LUNCH);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        modelManager.updateFilteredActivityList((activity) -\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            activity.getTitle().equals(new Title(\"Lunch\")));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(modelManager.getFilteredActivityList().size(), 1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertTrue(modelManager.getFilteredActivityList().contains(TypicalActivities.LUNCH));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivityBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setActivityBookFilePath(null));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivityBookFilePath_validPath_setsActivityBookFilePath() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Path path \u003d Paths.get(\"activity/book/file/path\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelManager.setActivityBookFilePath(path);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(path, modelManager.getActivityBookFilePath());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook activityBook \u003d new ActivityBookBuilder().withActivity(BREAKFAST).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState state \u003d new InternalState();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, state, activityBook);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, state, activityBook);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(modelManager.equals("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ModelManager(differentAddressBook, userPrefs, state, activityBook)));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(modelManager.equals("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ModelManager(addressBook, userPrefs, state, activityBook)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(modelManager.equals("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new ModelManager(addressBook, differentUserPrefs, state, activityBook)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "liakify": 45,
      "Aulud": 21,
      "-": 125,
      "daekoon": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.TypicalActivities;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void debtAlgo_checkTwoPersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int aid \u003d TypicalPersons.ALICE.getPrimaryKey();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int eid \u003d TypicalPersons.ELLE.getPrimaryKey();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount treefiddy \u003d new Amount(30);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense one \u003d new Expense(aid, treefiddy, \"testing\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense two \u003d new Expense(eid, treefiddy, \"testing\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity a \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addExpense(one)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addExpense(two)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cArrayList\u003cDouble\u003e\u003e transfermatrix \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    // (Same for rows)       A    E"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(a.getTransferMatrix(), transfermatrix);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void debtAlgo_checkThreePersons() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int aid \u003d TypicalPersons.ALICE.getPrimaryKey();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int eid \u003d TypicalPersons.ELLE.getPrimaryKey();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int gid \u003d TypicalPersons.GEORGE.getPrimaryKey();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount bout \u003d new Amount(30);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount tree \u003d new Amount(60);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount fiddy \u003d new Amount(90);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense one \u003d new Expense(aid, bout, \"testing\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense two \u003d new Expense(eid, tree, \"testing\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense three \u003d new Expense(gid, fiddy, \"testing\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity a \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(one);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(two);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(three);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // In the end, A owes G $30. G owes A -$30 just for bookkeeping."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cArrayList\u003cDouble\u003e\u003e matrix \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    // (Same for rows)       A    E    G"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, -30.0)),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0)),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(30.0, 0.0, 0.0))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(matrix, a.getTransferMatrix());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        one \u003d new Expense(eid, bout, \"testing\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        two \u003d new Expense(gid, tree, \"testing\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        three \u003d new Expense(aid, fiddy, \"testing\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(one);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(two);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(three);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // In the end, E owes G $30."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        matrix \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    // (Same for rows)       A    E    G"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0)),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, -30.0)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 30.0, 0.0))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(matrix, a.getTransferMatrix());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void debtAlgo_checkThreePersonsButOnlyTwoAreInvolved() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int aid \u003d TypicalPersons.ALICE.getPrimaryKey();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int eid \u003d TypicalPersons.ELLE.getPrimaryKey();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount bout \u003d new Amount(30);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount tree \u003d new Amount(60);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense one \u003d new Expense(aid, bout, \"testing\", eid);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense two \u003d new Expense(eid, tree, \"testing\", aid);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity a \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(one);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(two);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // In the end, A owes G $30. G owes A -$30 just for bookkeeping."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cArrayList\u003cDouble\u003e\u003e matrix \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    // (Same for rows)       A    E    G"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, -15.0, 0.0)),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(15.0, 0.0, 0.0)),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(matrix, a.getTransferMatrix());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        one \u003d new Expense(eid, bout, \"testing\", aid);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        two \u003d new Expense(aid, tree, \"testing\", eid);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(one);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(two);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // In the end, E owes G $30."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        matrix \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    // (Same for rows)       A    E    G"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0)),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0)),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0))"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(matrix, a.getTransferMatrix());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void debtAlgo_checkFourPersons() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // Hey I swear I drew the graph manually and calculated it"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int aid \u003d TypicalPersons.ALICE.getPrimaryKey();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int bid \u003d TypicalPersons.BOB.getPrimaryKey();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int eid \u003d TypicalPersons.ELLE.getPrimaryKey();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int gid \u003d TypicalPersons.GEORGE.getPrimaryKey();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount its \u003d new Amount(4);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount bout \u003d new Amount(8);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount tree \u003d new Amount(10);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount fiddy \u003d new Amount(20);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense one \u003d new Expense(aid, its, \"testing\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense two \u003d new Expense(bid, bout, \"testing\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense three \u003d new Expense(eid, tree, \"testing\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense four \u003d new Expense(gid, fiddy, \"testing\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity a \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(one);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(two);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(three);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(four);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // In the end, A owes G $30. G owes A -$30 just for bookkeeping."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cArrayList\u003cDouble\u003e\u003e matrix \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    // (Same for rows)       A    B    E    G"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0, -6.5)),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0, -2.5)),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0, -0.5)),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(6.5, 2.5, 0.5, 0.0))"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(matrix, a.getTransferMatrix());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void debtAlgo_invitePersons() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int aid \u003d TypicalPersons.ALICE.getPrimaryKey();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int bid \u003d TypicalPersons.BOB.getPrimaryKey();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int eid \u003d TypicalPersons.ELLE.getPrimaryKey();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int gid \u003d TypicalPersons.GEORGE.getPrimaryKey();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount its \u003d new Amount(3);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount bout \u003d new Amount(6);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount tree \u003d new Amount(9);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount fiddy \u003d new Amount(10);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense one \u003d new Expense(aid, its, \"testing\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense two \u003d new Expense(bid, bout, \"testing\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense three \u003d new Expense(eid, tree, \"testing\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense four \u003d new Expense(gid, fiddy, \"testing\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity a \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(one);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(two);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(three);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.invite(TypicalPersons.GEORGE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(four);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        // In the end, A owes G $30. G owes A -$30 just for bookkeeping."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        ArrayList\u003cArrayList\u003cDouble\u003e\u003e matrix \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                List.of("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    // (Same for rows)       A    B    E    G"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, -0.5, -5.0)),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.0, 0.0, 0.0, -2.5)),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(0.5, 0.0, 0.0, 0.0)),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    new ArrayList\u003c\u003e(List.of(5.0, 2.5, 0.0, 0.0))"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(matrix, a.getTransferMatrix());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void activity_disinvitePersons_success() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity a \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity b \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        b.disinvite(TypicalPersons.ELLE.getPrimaryKey());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        b.disinvite(TypicalPersons.GEORGE, TypicalPersons.BOB);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        b.disinvite(TypicalPersons.BOB, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.disinvite(TypicalPersons.GEORGE.getPrimaryKey(),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                TypicalPersons.ELLE.getPrimaryKey());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.disinvite(TypicalPersons.BOB, TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(a, b);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void disinviteRandomPersonsStatusChecked() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int aid \u003d TypicalPersons.ALICE.getPrimaryKey();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int bid \u003d TypicalPersons.BOB.getPrimaryKey();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        int eid \u003d TypicalPersons.ELLE.getPrimaryKey();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount its \u003d new Amount(3);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount bout \u003d new Amount(6);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Amount tree \u003d new Amount(9);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense one \u003d new Expense(aid, its, \"testing\", bid, eid);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense two \u003d new Expense(bid, bout, \"testing\", aid, eid);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Expense three \u003d new Expense(eid, tree, \"testing\", aid, bid);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity a \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity b \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .withTitle(\"test\")"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.ELLE)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .addPerson(TypicalPersons.GEORGE)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.addExpense(one, two, three);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        b.addExpense(one, two, three);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.disinvite(aid, bid);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.disinvite(eid);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(a, b); // as though nothing happened"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        a.disinvite(TypicalPersons.GEORGE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertNotEquals(a, b);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void getParticipantIds() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity lunch \u003d TypicalActivities.LUNCH;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ArrayList\u003cInteger\u003e expectedIds \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expectedIds.add(TypicalPersons.BENSON.getPrimaryKey());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expectedIds.add(TypicalPersons.CARL.getPrimaryKey());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(lunch.getParticipantIds(), expectedIds);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void hasPerson() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity lunch \u003d TypicalActivities.LUNCH;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Person exists -\u003e Return true"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(lunch.hasPerson(TypicalPersons.BENSON.getPrimaryKey()));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Person doesn\u0027t exist -\u003e return false"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(lunch.hasPerson(TypicalPersons.ALICE.getPrimaryKey()));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity lunch \u003d TypicalActivities.LUNCH;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity lunchCopy \u003d new ActivityBuilder(lunch).build();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(lunch.equals(lunchCopy));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(lunch.equals(lunch));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(lunch.equals(null));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(lunch.equals(5));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(lunch.equals(TypicalActivities.BREAKFAST));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Activity editedLunch \u003d new ActivityBuilder(lunch).withTitle(\"Better Lunch\").build();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(lunch.equals(editedLunch));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // different participants -\u003e returns false"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        editedLunch \u003d new ActivityBuilder(lunch).addPerson(TypicalPersons.ALICE).build();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(lunch.equals(editedLunch));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        //TODO: Different expenses -\u003e returns false;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 285,
      "daekoon": 62,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/AmountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(-0.1));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // invalid amounts"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(Amount.isValidAmount(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(Amount.isValidAmount(-1.0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(Amount.isValidAmount(-0.0001));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // valid amounts"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(Amount.isValidAmount(0.0001));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(Amount.isValidAmount(1.0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(Amount.isValidAmount(9999));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static Amount amount \u003d new Amount(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static String description \u003d \"Fish fillet\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expense(BENSON.getPrimaryKey(), amount, null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expense(BENSON.getPrimaryKey(), null, description));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void isDeleted_deleteExpense() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Expense expense \u003d new Expense(BENSON.getPrimaryKey(), amount, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(expense.isDeleted());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "        expense.delete();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(expense.isDeleted());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/TitleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // valid Title"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(Title.isValidTitle(\"breakfast\")); // alphabets only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(Title.isValidTitle(\"2nd breakfast\")); // alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(Title.isValidTitle(\"breakfast\")); // with capital letters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertTrue(Title.isValidTitle(\"How About a 2nd Breakfast\")); // long Titles"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsAllKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class NameContainsAllKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "                new NameContainsAllKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "                new NameContainsAllKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liakify"
        },
        "content": "                new NameContainsAllKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void test_nameContainsAllKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liakify"
        },
        "content": "                new NameContainsAllKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liakify"
        },
        "content": "        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liakify"
        },
        "content": "        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liakify"
        },
        "content": "        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void test_nameDoesNotContainAllKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "        NameContainsAllKeywordsPredicate predicate \u003d new NameContainsAllKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Not all keywords matching"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"Carol\", \"Bob\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liakify"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liakify"
        },
        "content": "        predicate \u003d new NameContainsAllKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liakify"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void uniquePrimarykey() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Person person1 \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Person person2 \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Person person3 \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertFalse(person1.getPrimaryKey() \u003d\u003d person2.getPrimaryKey());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertFalse(person2.getPrimaryKey() \u003d\u003d person3.getPrimaryKey());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertFalse(person1.getPrimaryKey() \u003d\u003d person3.getPrimaryKey());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 10,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonActivityBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.BREAKFAST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalActivityBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class JsonActivityBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonActivityBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void readActivityBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readActivityBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private java.util.Optional\u003cActivityBook\u003e readActivityBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return new JsonActivityBookStorage(Paths.get(filePath)).readActivityBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertFalse(readActivityBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readActivityBook(\"notJsonFormatActivityBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void readActivityBook_invalidActivityBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readActivityBook(\"invalidActivityBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void readActivityBook_invalidAndValidActivityActivityBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readActivityBook(\"invalidAndValidActivityBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void readActivityBook_duplicateKeysActivityBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readActivityBook(\"duplicateKeysActivityBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void readAndSaveActivityBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempActivityBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook original \u003d getTypicalActivityBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonActivityBookStorage jsonActivityBookStorage \u003d new JsonActivityBookStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        jsonActivityBookStorage.saveActivityBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook readBack \u003d jsonActivityBookStorage.readActivityBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(original, new ActivityBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        original.removeActivity(BREAKFAST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        jsonActivityBookStorage.saveActivityBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        readBack \u003d jsonActivityBookStorage.readActivityBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(original, new ActivityBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        original.addActivity(BREAKFAST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        jsonActivityBookStorage.saveActivityBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        readBack \u003d jsonActivityBookStorage.readActivityBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(original, new ActivityBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void saveActivityBook_nullActivityBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveActivityBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Saves {@code activityBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private void saveActivityBook(ActivityBook activityBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            new JsonActivityBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                    .saveActivityBook(activityBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void saveActivityBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveActivityBook(new ActivityBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 6,
      "daekoon": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonActivityBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.testutil.TypicalActivities;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class JsonActivityBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonActivityBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final Path TYPICAL_ACTIVITY_BOOK_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .resolve(\"typicalActivityBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final Path INVALID_ACTIVITY_BOOK_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .resolve(\"invalidActivityBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void toModelType_typicalActivityBookFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonActivityBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ACTIVITY_BOOK_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                JsonActivityBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook activityBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook typicalActivityBook \u003d TypicalActivities.getTypicalActivityBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(activityBookFromFile, typicalActivityBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void toModelType_invalidActivityBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonActivityBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ACTIVITY_BOOK_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                JsonActivityBook.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedActivityTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "public class JsonAdaptedActivityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    private static final Title chalet \u003d new Title(\"Chalet\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private static final Activity chaletActivity \u003d new Activity(chalet);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    public void toModelType_validActivityDetails_returnsActivity() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        JsonAdaptedActivity activity \u003d new JsonAdaptedActivity(chaletActivity);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "        assertEquals(chaletActivity, activity.toModelType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "    // Only implemented 1 test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNzj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNzj": 20,
      "daekoon": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liakify"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liakify"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liakify"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liakify"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liakify"
        },
        "content": "    private static Expense expense \u003d new Expense(BENSON.getPrimaryKey(), new Amount(1.5), \"Fish fillet\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liakify"
        },
        "content": "        JsonAdaptedExpense jsonAdaptedExpense \u003d new JsonAdaptedExpense(expense);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertEquals(expense, jsonAdaptedExpense.toModelType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liakify"
        },
        "content": "        JsonAdaptedExpense jsonAdaptedExpense \u003d new JsonAdaptedExpense(BENSON.getPrimaryKey(), -0.1, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liakify"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liakify"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, jsonAdaptedExpense::toModelType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liakify"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final int pk \u003d 1337;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                new JsonAdaptedPerson(pk, INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(pk, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                new JsonAdaptedPerson(pk, VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(pk, VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                new JsonAdaptedPerson(pk, VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(pk, VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                new JsonAdaptedPerson(pk, VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(pk, VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                new JsonAdaptedPerson(pk, VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 10,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInternalStateStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "podocarp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "podocarp"
        },
        "content": "public class JsonInternalStateStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonInternalStateStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void readInternalState_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInternalState(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private Optional\u003cInternalState\u003e readInternalState(String internalStateFileInTestDataFolder)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Path internalStateFilePath \u003d addToTestDataPathIfNotNull(internalStateFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return new JsonInternalStateStorage(internalStateFilePath).readInternalState(internalStateFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void readInternalState_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertFalse(readInternalState(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void readInternalState_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInternalState(\"NotJsonFormattedInternalState.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String internalStateFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return internalStateFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(internalStateFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void readInternalState_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState expected \u003d getTypicalInternalState();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState actual \u003d readInternalState(\"TypicalInternalState.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void readInternalState_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState actual \u003d readInternalState(\"EmptyInternalState.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(new InternalState(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void readInternalState_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState expected \u003d getTypicalInternalState();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState actual \u003d readInternalState(\"ExtraValueInternalState.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private InternalState getTypicalInternalState() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return new InternalState();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void saveState_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveState(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void saveState_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveState(new InternalState(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Saves {@code internalState} at the specified {@code stateFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private void saveState(InternalState internalState, String stateFileInTestDataFolder) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            new JsonInternalStateStorage(addToTestDataPathIfNotNull(stateFileInTestDataFolder))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                    .saveInternalState(internalState);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "podocarp"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void saveInternalState_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState original \u003d new InternalState();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempState.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonInternalStateStorage jsonInternalStateStorage \u003d new JsonInternalStateStorage(pefsFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        jsonInternalStateStorage.saveInternalState(original);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState readBack \u003d jsonInternalStateStorage.readInternalState().get();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        jsonInternalStateStorage.saveInternalState(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        readBack \u003d jsonInternalStateStorage.readInternalState().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "podocarp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    private static final Path DUPLICATE_PRI_KEY_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"duplicatePrimaryKeyPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void toModelType_duplicatePriKey_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PRI_KEY_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PRIMARY_KEY,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 9,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void readUserPrefs_guiResizedInFile_windowDimensionsReset() throws DataConversionException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        expected.setGuiSettings(new GuiSettings(512.0, 700.0, 400, 200));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"GuiResizeUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(512.0, 700.0, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        userPrefs.setActivityBookFilePath(Paths.get(\"activitybook.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        userPrefs.setInternalStateFilePath(Paths.get(\"internalstate.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        original.setGuiSettings(new GuiSettings(512.0, 700.0, 42, 69));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        original.setGuiSettings(new GuiSettings(110.1, 204.0, 20, 30));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUI window size will be force-reset"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        original.setGuiSettings(new GuiSettings(512.0, 700.0, 20, 30));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 1,
      "Aulud": 16,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import static seedu.address.testutil.TypicalActivities.getTypicalActivityBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "podocarp"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonActivityBookStorage activityBookStorage \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new JsonActivityBookStorage(getTempFilePath(\"acb\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        JsonInternalStateStorage internalStateStorage \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                new JsonInternalStateStorage(getTempFilePath(\"state\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "                addressBookStorage, userPrefsStorage, internalStateStorage, activityBookStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    public void stateReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "podocarp"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "podocarp"
        },
        "content": "         * {@link JsonInternalStateStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "podocarp"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInternalStateStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "podocarp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState original \u003d new InternalState();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        storageManager.saveInternalState(original);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        InternalState retrieved \u003d storageManager.readInternalState().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        original.setGuiSettings(new GuiSettings(512.0, 700.0, 12, 31));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void getActivityBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertNotNull(storageManager.getActivityBookFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void activityBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daekoon"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daekoon"
        },
        "content": "         * {@link JsonActivityBookStorage} class."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daekoon"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonActivityBookStorageTest} class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daekoon"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook original \u003d getTypicalActivityBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        storageManager.saveActivityBook(original);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook retrieved \u003d storageManager.readActivityBook().get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        assertEquals(original, new ActivityBook(retrieved));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 14,
      "Aulud": 1,
      "-": 66,
      "daekoon": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/stub/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.stub;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.InternalState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.person.NameContainsAllKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void setInternalState(InternalState internalState) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public InternalState getInternalState() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void setContext(Context context) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Context getContext() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public ArrayList\u003cPerson\u003e findPersonAny(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liakify"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public ArrayList\u003cPerson\u003e findPersonAll(NameContainsAllKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public Path getActivityBookFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBook getActivityBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivityBook(ActivityBook activityBook) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivityBookFilePath(Path activityBookFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liakify"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liakify"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liakify"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003c? super Person\u003e predicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003c? super Activity\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liakify"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liakify": 16,
      "Aulud": 26,
      "daekoon": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ActivityBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * A utility class to help with building ActivityBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": " *     {@code ActivityBook ab \u003d new ActivityBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private ActivityBook activityBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook \u003d new ActivityBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBookBuilder(ActivityBook activityBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.activityBook \u003d activityBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Adds a new {@code Activity} to the {@code ActivityBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBookBuilder withActivity(Activity activity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        activityBook.addActivity(activity);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return activityBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ActivityBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liakify"
        },
        "content": "import seedu.address.model.activity.exceptions.PersonNotInActivityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * A utility class to help with building Activity objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class ActivityBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Resort World Sentosa\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private ArrayList\u003cInteger\u003e participantIds;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private ArrayList\u003cExpense\u003e expenses;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participantIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Initializes the ActivityBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBuilder(Activity activityToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        title \u003d activityToCopy.getTitle();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participantIds \u003d new ArrayList\u003c\u003e(activityToCopy.getParticipantIds());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        expenses \u003d new ArrayList\u003c\u003e(activityToCopy.getExpenses());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Sets the {@code Title} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Adds a {@code Person} into the {@code Activity} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public ActivityBuilder addPerson(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        participantIds.add(person.getPrimaryKey());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Adds an {@code Expense} into the {@code Activity} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * This is slow and should not be used. Use the addExpense function on the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "podocarp"
        },
        "content": "     * Activity class directly after creating an Activity."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public ActivityBuilder addExpense(Expense expense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        Activity temp \u003d this.build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        temp.addExpense(expense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "podocarp"
        },
        "content": "        return new ActivityBuilder(temp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liakify"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liakify"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * Builds the activity."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liakify"
        },
        "content": "     * @throws PersonNotInActivityException if any of the expenses are by a person not found in the activity."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liakify"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liakify"
        },
        "content": "    public Activity build() throws PersonNotInActivityException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liakify"
        },
        "content": "        Activity result \u003d new Activity(title, participantIds.toArray(new Integer[participantIds.size()]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liakify"
        },
        "content": "        if (!expenses.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liakify"
        },
        "content": "            result.addExpense(expenses.toArray(new Expense[1]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liakify"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liakify"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 5,
      "liakify": 16,
      "daekoon": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // private int primaryKey; this is unnecessary until the behavior of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "podocarp"
        },
        "content": "    // Person.equals is changed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "podocarp": 2,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalActivities.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daekoon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.ActivityBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daekoon"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daekoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daekoon"
        },
        "content": " * A utility class containing a list of {@code Activity} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daekoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daekoon"
        },
        "content": "public class TypicalActivities {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final Activity BREAKFAST \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .withTitle(\"Breakfast\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final Activity BREAKFAST_SECOND \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .withTitle(\"Second Breakfast\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .addPerson(TypicalPersons.ALICE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final Activity BREAKFAST_EMPTY \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .withTitle(\"Breakfast\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final Activity LUNCH \u003d new ActivityBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .withTitle(\"Lunch\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .addPerson(TypicalPersons.BENSON)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .addPerson(TypicalPersons.CARL)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    private TypicalActivities() {} // prevents instantiation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Returns an {@code ActivityBook} with all the typical activities."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static ActivityBook getTypicalActivityBook() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        ActivityBook ab \u003d new ActivityBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        for (Activity activity : getTypicalActivities()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            ab.addActivity(activity);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static List\u003cActivity\u003e getTypicalActivities() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BREAKFAST, LUNCH));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daekoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daekoon": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static final Person ANDY \u003d new PersonBuilder().withName(\"Andy Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"andy@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .withPhone(\"94351273\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     * Returns an {@code AddressBook} with two person sharing same last name."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daekoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static AddressBook getSameSurnameAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        for (Person person : getSameSurnamePersons()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daekoon"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daekoon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    public static List\u003cPerson\u003e getSameSurnamePersons() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daekoon"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, ANDY, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daekoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "daekoon": 20
    }
  }
]
